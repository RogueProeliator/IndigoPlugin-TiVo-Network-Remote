MIND SCHEMA VERSION 9 SUMMARY OF OPERATIONS
NOTE: (YES) means command works with RPC, (NO) means it doesn't. Vast majority do not.

********** operation = accountInfoGet (NO)
 field = aclFlag|5|string,0,1,low,,,,,,0
 field = customerId|6|string,0,1,,,,,,,0
 field = partnerAccountId|7|string,0,1,low,,,,,,0
 field = partnerId|1|idInt:partner,0,1,low,,,,,,0
 field = password|2|string,0,1,,,,,,,0
 field = sourcePartnerId|8|string,0,1,,,,,,,0
 field = tsn|3|string,0,1,,,,,,,0
 field = userName|4|string,0,1,,,,,,,0
 isFrozen = true
 number = 132
 returnType = accountInfo
   description = Request for the Account Token. You must specify the: username, password
   fieldProject = partnerId|0|0|0|partner-schedule
   fieldProject = tsn|0|0|0|partner-schedule
   fieldProject = userName|0|0|0|partner-schedule
   project = accountInfoGet|0|0|0|partner-schedule

********** operation = accountLinkRemove (NO)
 field = accountId|1|string,0,1,low,,,,,,0
 field = accountToken|2|string,0,1,,,,,,,0
 field = aclFlag|3|string,0,1,low,,,,,,0
 field = anonId|4|string,0,1,low,,,,,,0
 field = partnerAccountId|5|string,1,1,low,,,,,,0
 field = partnerId|6|string,0,1,low,,,,,,0
 number = 1129
 returnType = success
   description = Request for the unlink. You must specify the:  accountToken, partnerAccountId

********** operation = accountSearch (NO)
 field = accountId|1|idLong:accountSap,0,1,low,,,,,,0
 field = bodyId|2|idBody:body,0,1,low,,,,,,0
 field = email|3|string,0,1,low,,,,,,0
 field = partnerId|4|idInt:partner,0,1,low,,,,,,0
 fieldGroup = accountSearchFields
 fieldGroup = headerFields
 number = 135
 returnType = accountSapList
   description = Account search operation
   field = accountId|,,Search account by account id
   field = bodyId|,,Search account by TSN
   field = email|,,Search account by email
   field = partnerId|,,Partner Id field.  determined by the client certificate

********** operation = accountStore (NO)
 field = accountGroup|1|string,0,1,medium,,,,,,0
 field = accountId|2|idLong:accountSap,0,1,low,,,,,,0
 field = address|3|struct:address,1,1,low,,,,,,0
 field = changeBy|4|string,0,1,medium,,,,,,0
 field = changeDate|5|dateTime,0,1,medium,,,,,,0
 field = dayPhone|6|string,1,1,low,,,,,,0
 field = dayPhoneExt|7|string,0,1,low,,,,,,0
 field = email|8|string,0,1,low,,,,,,0
 field = firstName|9|string,1,1,low,,,,,,0
 field = heardFrom|10|string,1,1,low,,,,,,0
 field = heardFromOther|11|string,0,1,low,,,,,,0
 field = keyWord|12|string,0,1,medium,,,,,,0
 field = lastName|13|string,1,1,low,,,,,,0
 field = maKey|14|string,0,1,medium,,,,,,0
 field = marketingFlag|15|boolean,1,1,low,,,,,,0
 field = newsletter|16|boolean,1,1,low,,,,,,0
 field = nightPhone|17|string,0,1,low,,,,,,0
 field = nightPhoneExt|18|string,0,1,low,,,,,,0
 field = partnerId|19|idInt:partner,0,1,low,,,,,,0
 field = privacyFlag|20|enum:privacyOption,1,1,low,,,,,,0
 fieldGroup = accountFields
 fieldGroup = headerFields
 number = 136
 returnType = account
   description = Account Store operation
   field = accountGroup|,,user account group
   field = accountId|,,account identifier
   field = changeBy|,,changeby/modify by field
   field = changeDate|,,modified date
   field = dayPhone|,,daytime phone number
   field = dayPhoneExt|,,daytime phone number extension
   field = email|,,email address.  if not specified default to noemail@tivo.com
   field = firstName|,,first name
   field = heardFrom|,,heard from
   field = heardFromOther|,,fill in for heard from
   field = keyWord|,,keyword
   field = lastName|,,last name
   field = maKey|,,Media Access Key for Tivo-to-go
   field = marketingFlag|,,marketing opt-in option
   field = newsletter|,,newsletter opt-in option
   field = nightPhone|,,nighttime phone number
   field = nightPhoneExt|,,nighttime phone number extension
   field = partnerId|,,Partner Id field.  determined by the client certificate
   field = privacyFlag|,,account privacy level flag

********** operation = accountTokenRenew (NO)
 field = accountTokenInfo|1|struct:accountTokenInfo,0,30,low,,,,,,0
 field = aclFlag|2|string,0,1,low,,,,,,0
 field = partnerId|3|idInt:partner,0,1,low,,,,,,0
 number = 1125
 returnType = accountTokenInfoList
   description = Request for the renew of Account Token. You must specify the:  accountToken, partnerAccountId 

********** operation = activationStore (NO)
 field = activationId|1|idLong:activation,0,1,low,,,,,,0
 field = authorizationAmount|2|string,0,1,low,,,,,,0
 field = authorizationCode|3|string,0,1,low,,,,,,0
 field = body|4|struct:bodySap,1,1,low,,,,,,0
 field = creditCard|5|struct:creditCard,0,1,low,,,,,,0
 field = dealerId|6|string,0,1,high,,,,,,0
 field = dealerName|7|string,0,1,high,,,,,,0
 field = giftCard|8|struct:giftCard,0,1,low,,,,,,0
 field = material|9|string,0,1,low,,,,,,0
 field = partnerId|10|idInt:partner,0,1,low,,,,,,0
 field = promoId|11|string,0,1,low,,,,,,0
 field = referrer|12|string,1,1,low,,,,,,0
 field = rewardSignup|13|boolean,1,1,low,,,,,,0
 field = securityCode|14|string,0,1,low,,,,,,0
 field = serviceType|15|string,1,1,low,,,,,,0
 field = shipTo|16|struct:address,0,1,low,,,,,,0
 field = status|17|enum:activationStatus,0,1,low,,,,,,0
 fieldGroup = activationFields
 fieldGroup = headerFields
 number = 139
 returnType = activation
   description = Activate a DVR
   field = activationId|,,webId input field.  if not specify, a webId will be created and return.
   field = authorizationAmount|,,credit card authorization amount.
   field = authorizationCode|,,credit card authorization code.
   field = body|,,body object(DVR)
   field = creditCard|,,Credit card information
   field = dealerId|,,Dealer id
   field = dealerName|,,Dealer name
   field = giftCard|,,reference to a giftcard.  GiftCard Pin number.
   field = material|,,Material
   field = partnerId|,,Partner Id field.  determined by the client certificate
   field = promoId|,,Promotion code
   field = referrer|,,referrer email address
   field = rewardSignup|,,Flag indicating the user signed up to rewards
   field = securityCode|,,Credit card security code. specified here since it is part of the transaction and not stored.
   field = serviceType|,,SKU of the service type (offer type).
   field = shipTo|,,ShipTo address. if not specify, user account shipping address is used
   field = status|,,return status of the activation

********** operation = adBodyConfigurationRemove (NO)
 field = adBodyConfigurationId|1|idInt:adBodyConfiguration,1,1,,,,,,,0
 field = bodyId|2|idBody:body,1,1,,,,,,,0
 isFrozen = true
 number = 143
 returnType = success
   description = Removes a adBodyConfiguration object from the mind.

********** operation = adBodyConfigurationSearch (NO)
 field = adBodyConfigurationId|1|idInt:adBodyConfiguration,0,1,,,,,,,0
 field = addField|2|string,0,,,,,2,,,0
 field = anchor|3|anchorDict,0,1,,,,,,,0
 field = bodyId|4|idBody:body,0,1,,,,,,,0
 field = count|5|int,0,1,,1,,,1,,0
 field = disableIsActiveDefault|6|boolean,0,1,,,,6,,,0
 field = format|7|enum:format,0,1,,,,,,,0
 field = groupBy|8|string,0,,,,,,,32,0
 field = isActive|9|boolean,0,1,,,,,,,0
 field = isAutoDownload|10|boolean,0,1,,,,,,,0
 field = levelOfDetail|11|enum:levelOfDetail,0,1,,,,,,,0
 field = note|12|string,0,,,,,,,,0
 field = offset|13|int,0,1,,0,,,,,0
 field = orderBy|14|string,0,,,,,,,32,0
 field = removeField|15|string,0,,,,,2,,,0
 field = responseTemplate|17|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|16|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 isFrozen = true
 number = 144
 returnType = adBodyConfigurationList
   field = adBodyConfigurationId|,,Limits the search to an object with exactly the same value in this field.
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = bodyId|,,Limits the search to an object with exactly the same value in this field.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = disableIsActiveDefault|,6,In mind versions prior to mind7, the default for isActive was "true".  This was inconsistent with other mind queries: the general policy is that not setting something in a query means that you get all objects.  Setting this field to "true" switches to the normal and proper behavior.
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = isActive|,,Limits the search to an object with exactly the same value in this field.
   field = isAutoDownload|,,Limits the search to an object with exactly the same value in this field.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = adBodyConfigurationStore (NO)
 field = adBodyConfigurationId|1|idInt:adBodyConfiguration,0,1,low,,,,,,0
 field = adLaunchSource|2|enum:adLaunchSource,0,1,medium,,,,,,0
 field = bodyId|3|idBody:body,1,1,low,,,,,,0
 field = isActive|4|boolean,0,1,low,true,,,,,0
 field = isAutoDownload|5|boolean,1,1,low,,,,,,0
 field = lastInterestTime|6|dateTime,0,1,medium,,,7,,,0
 field = minOfferInstanceId|7|int,0,1,medium,0,,,,,0
 field = recordAtMost|8|int,1,1,low,,,,0,,0
 isFrozen = true
 number = 145
 returnType = adBodyConfiguration
   description = Stores a new or a modified adBodyConfigurationobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = adBodyConfigurationId|,,Globally unique ID for this adBodyConfiguration.
   field = adLaunchSource|,,A reference to a value from the adLaunchSource enum. Indicates the launch source of the Product Watch HME application during the session in which this body agreed to subscribe to the Product Watch service.  In other words, this field should only be specified during an insert, but not during an update, or else an exception is thrown.
   field = bodyId|,,The globally unique ID for this body.
   field = isActive|,,Is the AdSearch state active?
   field = isAutoDownload|,,Do we automatically download ads?
   field = lastInterestTime|,7,The last time an interest expressed in ad/brand/category.
   field = minOfferInstanceId|,,The minimum offer instance id for adMatch algorithm to use. This allows TCD to download an ad it has already downloaded.
   field = recordAtMost|,,The maximum number of ads to record.

********** operation = adBrandRemove (NO)
 field = adBrandId|1|idInt:adBrand,1,1,,,,,,,0
 isFrozen = true
 number = 148
 returnType = success
   description = Removes a adBrand object from the mind.

********** operation = adBrandSearch (NO)
 field = adBrandId|1|idInt:adBrand,0,1,,,,,,,0
 field = addField|2|string,0,,,,,2,,,0
 field = anchor|3|anchorDict,0,1,,,,,,,0
 field = bodyId|4|idBody:body,0,1,,,,,,,0
 field = count|5|int,0,1,,1,,,1,,0
 field = format|6|enum:format,0,1,,,,,,,0
 field = groupBy|7|string,0,,,,,,,32,0
 field = imageUrl|8|imageUrl,0,1,,,,7,,255,0
 field = isActive|9|boolean,0,1,,true,,,,,0
 field = levelOfDetail|10|enum:levelOfDetail,0,1,,,,,,,0
 field = note|11|string,0,,,,,,,,0
 field = offset|12|int,0,1,,0,,,,,0
 field = orderBy|13|string,0,,,,,,,32,0
 field = removeField|14|string,0,,,,,2,,,0
 field = responseTemplate|19|struct:responseTemplate,0,,,,,,,,0
 field = title|15|string,0,1,,,,,,128,0
 field = titleLike|16|string,0,1,,,,,,128,0
 field = titlePrefix|17|string,0,1,,,,,,128,0
 field = useAnchorOperation|18|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 isFrozen = true
 number = 149
 returnType = adBrandList
   field = adBrandId|,,Limits the search to an object with exactly the same value in this field.
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = bodyId|,,If input body id, search for those brands this TSN can see based upon which groups they are in.  This does not seem too secure since the body id cannot be required.  If a TSN fails to input their id, then they get to see every brand.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = imageUrl|,7,Limits the search to an object with exactly the same value in this field.
   field = isActive|,,Limits the search to an object with exactly the same value in this field.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = title|,,Limits the search to an object with exactly the same value in this field.
   field = titleLike|,,Restricts search to brands LIKE this name. %title%
   field = titlePrefix|,,Restricts search to brands with this wording as prefix to title.
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = adBrandStore (NO)
 field = adBrandId|1|idInt:adBrand,0,1,low,,,,,,0
 field = adGroupMapForAdBrandId|2|struct:adGroupMap,0,,low,,,7,,,1
 field = adInterestForAdBrandId|3|struct:adInterest,0,1,low,,,7,,,1
 field = description|4|string,1,1,low,,,,,4096,0
 field = image|8|struct:image,0,,medium,,,,,,0
 field = imageUrl|5|imageUrl,0,1,medium,,,7,,255,0
 field = isActive|6|boolean,0,1,low,true,,,,,0
 field = title|7|string,1,1,low,,,,,128,0
 isFrozen = true
 number = 150
 returnType = adBrand
   description = Stores a new or a modified adBrandobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = adBrandId|,,Globally unique ID for this brand.
   field = adGroupMapForAdBrandId|,7,Holds results of the adGroupMapForAdBrandId note. (i.e. get groups (max 20) this brand is in)
   field = adInterestForAdBrandId|,7,Holds results of the adInterestForAdBrandId note.
   field = description|,,A longer description.
   field = image|,,image metadata associated with this brand.
   field = imageUrl|,7,The URL for a graphic image to be displayed with this brand. The size of the image is expected to be ....
   field = isActive|,,An isActive flag (false indicates soft deletes).
   field = title|,,The name of this brand.  "Apple", "Ford", etc.

********** operation = adCategoryMapRemove (NO)
 field = adCategoryMapId|1|idLong:adCategoryMap,1,1,,,,,,,0
 isFrozen = true
 number = 155
 returnType = success
   description = Removes a adCategoryMap object from the mind.

********** operation = adCategoryMapSearch (NO)
 field = adCategoryId|1|idInt:adCategory,0,1,,,,,,,0
 field = adCategoryMapId|2|idLong:adCategoryMap,0,1,,,,,,,0
 field = adId|3|idInt:ad,0,1,,,,,,,0
 field = addField|4|string,0,,,,,2,,,0
 field = anchor|5|anchorDict,0,1,,,,,,,0
 field = bodyId|6|idBody:body,0,1,,,,,,,0
 field = count|7|int,0,1,,1,,,1,,0
 field = format|8|enum:format,0,1,,,,,,,0
 field = groupBy|9|string,0,,,,,,,32,0
 field = isActive|10|boolean,0,1,,true,,,,,0
 field = isFeatured|11|boolean,0,1,,,,,,,0
 field = levelOfDetail|12|enum:levelOfDetail,0,1,,,,,,,0
 field = note|13|string,0,,,,,,,,0
 field = offset|14|int,0,1,,0,,,,,0
 field = orderBy|15|string,0,,,,,,,32,0
 field = removeField|16|string,0,,,,,2,,,0
 field = responseTemplate|19|struct:responseTemplate,0,,,,,,,,0
 field = title|17|string,0,1,,,,,,128,0
 field = useAnchorOperation|18|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 isFrozen = true
 number = 156
 returnType = adCategoryMapList
   field = adCategoryId|,,Limits the search to an object with exactly the same value in this field.
   field = adCategoryMapId|,,Limits the search to an object with exactly the same value in this field.
   field = adId|,,Limits the search to an object with exactly the same value in this field.
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = bodyId|,,If body ID is specified, the resulting list will include only adCategoryMap objects representing ads belonging to a group to which this body also belongs.  If no body ID is specified, group membership will not be considered.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = isActive|,,Limits the search to an object with exactly the same value in this field.
   field = isFeatured|,,Limits the search to an object with exactly the same value in this field.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = title|,,Limits the search to an object with exactly the same value in this field.
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = adCategoryMapStore (NO)
 field = adCategoryId|1|idInt:adCategory,1,1,low,,,,,,0
 field = adCategoryMapId|2|idLong:adCategoryMap,0,1,low,,,,,,0
 field = adId|3|idInt:ad,1,1,low,,,,,,0
 field = description|4|string,0,1,medium,,,,,4096,0
 field = displayRank|5|int,0,1,medium,,,,0,,0
 field = image|11|struct:image,0,,medium,,,,,,0
 field = imageUrl|6|imageUrl,0,1,medium,,,7,,255,0
 field = isActive|7|boolean,0,1,low,true,,,,,0
 field = isFeatured|8|boolean,0,1,low,false,,,,,0
 field = shortDescription|9|string,0,1,medium,,,,,128,0
 field = title|10|string,0,1,low,,,,,128,0
 isFrozen = true
 number = 157
 returnType = adCategoryMap
   description = Stores a new or a modified adCategoryMapobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = adCategoryId|,,Unique category id ad is in.
   field = adCategoryMapId|,,Globally unique ID for this category/ad mapping.
   field = adId|,,Unique ad id.
   field = description|,,The override description of (featured) ad.
   field = displayRank|,,Display rank of the ad.
   field = image|,,image metadata associated with this brand.
   field = imageUrl|,7,The override graphic of (featured) ad.
   field = isActive|,,An isActive flag.
   field = isFeatured|,,Whether the ad is featured.
   field = shortDescription|,,Override short description of (featured) ad.
   field = title|,,The override title of the ad (i.e. for featured ad).

********** operation = adCategoryRemove (NO)
 field = adCategoryId|1|idInt:adCategory,1,1,,,,,,,0
 isFrozen = true
 number = 158
 returnType = success
   description = Removes a adCategory object from the mind.

********** operation = adCategorySearch (NO)
 field = adCategoryId|1|idInt:adCategory,0,1,,,,,,,0
 field = addField|2|string,0,,,,,2,,,0
 field = anchor|3|anchorDict,0,1,,,,,,,0
 field = bodyId|4|idBody:body,0,1,,,,,,,0
 field = count|5|int,0,1,,1,,,1,,0
 field = format|6|enum:format,0,1,,,,,,,0
 field = groupBy|7|string,0,,,,,,,32,0
 field = isActive|8|boolean,0,1,,,,,,,0
 field = levelOfDetail|9|enum:levelOfDetail,0,1,,,,,,,0
 field = note|10|string,0,,,,,,,,0
 field = offset|11|int,0,1,,0,,,,,0
 field = orderBy|12|string,0,,,,,,,32,0
 field = parentAdCategoryId|13|idInt:adCategory,0,1,,,,,,,0
 field = removeField|14|string,0,,,,,2,,,0
 field = responseTemplate|20|struct:responseTemplate,0,,,,,,,,0
 field = title|15|string,0,1,,,,,,128,0
 field = titleLike|16|string,0,1,,,,,,128,0
 field = titlePrefix|17|string,0,1,,,,,,128,0
 field = topLevelOnly|18|boolean,0,1,,,,,,,0
 field = useAnchorOperation|19|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 isFrozen = true
 number = 159
 returnType = adCategoryList
   field = adCategoryId|,,Limits the search to an object with exactly the same value in this field.
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = bodyId|,,If input body id, search for those categories this TSN can see based upon which groups they are in.  This does not seem too secure since the body id cannot be required.  If a TSN fails to input their id, then they get to see every category.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = isActive|,,Limits the search to an object with exactly the same value in this field.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = parentAdCategoryId|,,Limits the search to an object with exactly the same value in this field.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = title|,,Limits the search to an object with exactly the same value in this field.
   field = titleLike|,,Restricts search to categories LIKE this name. %title%
   field = titlePrefix|,,Restricts search to categories with this wording as prefix to title.
   field = topLevelOnly|,,Restricts search to top-level only.
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = adCategoryStore (NO)
 field = adCategoryId|1|idInt:adCategory,0,1,low,,,,,,0
 field = adGroupMapForAdCategoryId|2|struct:adGroupMap,0,,low,,,7,,,1
 field = adInterestForAdCategoryId|3|struct:adInterest,0,1,low,,,7,,,1
 field = description|4|string,0,1,medium,,,,,4096,0
 field = displayRank|5|int,0,1,medium,,,,0,,0
 field = image|12|struct:image,0,,medium,,,,,,0
 field = imageUrl|6|imageUrl,0,1,medium,,,7,,255,0
 field = isActive|7|boolean,0,1,low,,,,,,0
 field = parentAdCategoryId|8|idInt:adCategory,0,1,low,,,,,,0
 field = shortDescription|9|string,1,1,low,,,,,128,0
 field = subtitle|10|string,0,1,medium,,,,,128,0
 field = title|11|string,1,1,low,,,,,128,0
 isFrozen = true
 number = 160
 returnType = adCategory
   description = Stores a new or a modified adCategoryobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = adCategoryId|,,Globally unique ID for this category.
   field = adGroupMapForAdCategoryId|,7,Holds results of the adGroupMapForAdCategoryId note. (i.e. get groups (max 20) this category is in)
   field = adInterestForAdCategoryId|,7,Holds results of the adInterestForAdCategoryId note.
   field = description|,,A long description of the category.
   field = displayRank|,,The display rank of a category or sub-category. Currently will only have meaning for the "What is Hot" TiVo featured category to be displayed at the top of the list. Other categories have a value of null.
   field = image|,,image metadata associated with this brand.
   field = imageUrl|,7,The URL for a graphic image to be displayed with this category. The size of the image is expected to be ....
   field = isActive|,,An isActive flag (false indicates soft deletes).
   field = parentAdCategoryId|,,The parent of the category. Top-level categories have null as parent. Sub-categories point to the category id of their parent.
   field = shortDescription|,,A short description of the category.
   field = subtitle|,,The subtitle of the category or sub-category. (i.e. "Automotive")
   field = title|,,The title of the category or sub-category. (i.e. "Automotive")

********** operation = adGroupMapRemove (NO)
 field = adGroupMapId|1|idLong:adGroupMap,1,1,,,,,,,0
 isFrozen = true
 number = 166
 returnType = success
   description = Removes a adGroupMap object from the mind.

********** operation = adGroupMapSearch (NO)
 field = adBrandId|1|idInt:adBrand,0,1,,,,,,,0
 field = adCategoryId|2|idInt:adCategory,0,1,,,,,,,0
 field = adGroupMapId|3|idLong:adGroupMap,0,1,,,,,,,0
 field = adId|4|idInt:ad,0,1,,,,,,,0
 field = addField|5|string,0,,,,,2,,,0
 field = anchor|6|anchorDict,0,1,,,,,,,0
 field = count|7|int,0,1,,1,,,1,,0
 field = format|8|enum:format,0,1,,,,,,,0
 field = getAds|9|boolean,0,1,,false,,,,,0
 field = getBrands|10|boolean,0,1,,false,,,,,0
 field = getCategories|11|boolean,0,1,,false,,,,,0
 field = groupBy|12|string,0,,,,,,,32,0
 field = groupName|13|string,0,1,,,,,,128,0
 field = levelOfDetail|14|enum:levelOfDetail,0,1,,,,,,,0
 field = note|15|string,0,,,,,,,,0
 field = offset|16|int,0,1,,0,,,,,0
 field = orderBy|17|string,0,,,,,,,32,0
 field = removeField|18|string,0,,,,,2,,,0
 field = responseTemplate|20|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|19|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 isFrozen = true
 number = 167
 returnType = adGroupMapList
   field = adBrandId|,,Limits the search to an object with exactly the same value in this field.
   field = adCategoryId|,,Limits the search to an object with exactly the same value in this field.
   field = adGroupMapId|,,Limits the search to an object with exactly the same value in this field.
   field = adId|,,Limits the search to an object with exactly the same value in this field.
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = getAds|,,Restricts search to ads.
   field = getBrands|,,Restricts search to brands.
   field = getCategories|,,Restricts search to categories.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = groupName|,,Limits the search to an object with exactly the same value in this field.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = adGroupMapStore (NO)
 field = adBrandId|1|idInt:adBrand,0,1,low,,,,,,0
 field = adCategoryId|2|idInt:adCategory,0,1,low,,,,,,0
 field = adGroupMapId|3|idLong:adGroupMap,0,1,low,,,,,,0
 field = adId|4|idInt:ad,0,1,low,,,,,,0
 field = groupName|5|string,1,1,low,,,,,128,0
 isFrozen = true
 number = 168
 returnType = adGroupMap
   description = Stores a new or a modified adGroupMapobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = adBrandId|,,The globally unique ID for this brand.
   field = adCategoryId|,,The globally unique ID for this category.
   field = adGroupMapId|,,Globally unique ID for this group category/brand/ad map.
   field = adId|,,The globally unique ID for this ad.
   field = groupName|,,The  unique group name.

********** operation = adInterestRemove (NO)
 field = adInterestId|1|idInt:adInterest,1,1,,,,,,,0
 field = bodyId|2|idBody:body,1,1,,,,,,,0
 isFrozen = true
 number = 171
 returnType = success
   description = Removes a adInterest object from the mind.

********** operation = adInterestSearch (NO)
 field = adBrandId|1|idInt:adBrand,0,1,,,,,,,0
 field = adCategoryId|2|idInt:adCategory,0,1,,,,,,,0
 field = adId|3|idInt:ad,0,1,,,,,,,0
 field = adInterestId|4|idInt:adInterest,0,1,,,,,,,0
 field = addField|5|string,0,,,,,2,,,0
 field = anchor|6|anchorDict,0,1,,,,,,,0
 field = bodyId|7|idBody:body,1,1,,,,,,,0
 field = count|8|int,0,1,,1,,,1,,0
 field = format|9|enum:format,0,1,,,,,,,0
 field = getAds|10|boolean,0,1,,false,,,,,0
 field = getBrands|11|boolean,0,1,,false,,,,,0
 field = getCategories|12|boolean,0,1,,false,,,,,0
 field = groupBy|13|string,0,,,,,,,32,0
 field = isActive|14|boolean,0,1,,true,,,,,0
 field = isFeatured|15|boolean,0,1,,,,,,,0
 field = levelOfDetail|16|enum:levelOfDetail,0,1,,,,,,,0
 field = note|17|string,0,,,,,,,,0
 field = offset|18|int,0,1,,0,,,,,0
 field = orderBy|19|string,0,,,,,,,32,0
 field = removeField|20|string,0,,,,,2,,,0
 field = responseTemplate|22|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|21|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 isFrozen = true
 number = 172
 returnType = adInterestList
   field = adBrandId|,,Limits the search to an object with exactly the same value in this field.
   field = adCategoryId|,,Limits the search to an object with exactly the same value in this field.
   field = adId|,,Limits the search to an object with exactly the same value in this field.
   field = adInterestId|,,Limits the search to an object with exactly the same value in this field.
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = bodyId|,,Limits the search to an object with exactly the same value in this field.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = getAds|,,Restricts search to ads.
   field = getBrands|,,Restricts search to brands.
   field = getCategories|,,Restricts search to categories.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = isActive|,,Limits the search to an object with exactly the same value in this field.
   field = isFeatured|,,Limits the search to an object with exactly the same value in this field.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = adInterestStore (NO)
 field = adBrandId|1|idInt:adBrand,0,1,low,,,,,,0
 field = adCategoryId|2|idInt:adCategory,0,1,low,,,,,,0
 field = adId|3|idInt:ad,0,1,low,,,,,,0
 field = adInterestId|4|idInt:adInterest,0,1,low,,,,,,0
 field = adLaunchSource|5|enum:adLaunchSource,0,1,medium,,,,,,0
 field = bodyId|6|idBody:body,1,1,low,,,,,,0
 field = isActive|7|boolean,0,1,low,true,,,,,0
 field = isFeatured|8|boolean,0,1,low,false,,,,,0
 isFrozen = true
 number = 173
 returnType = adInterest
   description = Stores a new or a modified adInterestobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = adBrandId|,,The globally unique ID for this brand.
   field = adCategoryId|,,The globally unique ID for this category.
   field = adId|,,The globally unique ID for this ad.
   field = adInterestId|,,Globally unique ID for this ad interest.
   field = adLaunchSource|,,A reference to a value in the adLaunchSource enum. Indicates the launch source of the Product Watch HME application during the session in which this body expressed interest.
   field = bodyId|,,The globally unique ID for this body.
   field = isActive|,,An isActive flag (false indicates soft deletes).
   field = isFeatured|,,Describes if the interest expressed through feature or not. At least one of adCategoryId, adBrandId, or adId will be provided.

********** operation = adLaunchSourceLogStore (NO)
 field = adBrandId|1|idInt:adBrand,0,1,low,,,,,,0
 field = adCategoryId|2|idInt:adCategory,0,1,low,,,,,,0
 field = adId|3|idInt:ad,0,1,low,,,,,,0
 field = adLaunchSource|4|enum:adLaunchSource,1,1,,,,,,,0
 field = bodyId|5|idBody:body,1,1,,,,,,,0
 number = 174
 returnType = success
   description = This logs an instance of the Product Watch HME application launching. At most one of adId, adBrandId, or adCategoryId could be present to indicate which particular screen the application launched into. If none of them are present, then it may be assumed that the application launched into the main menu screen.
   field = adBrandId|,,The globally unique ID for this brand.
   field = adCategoryId|,,The globally unique ID for this category.
   field = adId|,,The globally unique ID for this ad.
   field = adLaunchSource|,,The enum name of the launch source from which the Product Watch HME application is launched.
   field = bodyId|,,The ID of the body launching the Product Watch HME application.

********** operation = adMatchOffers (NO)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 field = isSchedulable|2|boolean,0,1,,,,,,,0
 field = maxReturn|3|int,1,1,,,,,0,,0
 field = subscriptionId|4|idInt:subscription,1,1,,,,,,,0
 isFrozen = true
 number = 180
 returnType = offerList
   description = Returns the next offers to be delivered to a body in a specific order in which they should be delivered. Note that some randomness is intended for offers corresponding to ads that are not explicitly ranked, so do not always expect the resulting offerList to yield the same result for a particular set of data.
   field = isSchedulable|,,If true, return a list of offers filtered for this body based on download history, Product Watch interests, and preview mode. If false, this should return a list, in no particular order, of all existing offers that are associated with Product Watch ads, whether the ads are currently inactive, in preview mode, outside their validity period, not subscribed to, etc.
   field = maxReturn|,,The maximum number of offers desired by the caller.
   field = subscriptionId|,,The ID of the subscription associated with AdMatchSource. For Product Watch, we expect just one subscription per body, as long as Mind clients (namely, the Product Watch HME app) manage it properly.

********** operation = adOptStatusGet (NO)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 isFrozen = true
 number = 184
 returnType = adOptStatus
   description = The request from a body for the opt-in status.
   field = bodyId|,,The id of the body requesting the information.

********** operation = adRemove (NO)
 field = adId|1|idInt:ad,1,1,,,,,,,0
 isFrozen = true
 number = 185
 returnType = success
   description = Removes a ad object from the mind.

********** operation = adSearch (NO)
 field = adBrandId|1|idInt:adBrand,0,1,,,,,,,0
 field = adId|2|idInt:ad,0,1,,,,,,,0
 field = addField|3|string,0,,,,,2,,,0
 field = anchor|4|anchorDict,0,1,,,,,,,0
 field = bodyId|5|idBody:body,0,1,,,,,,,0
 field = count|6|int,0,1,,1,,,1,,0
 field = format|7|enum:format,0,1,,,,,,,0
 field = groupBy|8|string,0,,,,,,,32,0
 field = ignoreIsActive|9|boolean,0,1,,false,,,,,0
 field = isActive|10|boolean,0,1,,true,,,,,0
 field = levelOfDetail|11|enum:levelOfDetail,0,1,,,,,,,0
 field = note|12|string,0,,,,,,,,0
 field = offerId|13|idString:offer,0,1,,,,,,,0
 field = offset|14|int,0,1,,0,,,,,0
 field = orderBy|15|string,0,,,,,,,32,0
 field = removeField|16|string,0,,,,,2,,,0
 field = responseTemplate|21|struct:responseTemplate,0,,,,,,,,0
 field = title|17|string,0,1,,,,,,128,0
 field = titleLike|18|string,0,1,,,,,,128,0
 field = titlePrefix|19|string,0,1,,,,,,128,0
 field = useAnchorOperation|20|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 isFrozen = true
 number = 188
 returnType = adList
   field = adBrandId|,,Limits the search to an object with exactly the same value in this field.
   field = adId|,,Limits the search to an object with exactly the same value in this field.
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = bodyId|,,If input body id, search for those ads this TSN can see based upon which groups they are in.  This does not seem too secure since the body id cannot be required.  If a TSN fails to input their id, then they get to see every ad.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = ignoreIsActive|,,If set to true, ignore the "isActive" field such that both active and inactive ads will be returned in the result set.  If this is set to true, the "isActive" field should not be specified. If not present, defaults to false.
   field = isActive|,,Limits the search to an object with exactly the same value in this field.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offerId|,,Limits the search to an object with exactly the same value in this field.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = title|,,Limits the search to an object with exactly the same value in this field.
   field = titleLike|,,Restricts search to ads LIKE this name. %title%
   field = titlePrefix|,,Restricts search to ads with this wording as prefix to title.
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = adStore (NO)
 field = adBrandId|1|idInt:adBrand,1,1,low,,,,,,0
 field = adGroupMapForAdId|2|struct:adGroupMap,0,,low,,,7,,,1
 field = adId|3|idInt:ad,0,1,low,,,,,,0
 field = adInterestForAdId|4|struct:adInterest,0,1,low,,,7,,,1
 field = description|5|string,0,1,medium,,,,,4096,0
 field = image|13|struct:image,0,,medium,,,,,,0
 field = imageUrl|6|imageUrl,0,1,medium,,,7,,255,0
 field = isActive|7|boolean,0,1,low,true,,,,,0
 field = maxStartTime|8|dateTime,0,1,medium,,,,,,0
 field = minEndTime|9|dateTime,0,1,medium,,,,,,0
 field = offerId|10|idString:offer,1,1,low,,,,,,0
 field = shortDescription|11|string,1,1,low,,,,,128,0
 field = title|12|string,1,1,low,,,,,128,0
 isFrozen = true
 number = 189
 returnType = ad
   description = Stores a new or a modified adobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = adBrandId|,,The unique brand ID this ad belongs to.
   field = adGroupMapForAdId|,7,Holds results of the adGroupMapForAdId note. (i.e. gets groups (max 20) this ad is in)
   field = adId|,,Globally unique ID for this ad.
   field = adInterestForAdId|,7,Holds results of the adInterestForAdId note
   field = description|,,A longer description (needed for subcategory video list).
   field = image|,,image metadata associated with this brand.
   field = imageUrl|,7,The URL for a graphic image to be displayed with this brand. The size of the image is expected to be ....
   field = isActive|,,An isActive flag.
   field = maxStartTime|,,Maximum time an ad may start. (GMT time)
   field = minEndTime|,,Minimum time an ad ends. (GMT time)
   field = offerId|,,CDS offer id
   field = shortDescription|,,A short description.
   field = title|,,The title of this ad. "Nike conquers world"

********** operation = adStoreWithValidityPeriod (NO)
 field = adId|1|idInt:ad,1,1,,,,,,,0
 field = maxStartTimeYearOffset|2|int,1,1,,,,,,,0
 field = minEndTimeYearOffset|3|int,1,1,,,,,,,0
 number = 190
 returnType = ad
   description = Update an existing ad object with a date range based on offsets from IMindHelper.getCurrentDateTime(). We'll use offset units of years, just to make sure our tests work (unless automated tests somehow take longer than a year to run).

********** operation = adminTaskExecute (NO)
 field = parameters|1|anyDict,0,1,,,,,,,0
 field = taskName|2|string,1,1,,,,,,,0
 number = 1825
 returnType = adminTaskResponse
   description = Performs an admin task, a loosely-defined operation that can be added without making a schema change.  Admin tasks should be short-lived and folded into the main schema when it is possible.

********** operation = anonymizerCacheClear (NO)
 number = 1093
 returnType = success
   description = Clears the anonymizer cache.

********** operation = anonymizerCacheDump (NO)
 number = 1827
 returnType = anonymizerEntryList
   description = Dumps the entries of the anonymizer cache.

********** operation = appBodyDataRemove (NO)
 field = appName|1|string,1,1,low,,,,,255,0
 field = bodyId|2|idBody:body,1,1,,,,,,,0
 field = keyName|3|string,0,1,,,,,,255,0
 fieldGroup = appNameField
 isFrozen = true
 number = 198
 returnType = success
   field = appName|,,The name of an application that stores data in the mind.
   field = bodyId|,,Limits the search to an object with exactly the same value in this field.
   field = keyName|,,Limits the search to an object with exactly the same value in this field.

********** operation = appBodyDataReport (NO)
 field = appName|1|string,1,1,low,,,,,255,0
 field = keyNamePrefix|2|string,0,1,low,,,,,255,0
 field = maxUpdateDate|3|dateTime,1,1,,,,,,,0
 field = minUpdateDate|4|dateTime,1,1,,,,,,,0
 fieldGroup = appNameField
 fieldGroup = keyNamePrefixField
 isFrozen = true
 number = 199
 returnType = appBodyDataList
   description = Given an bodyId, appName, keyName will return a list of values.
   field = appName|,,The name of an application that stores data in the mind.
   field = keyNamePrefix|,,Matches keyNames that start with this string.
   field = maxUpdateDate|,,maxUpdateDate
   field = minUpdateDate|,,minUpdateDate

********** operation = appBodyDataSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = appName|3|string,1,,low,,,,,255,0
 field = bodyId|4|idBody:body,0,1,,,,,,,0
 field = count|5|int,0,1,,1,,,1,,0
 field = format|6|enum:format,0,1,,,,,,,0
 field = groupBy|7|string,0,,,,,,,32,0
 field = keyName|8|string,0,1,,,,,,255,0
 field = keyNamePrefix|9|string,0,1,low,,,,,255,0
 field = levelOfDetail|10|enum:levelOfDetail,0,1,,,,,,,0
 field = maxUpdateDate|11|dateTime,0,1,,,,,,,0
 field = minUpdateDate|12|dateTime,0,1,,,,,,,0
 field = noLimit|13|boolean,0,1,,,,,,,0
 field = note|14|string,0,,,,,,,,0
 field = offset|15|int,0,1,,0,,,,,0
 field = orderBy|16|string,0,,,,,,,32,0
 field = removeField|17|string,0,,,,,2,,,0
 field = responseTemplate|21|struct:responseTemplate,0,,,,,,,,0
 field = shouldTouchUpdateDate|18|boolean,0,1,,true,,,,,3
 field = useAnchorOperation|19|boolean,0,1,,true,,,,,0
 field = value|20|string,0,1,,,,,,,0
 fieldGroup = keyNamePrefixField
 fieldGroup = searchFields
 isFrozen = true
 number = 200
 orderBy = bodyId
 orderBy = keyName
 orderBy = updateDate
 returnType = appBodyDataList
   description = Given an bodyId, appName, keyName, value will return a list of values.
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = bodyId|,,Limits the search to an object with exactly the same value in this field.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = keyName|,,Limits the search to an object with exactly the same value in this field.
   field = keyNamePrefix|,,Matches keyNames that start with this string.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = maxUpdateDate|,,maxUpdateDate
   field = minUpdateDate|,,minUpdateDate
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   field = value|,,Limits the search to an object with exactly the same value in this field.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = appBodyDataStore (NO)
 field = appName|1|string,1,1,low,,,,,255,0
 field = bodyId|2|idBody:body,1,1,low,,,,,,0
 field = expireDate|3|dateTime,0,1,low,,,,,,0
 field = keyName|4|string,1,1,low,,,,,255,0
 field = value|5|string,1,1,low,,,,,,0
 isFrozen = true
 number = 201
 returnType = appBodyData
   description = Stores a new or a modified appBodyDataobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = appName|,,The name of an application that stores data in the mind.
   field = bodyId|,,bodyId
   field = expireDate|,,expire date
   field = keyName|,,An arbitrary string used by the application to identify a chunk of data.
   field = value|,,value

********** operation = appBodyLogRemove (NO)
 field = appName|1|string,1,1,low,,,,,255,0
 field = bodyId|2|idBody:body,1,1,,,,,,,0
 field = keyName|3|string,0,1,,,,,,255,0
 fieldGroup = appNameField
 isFrozen = true
 number = 204
 returnType = success
   field = appName|,,The name of an application that stores data in the mind.
   field = bodyId|,,Limits the search to an object with exactly the same value in this field.
   field = keyName|,,Limits the search to an object with exactly the same value in this field.

********** operation = appBodyLogSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = appName|3|string,1,1,low,,,,,255,0
 field = bodyId|4|idBody:body,1,1,,,,,,,0
 field = count|5|int,0,1,,1,,,1,,0
 field = format|6|enum:format,0,1,,,,,,,0
 field = groupBy|7|string,0,,,,,,,32,0
 field = keyName|8|string,0,1,,,,,,255,0
 field = levelOfDetail|9|enum:levelOfDetail,0,1,,,,,,,0
 field = note|10|string,0,,,,,,,,0
 field = offset|11|int,0,1,,0,,,,,0
 field = orderBy|12|string,0,,,,,,,32,0
 field = removeField|13|string,0,,,,,2,,,0
 field = responseTemplate|15|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|14|boolean,0,1,,true,,,,,0
 fieldGroup = appNameField
 fieldGroup = searchFields
 isFrozen = true
 number = 205
 returnType = appBodyLogList
   description = Given an bodyId, appName, keyName will return a list of values.
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = appName|,,The name of an application that stores data in the mind.
   field = bodyId|,,Limits the search to an object with exactly the same value in this field.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = keyName|,,Limits the search to an object with exactly the same value in this field.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = appBodyLogStore (NO)
 field = appName|1|string,1,1,low,,,,,255,0
 field = bodyId|2|idBody:body,1,1,low,,,,,,0
 field = keyName|3|string,1,1,low,,,,,255,0
 field = value|4|string,1,1,low,,,,,,0
 isFrozen = true
 number = 206
 returnType = appBodyLog
   description = Stores a new or a modified appBodyLogobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = appName|,,The name of an application that stores data in the mind.
   field = bodyId|,,bodyId
   field = keyName|,,An arbitrary string used by the application to identify a chunk of data.
   field = value|,,value

********** operation = appGlobalDataInitialize (NO)
 field = appName|1|string,1,1,low,,,,,255,0
 field = keyName|2|string,1,1,low,,,,,255,0
 field = value|3|string,1,1,low,,,,,,0
 fieldGroup = appDataValueField
 fieldGroup = appNameField
 fieldGroup = keyNameField
 isFrozen = true
 number = 1496
 returnType = appGlobalData
   description = appGlobalDataSearch for appName/keyName. If exist, then return the first appGlobalData. If not exist, then appGlobalDataStore.
   field = appName|,,The name of an application that stores data in the mind.
   field = keyName|,,An arbitrary string used by the application to identify a chunk of data.
   field = value|,,value

********** operation = appGlobalDataRemove (NO)
 field = appName|1|string,1,1,low,,,,,255,0
 field = keyName|2|string,0,1,,,,,,255,0
 fieldGroup = appNameField
 isFrozen = true
 number = 211
 returnType = success
   field = appName|,,The name of an application that stores data in the mind.
   field = keyName|,,Limits the search to an object with exactly the same value in this field.

********** operation = appGlobalDataSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = appName|3|string,1,1,low,,,,,255,0
 field = count|4|int,0,1,,1,,,1,,0
 field = format|5|enum:format,0,1,,,,,,,0
 field = groupBy|6|string,0,,,,,,,32,0
 field = keyName|7|string,0,1,,,,,,255,0
 field = levelOfDetail|8|enum:levelOfDetail,0,1,,,,,,,0
 field = note|9|string,0,,,,,,,,0
 field = offset|10|int,0,1,,0,,,,,0
 field = orderBy|11|string,0,,,,,,,32,0
 field = removeField|12|string,0,,,,,2,,,0
 field = responseTemplate|14|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|13|boolean,0,1,,true,,,,,0
 fieldGroup = appNameField
 fieldGroup = searchFields
 isFrozen = true
 number = 212
 returnType = appGlobalDataList
   description = Given an appName, keyName, or both, will return a list of values.
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = appName|,,The name of an application that stores data in the mind.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = keyName|,,Limits the search to an object with exactly the same value in this field.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = appGlobalDataStore (NO)
 field = appName|1|string,1,1,low,,,,,255,0
 field = keyName|2|string,1,1,low,,,,,255,0
 field = value|3|string,1,1,low,,,,,,0
 isFrozen = true
 number = 213
 returnType = appGlobalData
   description = Stores a new or a modified appGlobalDataobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = appName|,,The name of an application that stores data in the mind.
   field = keyName|,,An arbitrary string used by the application to identify a chunk of data.
   field = value|,,value

********** operation = appGlobalLogRemove (NO)
 field = appName|1|string,1,1,low,,,,,255,0
 field = keyName|2|string,0,1,,,,,,255,0
 fieldGroup = appNameField
 isFrozen = true
 number = 216
 returnType = success
   field = appName|,,The name of an application that stores data in the mind.
   field = keyName|,,Limits the search to an object with exactly the same value in this field.

********** operation = appGlobalLogSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = appName|3|string,1,1,low,,,,,255,0
 field = count|4|int,0,1,,1,,,1,,0
 field = format|5|enum:format,0,1,,,,,,,0
 field = groupBy|6|string,0,,,,,,,32,0
 field = keyFilter|14|string,0,1,,,,,,,0
 field = keyName|7|string,0,1,,,,,,255,0
 field = levelOfDetail|8|enum:levelOfDetail,0,1,,,,,,,0
 field = note|9|string,0,,,,,,,,0
 field = offset|10|int,0,1,,0,,,,,0
 field = orderBy|11|string,0,,,,,,,32,0
 field = removeField|12|string,0,,,,,2,,,0
 field = responseTemplate|15|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|13|boolean,0,1,,true,,,,,0
 fieldGroup = appNameField
 fieldGroup = searchFields
 groupBy = appName
 isFrozen = true
 number = 217
 orderBy = updateDate
 returnType = appGlobalLogGroupList
   description = Given an appName, keyName, or both, will return a list of values. Note: Currently appGlobalLog is being used to store and access the MDH VOD import events. This API will eventually be deprecated when an appropriate event management framework is available.
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = appName|,,The name of an application that stores data in the mind.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = keyFilter|,,Filter for keyName field; ignore when keyName present; accpets *substr* like wildcard syntax
   field = keyName|,,Limits the search to an object with exactly the same value in this field.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = appGlobalLogStore (NO)
 field = appName|1|string,1,1,low,,,,,255,0
 field = keyName|2|string,1,1,low,,,,,255,0
 field = value|3|string,1,1,low,,,,,,0
 isFrozen = true
 number = 218
 returnType = appGlobalLog
   description = Stores a new or a modified appGlobalLogobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = appName|,,The name of an application that stores data in the mind.
   field = keyName|,,An arbitrary string used by the application to identify a chunk of data.
   field = value|,,value

********** operation = applicationKill (NO)
 field = applicationId|1|idInt:application,0,1,,,,,,,0
 field = instanceId|2|int,0,1,,,,,,,0
 field = killAll|3|boolean,1,1,,,,,,,0
 number = 1881
 returnType = success
   description = Kills an application based on the application ID.  If multiple instances of the specified application are running, it does nothing and returns failure. Either applicationId or instanceId must be present.  If both are present,  then the applicationId must match the instanceId.  If it doesn't, an error is returned. Follows the "Command" service pattern.
   field = applicationId|,,The application ID of the application to kill
   field = instanceId|,,The instance ID of the application to kill
   field = killAll|,,If set, kills all instances of the given application type. If not set, does not kill any instances of the application type when more than one are running.

********** operation = applicationLaunch (NO)
 field = applicationId|1|idInt:application,1,1,,,,,,,0
 field = parameter|3|string,0,,,,,,,,0
 field = parameters|2
 number = 1882
 returnType = applicationLaunchResponse
   description = Launches an application with the specified application ID. Returns an instance ID for the new application or 0 on failure. Follows the "Command" service pattern.
   field = applicationId|,,The application ID of the application type to be launched
   field = parameter|,,Extra parameters to be passed to the application

********** operation = applicationRuntimeInfoGet (NO)
   description = Registers an application with the monitor, returning the information the application needs to know where and what to render.
   field = applicationId|,,The ID that was assined to the application when it was installed.

********** operation = applicationSearch (NO)
 field = runningOnly|1|boolean,1,1,,,,,,,0
 field = uiHidden|2|boolean,0,1,,,,,,,0
 number = 1885
 returnType = applicationList
   description = Returns a list of the available applications (if the runningOnly flag is not set), or a list of currently running applications (if the runningOnly flag IS set) Follows the "Q and A" service pattern.
   field = runningOnly|,,Specifies whether the list is to be of available applications or currently running ones
   field = uiHidden|,,If set to true, this field indicates that hidden applications should  be returned in the response. If false or not specified, hidden  applications will not appear in the response.

********** operation = armLogEntryStore (NO)
 field = event|1|union:armEvent,1,1,low,,,,,,0
 field = timestamp|2|dateTime,0,1,low,,,,,,0
 number = 1499
 returnType = success
   description = Stores a new ARM log entry.  So long as ARM events are sent immediately to the Mind for logging, the timestamping of the entries can be left to the Mind to perform.  Set a specific timestamp if, for some reason, the ARM event is not sent to the mind for logging until sometime after the event occurs.
   field = event|,,The event that happened.
   field = timestamp|,,The time at which the event occurred, with millisecond resolution.  If not specified, will be assigned by the Mind.

********** operation = armRestartLog (NO)
 number = 1641
 returnType = success
   description = Restarts the arm logging service by causing it to close any existing logging output stream handle and reopen the log from the standard location.  This is used by the log uploader after it has rotated the location of the arm log, and should not be called by other users.

********** operation = assetLocalityRemove (NO)
 field = assetId|1|idLong:asset,0,1,,,,,,,0
 field = vodLocality|2|string,0,1,,,,,,50,0
 isFrozen = true
 number = 1492
 returnType = success
   description = THIS OPERATION SHOULD NOT BE USED. IT WILL BE DELETED. USE offerLocality INSTEAD. Remove an asset, locality map.
   field = assetId|,,Limits the search to an object with exactly the same value in this field.
   field = vodLocality|,,Limits the search to an object with exactly the same value in this field.

********** operation = assetLocalitySearch (NO)
 field = activeOnly|16|boolean,0,1,,,,,,,0
 field = addField|4|string,0,,,,,2,,,0
 field = anchor|5|anchorDict,0,1,,,,,,,0
 field = assetId|1|idLong:asset,0,1,,,,,,,0
 field = count|6|int,0,1,,1,,,1,,0
 field = format|7|enum:format,0,1,,,,,,,0
 field = groupBy|8|string,0,,,,,,,32,0
 field = levelOfDetail|9|enum:levelOfDetail,0,1,,,,,,,0
 field = note|10|string,0,,,,,,,,0
 field = offset|11|int,0,1,,0,,,,,0
 field = orderBy|12|string,0,,,,,,,32,0
 field = propagateMode|15|enum:propagateModeType,0,1,,,,,,,0
 field = propogateMode|2
 field = removeField|13|string,0,,,,,2,,,0
 field = responseTemplate|17|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|14|boolean,0,1,,true,,,,,0
 field = vodLocality|3|string,0,1,,,,,,50,0
 fieldGroup = searchFields
 groupBy = vodLocality
 isFrozen = true
 number = 1493
 returnType = assetLocalityGroupList
   description = THIS OPERATION SHOULD NOT BE USED. IT WILL BE DELETED. USE offerLocality INSTEAD. search assets for a locality
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = assetId|,,Limits the search to an object with exactly the same value in this field.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = propagateMode|,,Limits the search to an object with exactly the same value in this field.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   field = vodLocality|,,Limits the search to an object with exactly the same value in this field.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = assetLocalityStore (NO)
 field = assetId|1|idLong:asset,1,1,low,,,,,,0
 field = propagateMode|4|enum:propagateModeType,0,1,low,,,,,,0
 field = propogateMode|2
 field = vodLocality|3|string,0,1,low,,,,,50,0
 isFrozen = true
 number = 1494
 returnType = assetLocality
   description = Stores a new or a modified assetLocalityobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = propagateMode|,,Flag to indicate if the media associated  with the asset will be distributed to the VOD servers  via the CDN (content distribution network) or direct
   field = vodLocality|,,vod locality

********** operation = assetRemove (NO)
 field = assetId|1|idLong:asset,0,1,,,,,,,0
 field = partnerAssetId|2|string,0,1,,,,,,100,0
 field = partnerId|3|idInt:partner,0,1,,,,,,,0
 isFrozen = true
 number = 221
 returnType = success
   description = Remove an asset.  You must specify either the assetId or the partnerAssetId/partnerId pair.
   field = assetId|,,Limits the search to an object with exactly the same value in this field.
   field = partnerAssetId|,,Limits the search to an object with exactly the same value in this field.
   field = partnerId|,,Limits the search to an object with exactly the same value in this field.
   fieldProject = assetId|0|0|0|hme-cds,partner-cds
   fieldProject = partnerAssetId|0|0|0|hme-cds,partner-cds
   fieldProject = partnerId|0|0|0|hme-cds,partner-cds
   project = assetRemove|0|0|0|hme-cds,partner-cds

********** operation = assetSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = advancedKeyword|2|boolean,0,1,,,,,,,0
 field = anchor|3|anchorDict,0,1,,,,,,,0
 field = assetId|4|idLong:asset,0,1,,,,,,,0
 field = audioLanguage|29|string,0,1,,,,,,26,0
 field = captionLanguage|30|string,0,1,,,,,,26,0
 field = collectionId|5|idLong:collection,0,1,,,,,,,0
 field = contentId|6|idLong:content,0,,,,,,,,0
 field = count|7|int,0,1,,1,,,1,,0
 field = credit|8|struct:credit,0,,,,,,,,0
 field = creditKeyword|9|string,0,1,,,,,,100,0
 field = creditKeywordRole|37|enum:role,0,1,,,,,,,0
 field = descriptionKeyword|10|string,0,1,,,,,,100,0
 field = descriptionPrefix|49|string,0,1,,,,,,100,0
 field = episodeNum|31|int,0,1,,,3,,0,,0
 field = excludeContentId|43|idLong:content,0,,,,,,,,0
 field = excludeObjectIdAndType|38|long,0,,,,,,,,0
 field = format|11|enum:format,0,1,,,,,,,0
 field = groupBy|12|string,0,,,,,,,32,0
 field = hdtv|44|boolean,0,1,,,,,,,0
 field = includeCreditsInKeywordSearch|36|boolean,0,1,,false,,,,,0
 field = includeOverridingContent|32|boolean,0,1,,false,,,,,0
 field = keyword|13|string,0,1,,,,,,100,0
 field = levelOfDetail|14|enum:levelOfDetail,0,1,,,,,,,0
 field = maxCreateDate|34|dateTime,0,1,,,,,,,0
 field = maxUpdateDate|33|dateTime,0,1,,,,,,,0
 field = minCreateDate|35|dateTime,0,1,,,,,,,0
 field = minUpdateDate|15|dateTime,0,1,,,,,,,0
 field = note|16|string,0,,,,,,,,0
 field = objectIdAndType|39|long,0,,,,,,,,0
 field = offset|17|int,0,1,,0,,,,,0
 field = orCredit|18|struct:credit,0,,,,,2,,,0
 field = orderBy|19|string,0,,,,,,,32,0
 field = partnerAssetId|20|string,0,1,,,,,,100,0
 field = partnerContentId|21|string,0,1,,,,,,100,0
 field = partnerId|22|idInt:partner,0,1,,,,,,,0
 field = providerAssetId|46|string,0,1,,,,,,100,0
 field = providerId|45|string,0,1,,,,,,40,0
 field = removeField|23|string,0,,,,,2,,,0
 field = resolveCount|40|int,0,1,,0,,,,,0
 field = resolveLevelOfDetail|41|enum:levelOfDetail,0,1,,low,,,,,0
 field = resolveOffset|42|int,0,1,,0,,,,,0
 field = responseTemplate|47|struct:responseTemplate,0,,,,,,,,0
 field = seasonNumber|24|int,0,1,,,,,0,,0
 field = subtitle|48|string,0,1,,,,,,255,0
 field = subtitleKeyword|25|string,0,1,,,,,,100,0
 field = subtitlePrefix|26|string,0,1,,,,,,100,0
 field = url|27|url,0,1,,,,,,4096,0
 field = useAnchorOperation|28|boolean,0,1,,true,,,,,0
 fieldGroup = contentSearchFields
 fieldGroup = searchFields
 fieldGroup = resolveSearchFields
 groupBy = collectionId
 groupBy = encodingType
 groupBy = partnerId
 isFrozen = true
 number = 222
 orderBy = assetId
 orderBy = collectionId
 orderBy = partnerAssetId
 orderBy = partnerId
 returnType = assetList
   description = Search for an asset.  You must specify exactly one of: assetId, partnerId or title.
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = advancedKeyword|,,When searching with option=advanced, a boolean mode search is done where words starting with   are ANDed together, words starting with - are NOTd, words with * are substring matched, and words enclosed in "" are looked at as a phrase.  Currently not supported in contentSearch or collectionSearch
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = assetId|,,Limits the search to an object with exactly the same value in this field.
   field = audioLanguage|,,search for assets with at least one audio track matching this RFC3066-formatted language identifier.
   field = captionLanguage|,,search for assets with at least one caption track matching this RFC3066-formatted language identifier.
   field = collectionId|,,Limits the search to an object with exactly the same value in this field.
   field = contentId|,,Limits the search to an object with exactly the same value in this field.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = credit|,,Currently not supported in contentSearch. If multiple credits provided, they will be ORd
   field = creditKeyword|,,Currently not supported in contentSearch or collectionSearch
   field = creditKeywordRole|,,Only applies if a creditKeyword is passed in
   field = descriptionKeyword|,,Currently not supported in contentSearch or collectionSearch
   field = episodeNum|3,,Limits the search to an object with exactly the same value in this field.
   field = excludeObjectIdAndType|,,An objectIdAndType from an idSequence obtained in a previous search operation, to be excluded from the result set.
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = hdtv|,,Limits the search to an object with exactly the same value in this field.
   field = includeCreditsInKeywordSearch|,,If set to true, the keyword filter will include credits in the search in addition title, subtitle and description
   field = includeOverridingContent|,,When partners wish to author their own metadata for a content object, while maintaining the link to the broadcast content object, they store the original contentId in the overriddenContentId field of the content object. Passing true for this flag, along with a contentId, will result in both the contentId and the overriddenContentId fields to be searched. The result is that both the content corresponding to the contentId and any contents overriding that content will be returned. Passing true for this flag without passing a contentId is illegal.
   field = keyword|,,The keyword field is used to search through title, subtitle and description to find program matches.  The results are ordered in a way that makes sense.  Wildcards and double-quotes are supported.  Currently not supported in contentSearch or collectionSearch
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = objectIdAndType|,,Limits the search to an object with exactly the same value in this field.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orCredit|,2,Put this credit in an OR with other orCredits.  Currently not supported in contentSearch or collectionSearch
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = partnerAssetId|,,Limits the search to an object with exactly the same value in this field.
   field = partnerContentId|,,Limits the search to an object with exactly the same value in this field.
   field = partnerId|,,Limits the search to an object with exactly the same value in this field.
   field = providerAssetId|,,Limits the search to an object with exactly the same value in this field.
   field = providerId|,,Limits the search to an object with exactly the same value in this field.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = resolveCount|,,If a format of (string)idSequence is specified, the count of objectIds that should be resolved into objects. Ignored unless format = (string)idSequence.
   field = resolveLevelOfDetail|,,If a format of (string)idSequence is specified, the levelOfDetail at which the objects should be resolved.  Ignored unless resolveCount > 0 and format = (string)idSequence.
   field = resolveOffset|,,If a format of (string)idSequence is specified, the offset into the objectId list that should be resolved into objects. Ignored unless resolveCount > 0 and format = (string)idSequence.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = seasonNumber|,,Limits the search to an object with exactly the same value in this field.
   field = subtitle|,,Limits the search to an object with exactly the same value in this field.
   field = subtitleKeyword|,,Currently not supported in contentSearch or collectionSearch
   field = url|,,Limits the search to an object with exactly the same value in this field.
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = advancedKeyword|0|0|0|partner-schedule
   fieldProject = assetId|0|0|0|hme-cds,partner-cds
   fieldProject = collectionId|0|0|0|hme-cds,partner-cds
   fieldProject = contentId|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = count|0|0|0|all
   fieldProject = credit|0|0|0|partner-schedule
   fieldProject = creditKeyword|0|0|0|partner-schedule
   fieldProject = creditKeywordRole|0|0|0|partner-schedule
   fieldProject = descriptionKeyword|0|0|0|partner-schedule
   fieldProject = episodeNum|0|3|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = includeCreditsInKeywordSearch|0|0|0|partner-schedule
   fieldProject = keyword|0|0|0|partner-schedule
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = partnerAssetId|0|0|0|hme-cds,partner-cds
   fieldProject = partnerContentId|0|0|0|partner-cds
   fieldProject = partnerId|0|0|0|hme-cds,partner-cds
   fieldProject = responseTemplate|0|0|0|all
   fieldProject = seasonNumber|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = subtitle|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = subtitleKeyword|0|0|0|partner-schedule
   fieldProject = url|0|0|0|hme-cds,partner-cds
   project = assetSearch|0|0|0|hme-cds,partner-cds

********** operation = assetStore (NO)
 field = assetId|1|idLong:asset,0,1,low,,,,,,0
 field = assetTagForAssetId|2|struct:assetTag,0,1,medium,,,7,,,1
 field = audio|21|struct:audio,0,,low,,,,,,0
 field = audioLevel|3|enum:audioLevel,0,1,low,,,8,,,0
 field = caption|22|struct:caption,0,,low,,,,,,0
 field = checksum|28|string,0,1,low,,,,,64,0
 field = collectionId|4|idLong:collection,0,1,low,,,,,,0
 field = contentId|5|idLong:content,0,1,low,,,,,,0
 field = downloadKey|6|string,0,1,low,,,,,,0
 field = drmType|7|enum:drmType,0,1,low,tivo,,,,,0
 field = duration|8|int,0,1,low,,,,0,,0
 field = encodingType|9|enum:encodingType,0,1,low,mpeg2ProgramStream,,,,,0
 field = encrypterVersion|10|string,0,1,medium,,5,,,100,0
 field = fileChecksum|11|string,0,1,low,,,,,100,0
 field = hdtv|24|boolean,0,1,low,,,,,,0
 field = headerChecksum|12|string,0,1,low,,,,,100,0
 field = httpAuth|13|string,0,1,low,,,,,150,0
 field = mediaDescription|20|struct:mediaDescription,0,1,low,,,,,,0
 field = partnerAssetId|14|string,0,1,low,,,,,100,0
 field = partnerId|15|idInt:partner,1,1,low,,,,,,0
 field = partnerInfo|23|struct:partnerInfo,0,1,high,,,7,,,1
 field = playbackKey|16|string,0,1,low,,,,,,0
 field = providerAssetId|27|string,0,1,low,,,,,100,0
 field = providerId|25|string,0,1,low,,,,,40,0
 field = size|17|long,0,1,low,,,,0,,0
 field = tagInfo|18|struct:infoTable,0,1,medium,,,2,,,0
 field = url|19|url,0,1,low,,,,,4096,0
 field = version|26|string,0,1,low,,,,,20,0
 isFrozen = true
 number = 223
 returnType = asset
   description = Stores a new or a modified assetobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = assetId|,,Globally unique id for this asset.
   field = audio|,,information about an audio track
   field = audioLevel|,8,Audio Level (Stereo, Dolby, etc)
   field = caption|,,information about a caption track
   field = checksum|,,This field stores the checksum of all of the metadata attributes of this object.
   field = collectionId|,,collectionId
   field = contentId|,,contentId
   field = downloadKey|,,Encryption keys for download
   field = drmType|,,Type of drm to be used with this asset
   field = duration|,,duration in seconds. required unless encodingType is unknown
   field = encodingType|,,How the asset is encoded
   field = encrypterVersion|5,,Version of Encrypter used to encrypt the asset
   field = fileChecksum|,,Checksum of the file.
   field = hdtv|,,hdtv flag
   field = headerChecksum|,,Checksum of the header.
   field = httpAuth|,,login authorization info (user:pass)
   field = partnerAssetId|,,Partner Asset Id.
   field = partnerId|,,Id of the partner that created the object.
   field = partnerInfo|,7,a container for the partnerInfoForPartnerId annotation
   field = playbackKey|,,Encryption keys for playback
   field = providerAssetId|,,Provider Asset Id, unique within a provider.
   field = providerId|,,Provider Id
   field = size|,,Size of the asset in bytes. required unless encodingType is unknown
   field = tagInfo|,2,A table of out-of-band tags for iPreview  functionality
   field = url|,,Location of the asset
   field = version|,,version of the asset
   fieldProject = assetId|0|0|0|hme-cds,partner-cds
   fieldProject = audioLevel|0|0|8|hme-cds,partner-cds
   fieldProject = collectionId|0|0|0|hme-cds,partner-cds
   fieldProject = contentId|0|0|0|hme-cds,partner-cds
   fieldProject = downloadKey|0|0|0|hme-cds,partner-cds
   fieldProject = drmType|0|0|0|hme-cds,partner-cds
   fieldProject = duration|0|0|0|hme-cds,partner-cds
   fieldProject = encodingType|0|0|0|hme-cds,partner-cds
   fieldProject = encrypterVersion|0|5|0|hme-cds,partner-cds
   fieldProject = fileChecksum|0|0|0|hme-cds,partner-cds
   fieldProject = headerChecksum|0|0|0|hme-cds,partner-cds
   fieldProject = httpAuth|0|0|0|hme-cds,partner-cds
   fieldProject = mediaDescription|0|0|0|hme-cds,partner-cds
   fieldProject = partnerAssetId|0|0|0|hme-cds,partner-cds
   fieldProject = partnerId|0|0|0|hme-cds,partner-cds
   fieldProject = playbackKey|0|0|0|hme-cds,partner-cds
   fieldProject = size|0|0|0|hme-cds,partner-cds
   fieldProject = url|0|0|0|hme-cds,partner-cds
   project = assetStore|0|0|0|hme-cds,partner-cds

********** operation = assetTagRemove (NO)
 field = assetId|1|idLong:asset,1,1,,,,,,,0
 isFrozen = true
 number = 227
 returnType = success
   description = Removes a assetTag object from the mind.

********** operation = assetTagSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = assetId|3|idLong:asset,1,1,,,,,,,0
 field = count|4|int,0,1,,1,,,1,,0
 field = format|5|enum:format,0,1,,,,,,,0
 field = groupBy|6|string,0,,,,,,,32,0
 field = levelOfDetail|7|enum:levelOfDetail,0,1,,,,,,,0
 field = note|8|string,0,,,,,,,,0
 field = offset|9|int,0,1,,0,,,,,0
 field = orderBy|10|string,0,,,,,,,32,0
 field = removeField|11|string,0,,,,,2,,,0
 field = responseTemplate|13|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|12|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 isFrozen = true
 number = 228
 returnType = assetTagList
   description = Gets all the out of band data for the given asset
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = assetId|,,Limits the search to an object with exactly the same value in this field.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = assetTagStore (NO)
 field = assetId|1|idLong:asset,1,1,low,,,,,,0
 field = assetTagPair|2|struct:assetTagPair,1,,low,,,,,,0
 field = version|3|int,1,1,low,,,,,,0
 isFrozen = true
 number = 229
 returnType = assetTag
   description = Stores a new or a modified assetTagobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.

********** operation = audioStreamChange (NO)
 field = audioStreamId|1|idInt:audioStream,1,1,,,,,,,0
 field = playerId|2|idInt:player,0,1,,,,,,,0
 number = 2085
 returnType = success
   description = Changes current audio stream of the content watched to one of the available audio streams that matches specified streamId.
   field = audioStreamId|,,The id of the audio stream to switch to.
   field = playerId|,,The player to change audio stream on. If unspecified, it will change the audio stream of the video currently on the output.

********** operation = autoCompleteSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = count|3|int,0,1,,1,,,1,,0
 field = format|4|enum:format,0,1,,,,,,,0
 field = groupBy|5|string,0,,,,,,,32,0
 field = levelOfDetail|6|enum:levelOfDetail,0,1,,,,,,,0
 field = nextLetterOnly|7|boolean,0,1,,,,,,,0
 field = note|8|string,0,,,,,,,,0
 field = offset|9|int,0,1,,0,,,,,0
 field = orderBy|10|string,0,,,,,,,32,0
 field = prefix|11|string,1,1,,,,,,,0
 field = removeField|12|string,0,,,,,2,,,0
 field = responseTemplate|14|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|13|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 number = 815
 orderBy = rank
 orderBy = word
 returnType = autoCompleteWordList
   description = search for suggested words that occur in titles of current collections
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = nextLetterOnly|,,given a prefix, return that prefix plus the next letter for any available suggested words. This is used to provide word completion hints in the UI as to which letters are available.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = prefix|,,prefix to search for
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = avLockRelease (NO)
 field = source|1|enum:avSource,1,1,,,,,,,0
 number = 1886
 returnType = success
   description = Releases the AV lock for the specified source. If the source does not currently hold the lock,  no action is taken.  If the source does hold the lock, then the lock is assigned to HDMI passthru. If the source is HDMI passthru, no action is taken. Follows the "Command" service pattern.
   field = source|,,The source which is releasing the lock

********** operation = avLockRequest (NO)
 field = source|1|enum:avSource,1,1,,,,,,,0
 number = 1887
 returnType = success
   description = Requests the AV lock to the specified source. This currently always succeeds, with the new source taking priority over the old source.  AppMgr kills any applications currently holding the lock. Follows the "Command" service pattern.
   field = source|,,The source which is requesting access to the lock

********** operation = backchannelPortGet (NO)
 number = 1888
 returnType = port
   description = Returns the port used for backchannel communications (mouse movement, window placement, etc.)

********** operation = backgroundTunerEventRegister (NO)
 number = 232
 returnType = backgroundTunerEvent
   description = Registers for tunerEvent events on the background tuner. After sending this action, a backgroundTunerEvent event will be received immediately to describe the current state of the background tuner, and additionally a tunerEvent event will be received whenever the play speed or channel changes on the background tuner. Included in the background tuner's state is the channel at the play/pause position, current position (of either play or pause), and current play speed (with 0 meaning paused).

********** operation = backhaulInstructionsGet (NO)
 field = anonToken|1|string,0,1,,,,,,,0
 field = bodyId|2|idBody:body,1,1,low,,,,,,0
 field = callId|3|string,1,1,low,,,,,,0
 field = postProcessingExtension|4|string,1,1,,,,,,,0
 field = requestToken|5|anyDict,0,1,low,,,,,,0
 field = softwareVersion|6|string,1,1,low,,,,,,0
 field = userInitiated|7|boolean,1,1,low,,,,,,0
 number = 1757
 returnType = backhaulInstructions
   description = This operation will return the information needed by the body to send/backhaul logs.
   field = anonToken|,,The token to be used in place of the personalized bodyId in logs. Should not be logged on the service, nor should it ever appear next to the personlized bodyId.
   field = callId|,,A session ID.  Historically, a session of a Service call is called a "call". Using "callId" here enables more straightforward correlation to the trackerDb. Typically, the client would send Unix time, in seconds. This same value should be used as the callId for the entire session, meaning the invocation of callInstructionsGet plus each of the subsequent invocations of sub-operations, if any.
   field = postProcessingExtension|,,The file extension used for post processing, i.e. ".gz"
   field = requestToken|,,Typically the "resultToken" of the previous *InstructionsGet response. If this is the first call, then this field is omitted. As an anyDict field, we have extensibility here.
   field = softwareVersion|,,The currently installed software version on the body. This field is mostly intended for informational logging and potentially identifying what software features are currently available to the client.
   field = userInitiated|,,Was this invocation initiated by explicit user action, rather than programmatically, based on callbackSeconds information? This is mainly informational.

********** operation = batchRequest (NO)
 field = bodyId|2|idBody:anyBody,0,1,,,,,,,0
 field = levelOfDetail|3|enum:levelOfDetail,0,1,low,,,,,,0
 field = request|1|knownDict,1,,,,,,,,0
 fieldGroup = levelOfDetailFields
 isFrozen = true
 number = 234
 returnType = batchResponse
   description = Asks the Mind to run a sequence of Operations in order. Returns a single batchResponse that contains responses. Responses will come back in the same order as their corresponding Requests. The whole Batch is not atomic; each Operation can succeed or fail independently of the others. Does not currently handle operations that require routing to multiple account clusters. All operations must have the same routing and must share the same bodyId value, including null, as the outer batchRequest.
   field = levelOfDetail|,,In a result from a Search operation from the mind, this field says what level of detail the mind produced for this object. The mind will always set this field when returning the result of a search.  It will not be set inside a syncPong, and you should not set it when sending things to the mind.
   field = request|,,Requests that make up a batchRequest
   fieldProject = levelOfDetail|0|0|0|all

********** operation = bestBetsItemSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = count|3|int,0,1,,1,,,1,,0
 field = format|4|enum:format,0,1,,,,,,,0
 field = groupBy|5|string,0,,,,,,,32,0
 field = hasImage|6|boolean,0,1,,,,,,,0
 field = levelOfDetail|7|enum:levelOfDetail,0,1,,,,,,,0
 field = note|8|string,0,,,,,,,,0
 field = offset|9|int,0,1,,0,,,,,0
 field = orderBy|10|string,0,,,,,,,32,0
 field = removeField|11|string,0,,,,,2,,,0
 field = responseTemplate|14|struct:responseTemplate,0,,,,,,,,0
 field = startDay|12|dateTime,0,1,,,,,,,0
 field = useAnchorOperation|13|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 isFrozen = true
 number = 238
 returnType = bestBetsItemList
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = hasImage|0|0|0|partner-schedule
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all
   fieldProject = startDay|0|0|0|partner-schedule
   project = bestBetsItemSearch|0|0|0|partner-schedule

********** operation = bluetoothDiscoveryEnable (NO)
 field = enable|1|boolean,1,1,low,,,,,,0
 number = 1689
 returnType = success
   description = The Bluetooth plugin starts up with device discovery disabled.  When the UI enters the setup screen, it must call this method to enable discovery. This is mainly used to allow our testers to use multiple devices in the lab at once.
   field = enable|,,Enables or disables the search for and connection to Bluetooth devices.

********** operation = bluetoothFT1DeviceGet (NO)
 field = device|1|enum:bluetoothDeviceType,1,1,,,,,,,0
 number = 1485
 returnType = bluetoothFT1Device
   description = Gets the FT1 Bluetooth device description for the indicated type of device.  This query can be marked monitoring, in which case the device is re-sent whenever one of its attributes changes.  If mutiple devices of a given type are in range and discoverable, one of them is picked randomly for connection and pairing attempts.
   field = device|,,The device type for which to get information

********** operation = bluetoothStatusGet (NO)
 number = 1691
 returnType = bluetoothStatus
   description = Returns the current status of the Bluetooth plugin. Used mainly for debugging.

********** operation = bluetoothUnpairAllDevices (NO)
 number = 1486
 returnType = success
   description = Disconnects any existing headset and keyboard connections, removes all pairing information, and resets Bluetooth to the searching state to find new connections.

********** operation = bluetoothUnpairDevice (NO)
 field = device|1|enum:bluetoothDeviceType,1,1,,,,,,,0
 number = 1692
 returnType = success
   description = Unpairs the specific device type.
   field = device|,,The device type to unpair.

********** operation = bodyAuthenticate (YES)
 field = credential|1|union:credential,1,1,,,,,,,0
 number = 1822
 returnType = bodyAuthenticateResponse
   description = this operation describes authenticate operation used by bodies that cannot provide or dont have certs for authentication
   field = credential|,,credentials specified for authentication eg: username/pwd,mak_id etc.

********** operation = bodyBackgroundProcess (NO)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 number = 240
 returnType = bodyBackgroundProcessResult
   description = Takes bodyId and calls following operations in listed order <ul> <li> suggestionGenerate (TiVo suggestions based on user thumbs ratings)  </li> <li> schedule (refer schedule operation for it's behavior and defaults) </li> </ul>  If any one of the operations throws an error, successive operations in call stack will not be attempted.

********** operation = bodyBackhaulInfoGet (NO)
 field = anonToken|1|string,0,1,,,,,,,0
 field = bodyId|2|idBody:anyBody,1,1,,,,,,,0
 field = postProcessingExtension|3|string,1,1,,,,,,,0
 field = softwareVersion|4|string,1,1,,,,,,,0
 isFrozen = true
 number = 905
 returnType = bodyBackhaulInfoList
   description = A request from a body for the information it needs to connect to a Backhaul server.
   field = anonToken|,,The token to be used in place of the personalized bodyId in logs. Should not be logged on the service, nor should it ever appear next to the personlized bodyId.
   field = postProcessingExtension|,,The file extension used for post processing, i.e. ".gz"
   field = softwareVersion|,,The software version of the body

********** operation = bodyCall (NO)
   description = Forwards the request to the named body, and returns the result that the body returns.  If the body is not currently connected, returns an error.
   field = bodyId|,,The request will be forwarded to this body.
   field = request|,,The request to forward

********** operation = bodyCandyBarControlsGet (NO)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 field = note|2|string,0,,,,,,,,0
 fieldGroup = noteFields
 number = 1524
 returnType = bodyCandyBarControls
   field = note|,,A request for the results to be annotated.

********** operation = bodyCandyBarControlsStore (NO)
 field = bodyCandyBarControl|1|struct:bodyCandyBarControl,0,,low,,,,,,0
 field = bodyId|2|idBody:body,1,1,low,,,,,,0
 isFrozen = true
 number = 1525
 returnType = bodyCandyBarControls
   description = Stores a new or a modified bodyCandyBarControlsobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.

********** operation = bodyCleanup (NO)
 field = bodyId|1|idBody:body,1,1,low,,,,,,0
 field = noOp|2|boolean,0,1,,false,,,,,0
 isFrozen = true
 number = 243
 returnType = bodyCleanupResult
   description = examine a body and remove it if necessary. a body will be cleaned up only if something is wrong with it, and it is older than the maxBodyAge. Conditions that are considered wrong: (1) the bodyConfig has a state of inactive, (2) the body is in the wrong cluster, (3) the body fails to anonymizer or personalize.
   field = bodyId|,,Limits the search to an object with exactly the same value in this field.
   field = noOp|,,if true, don't actually delete the body, but determine if it would have been deleted.

********** operation = bodyClusterDataRemove (NO)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 field = routingType|2|enum:routingType,1,1,,,,,,,0
 number = 1236
 returnType = success
   description = Removes a bodyClusterData object from the mind.

********** operation = bodyClusterDataSearch (NO)
 field = accountId|15
 field = addField|5|string,0,,,,,2,,,0
 field = anchor|6|anchorDict,0,1,,,,,,,0
 field = bodyId|1|idBody:body,0,1,,,,,,,0
 field = clusterId|2|int,0,1,,,,,,,0
 field = count|3|int,0,1,,1,,,1,,0
 field = customerId|16|long,0,1,,,,,,,0
 field = format|7|enum:format,0,1,,,,,,,0
 field = groupBy|8|string,0,,,,,,,32,0
 field = includeBodiesFromAccount|14
 field = levelOfDetail|9|enum:levelOfDetail,0,1,,,,,,,0
 field = note|10|string,0,,,,,,,,0
 field = offset|4|int,0,1,,0,,,,,0
 field = orderBy|11|string,0,,,,,,,32,0
 field = removeField|12|string,0,,,,,2,,,0
 field = responseTemplate|18|struct:responseTemplate,0,,,,,,,,0
 field = routingType|17
 field = useAnchorOperation|13|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 groupBy = customerId
 number = 1237
 returnType = bodyClusterDataList
   description = Given a clusterId, count, offset, returns bodyClusterDataList Given a bodyId returns a bodyClusterData.
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = bodyClusterDataStore (NO)
 field = accountId|5
 field = bodyId|1|idBody:body,0,1,low,,,,,,0
 field = clusterId|2|int,0,1,low,,,,,,0
 field = customerId|6|long,0,1,low,,,7,,,0
 field = readOnly|4|boolean,0,1,low,,,,,,0
 field = routingId|8|long,0,1,low,,,,,,0
 field = routingType|7|enum:routingType,0,1,low,,,7,,,0
 field = state|3
 number = 1238
 returnType = bodyClusterData
   description = Stores a new or a modified bodyClusterDataobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = bodyId|,,BodyClusterDataStore: Given a bodyClusterData, stores it. BodyClusterDataRemove: Given a bodyClusterData, removes it.
   field = clusterId|,,clusterId associated with this bodyId.
   field = customerId|,7,CustomerId of this body
   field = readOnly|,,Is Body currently read only or read write?
   field = routingId|,,routingId associated with this bodyId.

********** operation = bodyConfigSearch (YES)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = bodyId|3|idBody:body,1,1,,,,5,,,0|idBody:body,0,1,,,6,,,,0
 field = bucketNumber|4|int,0,1,,,,,,,0
 field = count|5|int,0,1,,1,,,1,,0
 field = format|6|enum:format,0,1,,,,,,,0
 field = groupBy|7|string,0,,,,,,,32,0
 field = levelOfDetail|8|enum:levelOfDetail,0,1,,,,,,,0
 field = noLimit|9|boolean,0,1,,,,,,,0
 field = note|10|string,0,,,,,,,,0
 field = offset|11|int,0,1,,0,,,,,0
 field = orderBy|12|string,0,,,,,,,32,0
 field = removeField|13|string,0,,,,,2,,,0
 field = responseTemplate|15|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|14|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 isFrozen = true
 number = 246
 returnType = bodyConfigList
   description = Finds a body with the given id.  Searches without a bodyId specified are not supported.
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = bucketNumber|,,Limits the search to an object with exactly the same value in this field.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = bodyConfigStore (NO)
 field = bodyId|1|idBody:body,1,1,low,,,,,,0
 field = bodyName|19|string,0,1,medium,,5,,,80,0
 field = bucketNumber|2|int,0,1,low,,,,,,0
 field = capabilities|17|struct:bodyCapabilities,0,1,low,,5,,,,0
 field = channelMapId|3|int,0,1,low,,5,,,,0
 field = controllerId|4|int,0,1,low,,5,,,,0
 field = createDate|5|dateTime,0,1,medium,,,,,,0
 field = hasScheduler|6|boolean,0,1,low,true,,,,,0
 field = headendId|30|string,0,1,low,,,,,48,0
 field = localTimeOffset|26|struct:localTimeOffset,0,,low,,8,,,,0
 field = msoLabel|22|string,0,1,low,,,,,32,0
 field = msoNetworkId|27|long,0,1,low,,8,,,,0
 field = msoPartnerId|23|idInt:partner,0,1,low,,7,,,,0
 field = networkInterface|25|struct:networkInterface,0,,medium,,9,,,,0
 field = observesDaylightSaving|7|boolean,0,1,low,,,,,,0
 field = parentalControlsState|20|enum:parentalControlsState,0,1,low,,,,,,0
 field = partnerConfigurationGroup|31|string,0,1,low,,,,,20,0
 field = pgdEndTime|8|dateTime,0,1,medium,,6,,,,0
 field = providerBillingId|29|struct:providerBillingIdentifier,0,,low,,,,,,0
 field = providerBodyId|28
 field = randomId|9|int,0,1,low,,,,,,0
 field = recordingSettings|18|struct:recordingSettings,0,1,low,,5,,,,0
 field = secondsFromGmt|10|int,0,1,low,,,,-86400,86400,0
 field = softwareVersion|11|string,0,1,low,,,,,100,0
 field = state|16|enum:bodyState,0,1,low,active,,,,,0
 field = supportedEncodingType|12|enum:encodingType,0,,medium,,6,,,,0
 field = supportedTransportType|24|enum:offerTransportType,0,,medium,,7,,,,0
 field = updateDate|13|dateTime,0,1,medium,,,,,,0
 field = userDiskSize|14|long,0,1,low,,,,0,,0
 field = userDiskUsed|21|long,0,1,low,,,,0,,0
 field = vodLocality|15|string,0,1,low,,5,,,32,0
 fieldGroup = bodyConfigFields
 isFrozen = true
 number = 247
 returnType = bodyConfig
   field = bodyId|,,The globally unique ID for this body.
   field = bodyName|5,,Name given by user for a given set top box
   field = bucketNumber|,,bucketNumber for this body
   field = capabilities|5,,list of capabilities supported by the body
   field = channelMapId|5,,An integer identifying the channel map (the complete list of channels)  used by this body.
   field = controllerId|5,,An integer identifying the cable head-end used by this body.
   field = createDate|,,the createDate for the body
   field = hasScheduler|,,True for bodies that have a scheduler.  These bodies get candidates from the mind, but no recording.
   field = headendId|,,Identifies a cable headend.  This may be of the form controllerId_plantId. This field could obsolete controllerId and channelMapId (which sometimes could be used as a stand-in for plantId) fields.
   field = localTimeOffset|8,,list of daylight savings periods the body observes
   field = msoLabel|,,The MSO string used in MFS name patterns e.g. "rcn" or "cableco" or undefined/empty for TiVo retail.
   field = msoNetworkId|8,,MSO's DVB network ID.
   field = msoPartnerId|7,,MSO partner's partnerId.
   field = networkInterface|9,,Network interfaces available on the body.
   field = observesDaylightSaving|,,Does this body observe daylight savings?
   field = partnerConfigurationGroup|,,Pertinent when this body is associated with an MSO partner, this associates the body to a configuration group of the MSO partner.  (NOTE: This is different than service groups, and is related to the partnerConfigurationGroup object.)
   field = pgdEndTime|6,,the date and time of the last showing in pgd on this body in GMT
   field = providerBillingId|,,The provider billing ID for this body.
   field = randomId|,,A random ID assigned to this body to help track anonymous ID changes
   field = recordingSettings|5,,Recording settings to store about the body
   field = secondsFromGmt|,,Number of seconds offset from GMT.  Add this to the GMT time to get local time.  (Note that this offset does not include any offset due to daylight saving.)
   field = softwareVersion|,,The name of the software version that this body is running.
   field = state|,,State of this body. Currently states are active and inactive.
   field = supportedEncodingType|6,,the list of encoding types that this body supports
   field = supportedTransportType|7,,the list of transport types that this body supports
   field = updateDate|,,the updateDate for the body
   field = userDiskSize|,,Disk size of the partition for user recordings, in kilobytes
   field = userDiskUsed|,,Space used for user recordings, in kilobytes
   field = vodLocality|5,,The VOD locality string for this body, used to define the set of VOD assets associated with this body.

********** operation = bodyCount (NO)
   description = bodyCount pseudo-op. response

********** operation = bodyDataRestoreCleanUp (NO)
 isFrozen = true
 number = 1916
 returnType = success
   description = Deletes the expired/completed bodyDataRestore jobs.This operation is intended to be used by job scheduling systems, such as Quartz,and is not intended to be called by external clients

********** operation = bodyDataRestoreProcess (NO)
 isFrozen = true
 number = 1918
 returnType = success
   description = Migrates data from old body to new body. This operation is intended to be used by job scheduling systems, such as Quartz, and is not intended to be called by external clients.

********** operation = bodyDataRestoreRemove (NO)
 field = bodyDataRestoreId|1|idInt:bodyDataRestore,1,1,,,,,,,0
 field = bodyId|2|idBody:body,1,1,,,,,,,0
 isFrozen = true
 number = 1919
 returnType = success
   description = Removes a bodyDataRestore object from the mind.

********** operation = bodyDataRestoreSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = bodyDataRestoreId|3|int,0,1,,,,,,,0
 field = bodyId|4|idBody:body,0,1,,,,,,,0
 field = count|5|int,0,1,,1,,,1,,0
 field = format|6|enum:format,0,1,,,,,,,0
 field = groupBy|7|string,0,,,,,,,32,0
 field = levelOfDetail|8|enum:levelOfDetail,0,1,,,,,,,0
 field = note|9|string,0,,,,,,,,0
 field = offset|10|int,0,1,,0,,,,,0
 field = orderBy|11|string,0,,,,,,,32,0
 field = removeField|12|string,0,,,,,2,,,0
 field = responseTemplate|13|struct:responseTemplate,0,,,,,,,,0
 field = searchAllClusters|16|boolean,0,1,,,,,,,0
 field = status|14|enum:bodyDataRestoreStatus,0,1,,,,,,,0
 field = useAnchorOperation|15|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 isFrozen = true
 number = 1920
 returnType = bodyDataRestoreList
   description = Search the Requests raised for transfer of per body data from Old body to new body
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = bodyDataRestoreStore (NO)
 field = bodyDataRestoreId|1|idInt:bodyDataRestore,0,1,low,,,,,,0
 field = bodyId|2|idBody:body,1,1,low,,,,,,0
 field = error|3|enum:bodyDataRestoreError,0,1,low,,,,,,0
 field = oldBodyId|4|idBody:body,1,1,low,,,,,,0
 field = searchAllClusters|6|boolean,0,1,low,,,,,,0
 field = status|5|enum:bodyDataRestoreStatus,0,1,low,,,,,,0
 isFrozen = true
 number = 1921
 returnType = bodyDataRestore
   description = Stores a new or a modified bodyDataRestoreobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = bodyDataRestoreId|,,Unique identifier for the body data restore request
   field = bodyId|,,Body Id of the new Replaced STB
   field = error|,,Error which mght occur during the transfer of data from old Body to the new Body
   field = oldBodyId|,,Body Id of the STB that is replaced
   field = searchAllClusters|,,Flag that indicates if all clusters need to be searched
   field = status|,,Job status

********** operation = bodyInfoSearch (NO)
 field = accountToken|1|idBase64:accountToken,1,1,,,,,,,0
 field = anonId|2|string,0,1,low,,,,,,0
 field = noLimit|3|string,1,1,,,,,,,0
 field = partnerId|4|idInt:partner,0,1,low,,,,,,0
 isFrozen = true
 number = 253
 returnType = bodyInfoList
   description = Request for the bodyInfoList. You must specify the: accountToken
   fieldProject = accountToken|0|0|0|partner-schedule
   fieldProject = anonId|0|0|0|partner-schedule
   fieldProject = noLimit|0|0|0|partner-schedule
   fieldProject = partnerId|0|0|0|partner-schedule
   project = bodyInfoSearch|0|0|0|partner-schedule

********** operation = bodyKeyValueRemove (NO)
 field = bodyId|1|string,1,1,,,,,,,0
 field = key|2|string,0,1,low,,,,,,0
 field = removeExpiredOnly|3|boolean,0,1,low,false,,,,,0
 field = removeOverride|5|boolean,0,1,,,,,,,0
 field = useOverride|4
 number = 1444
 returnType = success
   description = 
   field = bodyId|,,Any 15 character bodyId with a tsn: prefix.
   field = key|,,Removes the key in the parameter. If none given, all keys are deleted in the override table, regular table, or both. See useOverride for more instructions.
   field = removeExpiredOnly|,,Only removes keys that have expired. If combined with a key, it will only remove that key when it's expired.
   field = removeOverride|,,If removeOverride is true, delete will remove override keys only. If removeOverride is false, normal keys will be deleted, if any. If removeOverride is null (default case), both override and normal keys are deleted.

********** operation = bodyKeyValueSearch (NO)
 field = bodyId|1|string,1,1,,,,,,,0
 field = key|2|string,1,,,,,,,255,0
 field = useOverride|3|boolean,0,1,,,,,,,0
 number = 1267
 returnType = bodyKeyValue
   description = This operation searches bodyKeyValue or bodyKeyValueOverride table or both, depending on the flag useOverride.
   field = bodyId|,,Any 15 character bodyId with a tsn: prefix.
   field = key|,,
   field = useOverride|,,If useOverride is true, search will return override keys if they exist, or return normal keys. If useOverride is false no override keys are returned. If useOverride is null (default case), both override and normal keys are returned.

********** operation = bodyKeyValueStore (NO)
 field = bodyId|1|string,1,1,low,,,,,,0
 field = comment|8|string,0,1,low,,,,,,0
 field = expire|2|dateTime,0,1,low,,,,,,0
 field = isOverride|3|boolean,0,1,low,false,,,,,0
 field = key|4|string,1,1,low,,,,1,255,0
 field = modificationDate|6|dateTime,0,1,low,,,,,,0
 field = note|7
 field = value|5|string,1,1,low,,,,,,0
 number = 1269
 returnType = bodyKeyValue
   description = Stores a new or a modified bodyKeyValueobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = bodyId|,,Any 15 character bodyId with a tsn: prefix.
   field = comment|,,A comment to associate with this key. This only applies to overridden keys. On normal keys,  this field will be ignored.

********** operation = bodyKeyValueUpdate (NO)
 field = bodyId|1|string,1,1,,,,,,,0
 field = key|2|string,1,1,low,,,,1,255,0
 field = modificationDate|3|dateTime,1,1,low,,,,,,0
 field = value|4|string,1,1,low,,,,,,0
 number = 1308
 returnType = success
   description = This operation is similar to bodyKeyValueStore except it only stores if the modification time is newer than the value in the database. This update only works on regular bodyKeyValues, and not override keys. The return value is the stored bodyKeyValue or the original bodyKeyValue stored in the db. The difference will be reflected in the modificationDate.
   field = bodyId|,,Any 15 character bodyId with a tsn: prefix.

********** operation = bodyMiddlemindInfoGet (NO)
 field = bodyId|1|idBody:anyBody,1,1,,,,,,,0
 number = 1838
 returnType = bodyMiddlemindInfo
   description = A request from a body for the information it needs to connect to the MiddleMind. Lookup trio.bodyMiddlemindInfo first; if data exists, then return it. Otherwise return the "regular" middlemind server/port defined in dynvar.

********** operation = bodyMiddlemindInfoStore (NO)
 field = port|1|int,1,1,,,,,,,0
 field = server|2|string,1,1,,,,,,255,0
 field = targetBodyId|3|idBody:anyBody,1,1,,,,,,,0
 number = 2010
 returnType = success
   description = Store bodyId to middlemind IP/Port mapping. This operation is intended for test TCDs only
   field = port|,,Limits the search to an object with exactly the same value in this field.
   field = server|,,Limits the search to an object with exactly the same value in this field.

********** operation = bodyNotificationSend (NO)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 field = description|2|string,0,1,low,,,,,1000,0
 field = notification|3|union:notification,1,1,,,,,,,0
 number = 1855
 returnType = success
   description = Send a notification to a Neo device.
   field = bodyId|,,The body to send the notification to.
   field = description|,,The text description of the notification to be displayed when the underlying notification type is not known.
   field = notification|,,The Notification to be sent to the Body.

********** operation = bodyOfferCleanup (NO)
 field = bodyId|1|idBody:body,1,1,low,,,,,,0
 field = maxUpdateDate|2|dateTime,0,1,,,,,,,0
 isFrozen = true
 number = 775
 returnType = success
   description = Cleanup crufty bodyOffers for a body
   field = bodyId|,,the bodyId for which bodyOffers should be cleaned up
   field = maxUpdateDate|,,everything cleaned up must be older than this date. default is 2 days ago.

********** operation = bodyOfferModify (NO)
 field = bodyId|1|idBody:body,1,1,low,,,,,,0
 field = bodyOfferId|2|idInt:bodyOffer,0,1,,,,,,,0
 field = cancellationReason|3|enum:cancellationReason,0,1,medium,,,,,,0
 field = createDate|4|dateTime,0,1,medium,,,,,,0
 field = description|5|string,0,1,medium,,,,,4096,0
 field = duration|6|int,0,1,low,,,,0,,0
 field = encodingType|7|enum:encodingType,0,1,low,,,,,,0
 field = httpAuth|8|string,0,1,low,,,,,150,0
 field = offerId|9|idString:offer,0,1,low,,,,,,0
 field = originUrl|23|url,0,1,low,,,,,4096,0
 field = partnerId|10|idInt:partner,1,1,low,,,,,,0
 field = pcBodyId|11|idBody:pcBody,0,1,low,,,,,,0
 field = publishDate|12|dateTime,0,1,low,,,,,,0
 field = size|13|long,0,1,low,,,,0,,0
 field = source|14|string,1,1,low,,,,,4096,0
 field = sourceOfferId|15|idString:offer,0,1,low,,,,,,0
 field = state|16|enum:recordingBodyState,1,1,low,,,,,,0
 field = subscriptionId|17|idInt:subscription,0,1,low,,,,,,0
 field = subtitle|18|string,0,1,low,,,,,255,0
 field = title|19|string,1,1,low,,,,,128,0
 field = tvRating|20|enum:tvRating,0,1,low,,,,,,0
 field = updateDate|21|dateTime,0,1,medium,,,,,,0
 field = url|22|url,1,1,low,,,,,4096,0
 fieldGroup = bodyOfferFields
 isFrozen = true
 number = 871
 returnType = bodyOffer
   description = Create or update a bodyOffer, with desireable side effects. use this instead of bodyOfferStore.
   field = bodyOfferId|,,The bodyOfferId that was previously assigned by the mind. Omit this field if creating a new bodyOffer.
   field = cancellationReason|,,must be populated if state=cancelled.
   field = description|,,A description of the bodyOffer.
   field = duration|,,The duration of the content (in seconds). must be specified if state is complete
   field = encodingType|,,How the bodyOffer is encoded. must be specified if state is complete.
   field = httpAuth|,,login authorization info (user:pass)
   field = offerId|,,the offerId can be used to lookup the bodyOffer as an offer. It is autogenerated, and ignored in input.
   field = originUrl|,,The original location of the bodyOffer. Used when the location of the transcoded bodyOffer differs from the original location.
   field = partnerId|,,The Partner Id for the bodyOffer
   field = publishDate|,,the date the bodyOffer was published. defaults to current date.
   field = size|,,Size of the bodyOffer in bytes. must be specified if state is complete
   field = source|,,source of the bodyOffer, i.e. the url of the rss feed. used for folderization by feed.
   field = sourceOfferId|,,an authored offer that this bodyOffer derives from.
   field = state|,,is the bodyOffer ready to be subscribed to?
   field = subscriptionId|,,id of the subscription for which this bodyOffer was created
   field = subtitle|,,The episode title of the bodyOffer, to distinguish between mutliple bodyOffers from the same source.
   field = title|,,The main title of the bodyOffer. Multiple bodyOffers from the same source share the same title.
   field = tvRating|,,The tvRating for the bodyOffer.
   field = url|,,Location of the bodyOffer

********** operation = bodyOfferRemove (NO)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 field = bodyOfferId|2|idInt:bodyOffer,1,1,,,,,,,0
 isFrozen = true
 number = 769
 returnType = success
   description = Removes a bodyOffer object from the mind.

********** operation = bodyOfferSchedule (NO)
 field = bodyId|1|idBody:body,0,1,,,,,,,0
 field = pcBodyId|2|idBody:pcBody,0,1,,,,,,,0
 isFrozen = true
 number = 859
 returnType = bodyOfferList
   description = determine what scheduled bodyOffers exist for a pcBody or body.
   field = bodyId|,,Limits the search to an object with exactly the same value in this field.
   field = pcBodyId|,,Limits the search to an object with exactly the same value in this field.

********** operation = bodyOfferSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = bodyId|3|idBody:body,0,1,,,,,,,0
 field = bodyOfferId|4|idInt:bodyOffer,0,1,,,,,,,0
 field = count|5|int,0,1,,1,,,1,,0
 field = format|6|enum:format,0,1,,,,,,,0
 field = groupBy|7|string,0,,,,,,,32,0
 field = levelOfDetail|8|enum:levelOfDetail,0,1,,,,,,,0
 field = noLimit|9|boolean,0,1,,,,,,,0
 field = note|10|string,0,,,,,,,,0
 field = offset|11|int,0,1,,0,,,,,0
 field = orderBy|12|string,0,,,,,,,32,0
 field = originUrl|25|url,0,1,,,,,,4096,0
 field = pcBodyId|13|idBody:pcBody,0,1,,,,,,,0
 field = removeField|14|string,0,,,,,2,,,0
 field = responseTemplate|26|struct:responseTemplate,0,,,,,,,,0
 field = source|15|string,0,1,,,,,,4096,0
 field = sourceOfferId|16|idString:offer,0,1,,,,,,,0
 field = state|17|enum:recordingBodyState,0,1,,,,,,,0
 field = subscriptionId|18|idInt:subscription,0,1,,,,,,,0
 field = subtitle|19|string,0,1,,,,,,255,0
 field = subtitlePrefix|20|string,0,1,,,,,,255,0
 field = title|21|string,0,1,,,,,,128,0
 field = titlePrefix|22|string,0,1,,,,,,128,0
 field = url|23|url,0,1,,,,,,4096,0
 field = useAnchorOperation|24|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 isFrozen = true
 number = 770
 orderBy = bodyOfferId
 orderBy = source
 orderBy = subtitle
 orderBy = title
 returnType = bodyOfferList
   description = Search for a body offer by title, subtitle, source, url or id.
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = bodyId|,,Limits the search to an object with exactly the same value in this field.
   field = bodyOfferId|,,Limits the search to an object with exactly the same value in this field.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = noLimit|,,Do not limit this search to a given count.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = originUrl|,,Limits the search to an object with exactly the same value in this field.
   field = pcBodyId|,,Limits the search to an object with exactly the same value in this field.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = source|,,Limits the search to an object with exactly the same value in this field.
   field = sourceOfferId|,,Limits the search to an object with exactly the same value in this field.
   field = state|,,Limits the search to an object with exactly the same value in this field.
   field = subscriptionId|,,Limits the search to an object with exactly the same value in this field.
   field = subtitle|,,Limits the search to an object with exactly the same value in this field.
   field = title|,,Limits the search to an object with exactly the same value in this field.
   field = url|,,Limits the search to an object with exactly the same value in this field.
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = bodyOfferStore (NO)
 field = bodyId|1|idBody:body,1,1,low,,,,,,0
 field = bodyOfferId|2|idInt:bodyOffer,0,1,low,,,,,,0
 field = cancellationReason|3|enum:cancellationReason,0,1,medium,,,,,,0
 field = description|4|string,0,1,medium,,,,,4096,0
 field = duration|5|int,0,1,low,,,,0,,0
 field = encodingType|6|enum:encodingType,0,1,low,,,,,,0
 field = httpAuth|7|string,0,1,low,,,,,150,0
 field = offerId|8|idString:offer,0,1,low,,,7,,,0
 field = originUrl|21|url,0,1,low,,,,,4096,0
 field = partnerId|9|idInt:partner,1,1,low,,,,,,0
 field = pcBodyId|10|idBody:pcBody,0,1,low,,,,,,0
 field = publishDate|11|dateTime,0,1,low,,,,,,0
 field = size|12|long,0,1,low,,,,0,,0
 field = source|13|string,1,1,low,,,,,4096,0
 field = sourceOfferId|14|idString:offer,0,1,low,,,,,,0
 field = state|15|enum:recordingBodyState,1,1,low,,,,,,0
 field = subscriptionId|16|idInt:subscription,0,1,low,,,,,,0
 field = subtitle|17|string,0,1,low,,,,,255,0
 field = title|18|string,1,1,low,,,,,128,0
 field = tvRating|19|enum:tvRating,0,1,low,,,,,,0
 field = url|20|url,1,1,low,,,,,4096,0
 isFrozen = true
 number = 771
 returnType = bodyOffer
   description = Stores a new or a modified bodyOfferobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = cancellationReason|,,must be populated if state=cancelled.
   field = description|,,A description of the bodyOffer.
   field = duration|,,The duration of the content (in seconds). must be specified if state is complete
   field = encodingType|,,How the bodyOffer is encoded. must be specified if state is complete.
   field = httpAuth|,,login authorization info (user:pass)
   field = offerId|,7,the offerId can be used to lookup the bodyOffer as an offer. It is autogenerated, and ignored in input.
   field = originUrl|,,The original location of the bodyOffer. Used when the location of the transcoded bodyOffer differs from the original location.
   field = partnerId|,,The Partner Id for the bodyOffer
   field = publishDate|,,the date the bodyOffer was published. defaults to current date.
   field = size|,,Size of the bodyOffer in bytes. must be specified if state is complete
   field = source|,,source of the bodyOffer, i.e. the url of the rss feed. used for folderization by feed.
   field = sourceOfferId|,,an authored offer that this bodyOffer derives from.
   field = state|,,is the bodyOffer ready to be subscribed to?
   field = subscriptionId|,,id of the subscription for which this bodyOffer was created
   field = subtitle|,,The episode title of the bodyOffer, to distinguish between mutliple bodyOffers from the same source.
   field = title|,,The main title of the bodyOffer. Multiple bodyOffers from the same source share the same title.
   field = tvRating|,,The tvRating for the bodyOffer.
   field = url|,,Location of the bodyOffer

********** operation = bodyPartnerAccountIdRemove (NO)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 field = partnerId|2|idInt:partner,0,1,,,,,,,0
 isFrozen = true
 number = 258
 returnType = success
   description = Remove a bodyPartnerAccountId mapping entry
   field = bodyId|,,Limits the search to an object with exactly the same value in this field.
   field = partnerId|,,Limits the search to an object with exactly the same value in this field.

********** operation = bodyPartnerAccountIdSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = bodyId|3|idBody:body,0,1,,,,,,,0
 field = count|4|int,0,1,,1,,,1,,0
 field = format|5|enum:format,0,1,,,,,,,0
 field = groupBy|6|string,0,,,,,,,32,0
 field = levelOfDetail|7|enum:levelOfDetail,0,1,,,,,,,0
 field = note|8|string,0,,,,,,,,0
 field = offset|9|int,0,1,,0,,,,,0
 field = orderBy|10|string,0,,,,,,,32,0
 field = partnerAccountId|11|string,0,1,,,,,,100,0
 field = partnerId|12|idInt:partner,0,1,,,,,,,0
 field = removeField|13|string,0,,,,,2,,,0
 field = responseTemplate|15|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|14|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 isFrozen = true
 number = 259
 returnType = bodyPartnerAccountIdList
   description = Return the partnerAccountId/partnerId associated with a given bodyId or vice versa
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = bodyId|,,Limits the search to an object with exactly the same value in this field.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = partnerAccountId|,,Limits the search to an object with exactly the same value in this field.
   field = partnerId|,,Limits the search to an object with exactly the same value in this field.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = bodyPartnerAccountIdStore (NO)
 field = bodyId|1|idBody:body,1,1,low,,,,,,0
 field = partnerAccountId|2|string,1,1,low,,,,,100,0
 field = partnerId|3|idInt:partner,1,1,low,,,,,,0
 isFrozen = true
 number = 260
 returnType = bodyPartnerAccountId
   description = Stores a new or a modified bodyPartnerAccountIdobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.

********** operation = bodyPartnerOfferCleanup (NO)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 field = maxUpdateDate|2|dateTime,0,1,,,,,,,0
 isFrozen = true
 number = 262
 returnType = success
   description = Remove finished bodyPartnerOffers
   field = bodyId|,,Id of the body whose partnerOffers to clean up
   field = maxUpdateDate|,,everything cleaned up must be older than this date. default is 2 days ago.

********** operation = bodyPartnerOfferRemove (NO)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 field = offerId|2|idString:offer,1,1,,,,,,,0
 field = partnerId|3|idInt:partner,0,1,,,,,,,0
 isFrozen = true
 number = 264
 returnType = success
   description = Remove a bodyPartnerOffer
   field = bodyId|,,Limits the search to an object with exactly the same value in this field.
   field = offerId|,,Limits the search to an object with exactly the same value in this field.
   field = partnerId|,,Limits the search to an object with exactly the same value in this field.

********** operation = bodyPartnerOfferSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = bodyId|3|idBody:body,1,1,,,,,,,0
 field = count|4|int,0,1,,1,,,1,,0
 field = format|5|enum:format,0,1,,,,,,,0
 field = groupBy|6|string,0,,,,,,,32,0
 field = levelOfDetail|7|enum:levelOfDetail,0,1,,,,,,,0
 field = noLimit|8|boolean,0,1,,,,,,,0
 field = note|9|string,0,,,,,,,,0
 field = offerId|10|idString:offer,0,1,,,,,,,0
 field = offset|11|int,0,1,,0,,,,,0
 field = orderBy|12|string,0,,,,,,,32,0
 field = partnerId|13|idInt:partner,0,1,,,,,,,0
 field = partnerTransactionId|16|long,0,1,,,,,0,,0
 field = removeField|14|string,0,,,,,2,,,0
 field = responseTemplate|17|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|15|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 isFrozen = true
 number = 265
 orderBy = offerId
 orderBy = updateDate
 returnType = bodyPartnerOfferList
   description = Search for a bodyPartnerOffer
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = bodyId|,,Limits the search to an object with exactly the same value in this field.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offerId|,,Limits the search to an object with exactly the same value in this field.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = partnerId|,,Limits the search to an object with exactly the same value in this field.
   field = partnerTransactionId|,,Limits the search to an object with exactly the same value in this field.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = bodyPartnerOfferStore (NO)
 field = bodyId|1|idBody:body,1,1,low,,,,,,0
 field = offerId|2|idString:offer,0,1,low,,,,,,0
 field = partnerId|3|idInt:partner,0,1,low,,,,,,0
 field = partnerTransactionId|4|long,0,1,low,,,,0,,0
 isFrozen = true
 number = 266
 returnType = bodyPartnerOffer
   description = Stores a new or a modified bodyPartnerOfferobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = bodyId|,,Id of the body associated with this offer.
   field = offerId|,,Id of the offer.
   field = partnerId|,,Id of the partner associated with this offer.

********** operation = bodyRemove (NO)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 isFrozen = true
 number = 267
 returnType = success
   description = Removes a body object from the mind.

********** operation = bodyRssFeedRemove (NO)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 field = bodyRssFeedId|2|idInt:bodyRssFeed,0,1,,,,,,,0
 field = url|3|url,0,1,,,,,1,4096,0
 isFrozen = true
 number = 1246
 returnType = success
   description = Per-body RSS feed remove
   field = bodyId|,,Limits the search to an object with exactly the same value in this field.
   field = bodyRssFeedId|,,Limits the search to an object with exactly the same value in this field.
   field = url|,,Limits the search to an object with exactly the same value in this field.

********** operation = bodyRssFeedSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = bodyId|3|idBody:body,1,1,,,,,,,0
 field = bodyRssFeedId|4|idInt:bodyRssFeed,0,1,,,,,,,0
 field = count|5|int,0,1,,1,,,1,,0
 field = format|6|enum:format,0,1,,,,,,,0
 field = groupBy|7|string,0,,,,,,,32,0
 field = levelOfDetail|8|enum:levelOfDetail,0,1,,,,,,,0
 field = note|9|string,0,,,,,,,,0
 field = offset|10|int,0,1,,0,,,,,0
 field = orderBy|11|string,0,,,,,,,32,0
 field = removeField|12|string,0,,,,,2,,,0
 field = responseTemplate|17|struct:responseTemplate,0,,,,,,,,0
 field = title|13|string,0,1,,,,,1,128,0
 field = updateDate|14
 field = url|15|url,0,1,,,,,1,4096,0
 field = useAnchorOperation|16|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 isFrozen = true
 number = 1247
 orderBy = title
 orderBy = url
 returnType = bodyRssFeedList
   description = Per-body RSS feed search
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = bodyId|,,Limits the search to an object with exactly the same value in this field.
   field = bodyRssFeedId|,,Limits the search to an object with exactly the same value in this field.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = title|,,Limits the search to an object with exactly the same value in this field.
   field = url|,,Limits the search to an object with exactly the same value in this field.
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = bodyRssFeedStore (NO)
 field = bodyId|1|idBody:body,1,1,low,,,,,,0
 field = bodyRssFeedId|2|idInt:bodyRssFeed,0,1,low,,,,,,0
 field = title|3|string,1,1,low,,,,1,128,0
 field = updateDate|4
 field = url|5|url,1,1,low,,,,1,4096,0
 isFrozen = true
 number = 1248
 returnType = bodyRssFeed
   description = Stores a new or a modified bodyRssFeedobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = bodyId|,,the bodyId for the item to be downloaded
   field = bodyRssFeedId|,,the perBody unique id in the database table

********** operation = bodySearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = bodyId|3|idBody:body,1,1,,,,,,,0
 field = count|4|int,0,1,,1,,,1,,0
 field = format|5|enum:format,0,1,,,,,,,0
 field = groupBy|6|string,0,,,,,,,32,0
 field = levelOfDetail|7|enum:levelOfDetail,0,1,,,,,,,0
 field = note|8|string,0,,,,,,,,0
 field = offset|9|int,0,1,,0,,,,,0
 field = orderBy|10|string,0,,,,,,,32,0
 field = removeField|11|string,0,,,,,2,,,0
 field = responseTemplate|13|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|12|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 isFrozen = true
 number = 269
 returnType = bodyList
   description = Finds a body with the given id.  Searches without a bodyId specified are not supported. this does an internal appBodyDataSearch, which is a RW operation, so it can't be RO.
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = bodyId|,,Limits the search to an object with exactly the same value in this field.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = bodyStore (NO)
 field = adBodyConfiguration|1|struct:adBodyConfiguration,0,1,low,,6,,,,0
 field = adInterest|2|struct:adInterest,0,,low,,6,,,,0
 field = appBodyData|3|struct:appBodyData,0,,low,,6,,,,0
 field = bodyCandyBarControls|38|struct:bodyCandyBarControls,0,1,low,,6,,,,0
 field = bodyConfig|4|struct:bodyConfig,0,1,low,,6,,,,0
 field = bodyId|5|idBody:body,1,1,low,,,,,,0
 field = bodyOffer|6|struct:bodyOffer,0,,low,,6,,,,0
 field = bodyPartnerAccountId|7|struct:bodyPartnerAccountId,0,,low,,6,,,,0
 field = bodyPartnerOffer|8|struct:bodyPartnerOffer,0,,low,,6,,,,0
 field = bodyRssFeed|36|struct:bodyRssFeed,0,,low,,7,,,,0
 field = bodyThumbs|37|struct:bodyThumbs,0,,low,,6,,,,0
 field = bucketNumber|9|int,0,1,low,,,5,-1,4095,0
 field = candidate|10|struct:candidate,0,,low,,6,,,,0
 field = capabilities|26|struct:bodyCapabilities,0,1,low,,2,5,,,0
 field = channel|11|struct:channel,0,,low,,6,,,,0
 field = channelMapId|12|int,0,1,low,,5,5,,,0
 field = controllerId|13|int,0,1,low,,5,5,,,0
 field = download|14|struct:download,0,,low,,6,,,,0
 field = hasScheduler|15|boolean,0,1,low,true,,5,,,0
 field = message|30|struct:message,0,,low,,6,,,,0
 field = noReRecord|31|struct:noReRecord,0,,low,,6,,,,0
 field = observesDaylightSaving|16|boolean,0,1,low,,,5,,,0
 field = partnerAccountInfo|28|struct:partnerAccountInfo,0,,low,,6,,,,0
 field = predictiveThumbs|32|struct:predictiveThumbs,0,,low,,6,,,,0
 field = randomId|17|int,0,1,low,,,5,,,0
 field = recording|29|struct:recording,0,,low,,6,,,,0
 field = recordingAction|33|struct:recordingActionInternal,0,,low,,6,,,,0
 field = recordingSettings|27|struct:recordingSettings,0,1,low,,2,5,,,0
 field = schedulerRun|34|struct:schedulerRun,0,,low,,6,,,,0
 field = secondsFromGmt|18|int,0,1,low,,,5,-86400,86400,0
 field = softwareVersion|19|string,0,1,low,,,5,,100,0
 field = subscription|20|struct:subscription,0,,low,,6,,,,0
 field = syncDeltaInternal|21|struct:syncDeltaInternal,0,,low,,6,,,,0
 field = syncInternal|22|struct:syncInternal,0,,low,,6,,,,0
 field = tuner|23|struct:tuner,0,,low,,6,,,,0
 field = userContent|35|struct:userContent,0,,low,,6,,,,0
 field = userDiskSize|24|long,0,1,low,,,5,0,,0
 field = vodLocality|25|string,0,1,low,,5,5,,32,0
 isFrozen = true
 number = 270
 returnType = body
   description = Stores a new or a modified bodyobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = bodyId|,,The globally unique ID for this body.
   field = bucketNumber|,5,bucketNumber for this body, this field is always internally filled in for bodyStore, bodyConfigStore and syncPing. See MindSession.java
   field = capabilities|2,5,capabilities supported by the body
   field = channelMapId|5,5,An integer identifying the channel map (the complete list of channels)  used by this body.
   field = controllerId|5,5,An integer identifying the cable head-end used by this body.
   field = hasScheduler|,5,Deprecated: True for bodies that have a scheduler.  These bodies get candidates from the mind, but no recording.
   field = observesDaylightSaving|,5,Deprecated: Does this body observe daylight savings?
   field = randomId|,5,Deprecated: A random ID assigned to this body to help track anonymous ID changes
   field = recording|6,,Recordings for this body
   field = recordingSettings|2,5,Recording settings to store about the body
   field = secondsFromGmt|,5,Deprecated: Number of seconds offset from GMT.  Add this to the GMT time to get local time.  (Note that this offset does not include any offset due to daylight saving.)
   field = softwareVersion|,5,Deprecated: The name of the software version that this body is running.
   field = userDiskSize|,5,Depreciated: Disk size of the partition for user recordings, in kilobytes
   field = vodLocality|5,5,The VOD locality string for this body, used to define the set of VOD assets associated with this body.

********** operation = bodyThumbsRemove (NO)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 field = bodyThumbsId|2|idInt:bodyThumbs,1,1,,,,,,,0
 isFrozen = true
 number = 1301
 returnType = success
   description = Removes a bodyThumbs object from the mind.

********** operation = bodyThumbsSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = bodyId|3|idBody:body,1,1,,,,,,,0
 field = bodyThumbsId|4|idInt:bodyThumbs,0,1,,,,,,,0
 field = count|5|int,0,1,,1,,,1,,0
 field = createDate|15|dateTime,0,1,,,,,,,0
 field = format|6|enum:format,0,1,,,,,,,0
 field = groupBy|7|string,0,,,,,,,32,0
 field = levelOfDetail|8|enum:levelOfDetail,0,1,,,,,,,0
 field = note|9|string,0,,,,,,,,0
 field = objectId|10|idLongAndType,0,,,,,,,,0
 field = objectType|16|enum:mindObjectType,0,,,,,,,,0
 field = offset|11|int,0,1,,0,,,,,0
 field = orderBy|12|string,0,,,,,,,32,0
 field = removeField|13|string,0,,,,,2,,,0
 field = responseTemplate|18|struct:responseTemplate,0,,,,,,,,0
 field = updateDate|17|dateTime,0,1,,,,,,,0
 field = useAnchorOperation|14|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 number = 1302
 orderBy = createDate
 orderBy = updateDate
 returnType = bodyThumbsList
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = bodyId|,,Limits the search to an object with exactly the same value in this field.
   field = bodyThumbsId|,,Limits the search to an object with exactly the same value in this field.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = objectId|,,Limits the search to an object with exactly the same value in this field.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = bodyThumbsStore (NO)
 field = bodyId|1|idBody:body,1,1,low,,,,,,0
 field = bodyThumbsId|2|idInt:bodyThumbs,0,1,low,,,,,,0
 field = objectId|3|idLongAndType,1,1,low,,,,,,0
 field = thumbsRating|4|int,1,1,low,,,,-3,3,0
 field = thumbsType|5|enum:thumbsType,1,1,low,,,,,,0
 isFrozen = true
 number = 1303
 returnType = bodyThumbs
   description = Stores a new or a modified bodyThumbsobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = bodyId|,,the id of the body to which the thumbs rating pertains
   field = bodyThumbsId|,,the id of the bodyThumbs object
   field = objectId|,,the id of the object being thumbed
   field = thumbsRating|,,A number from -3 to 3, indicating how much the user likes the content.  -3 is three thumbs down, 3 is three thumbs up, 0 is neutral, which not having a value is different and means we don't know.
   field = thumbsType|,,The type of this thumb value.

********** operation = bodyToucherTest (NO)
 field = bodyId|1|idBody:anyBody,1,1,,,,,,,0
 field = operation|2|enum:bodyToucherOperation,1,1,,,,,,,0
 number = 845
 returnType = bodyToucherTestResponse
   description = test out the public methods of the BodyToucher class

********** operation = bodyTransfer (NO)
 field = bodyId|1|string,1,1,low,,,,,,0
 field = destinationCluster|3|int,1,1,,,,,,,0
 field = routingType|4
 field = toCluster|2
 number = 1226
 returnType = bodyTransferResult
   description = Transfer a body from one AppDB cluster to another.
   field = bodyId|,,Id of the body to be moved. We read it in as string because it may be anonymized or turned into a external long id.
   field = destinationCluster|,,Destination cluster id.

********** operation = bodyUserRemove (NO)
 field = bodyId|3|idBody:body,0,1,,,,,,,0
 field = bodyUserId|4|idInt:bodyUser,0,1,,,,,,,0
 field = neoBodyId|1
 field = neoUserId|2|idInt:neoUser,0,1,,,,,,,0
 isFrozen = true
 number = 1314
 returnType = success
   description = Remove a bodyUser, either by bodyUserId, or by bodyId/neoUserId
   field = bodyId|,,Limits the search to an object with exactly the same value in this field.
   field = bodyUserId|,,Limits the search to an object with exactly the same value in this field.
   field = neoUserId|,,Limits the search to an object with exactly the same value in this field.

********** operation = bodyUserSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = bodyId|14|idBody:body,0,1,,,,,,,0
 field = bodyUserId|15|idInt:bodyUser,0,1,,,,,,,0
 field = count|3|int,0,1,,1,,,1,,0
 field = format|4|enum:format,0,1,,,,,,,0
 field = groupBy|5|string,0,,,,,,,32,0
 field = levelOfDetail|6|enum:levelOfDetail,0,1,,,,,,,0
 field = maxCreateDate|16|dateTime,0,1,,,,,,,0
 field = maxUpdateDate|17|dateTime,0,1,,,,,,,0
 field = minCreateDate|18|dateTime,0,1,,,,,,,0
 field = minUpdateDate|19|dateTime,0,1,,,,,,,0
 field = neoBodyId|7
 field = neoUserId|8|idInt:neoUser,0,1,,,,,,,0
 field = note|9|string,0,,,,,,,,0
 field = offset|10|int,0,1,,0,,,,,0
 field = orderBy|11|string,0,,,,,,,32,0
 field = removeField|12|string,0,,,,,2,,,0
 field = responseTemplate|20|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|13|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 fieldGroup = serviceClusterSearchDates
 number = 1315
 returnType = bodyUserList
   description = search for NeoUsers on a body
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = bodyId|,,Limits the search to an object with exactly the same value in this field.
   field = bodyUserId|,,Limits the search to an object with exactly the same value in this field.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = neoUserId|,,Limits the search to an object with exactly the same value in this field.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = bodyUserStore (NO)
 field = bodyId|6|idBody:body,1,1,low,,,,,,0
 field = bodyUserId|7|idInt:bodyUser,0,1,low,,,,,,0
 field = capability|1|enum:bodyUserCapability,0,,low,,,,,,0
 field = neoBodyForNeoBodyId|2
 field = neoBodyId|3
 field = neoUserForNeoUserId|4|struct:neoUser,0,1,low,,,7,,,1
 field = neoUserId|5|idInt:neoUser,1,1,low,,,,,,0
 isFrozen = true
 number = 1316
 returnType = bodyUser
   description = Stores a new or a modified bodyUserobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = bodyId|,,a neo body which the neoUser has access to
   field = bodyUserId|,,BodyUserId is for internal use only. Clients should use BodyId   NeoUserId for primary key access.
   field = capability|,,a capability (permission) of the neoUser on the neo body
   field = neoUserForNeoUserId|,7,Annotation (note) holds the NeoUser that has access to the neo body.
   field = neoUserId|,,a neoUser who has access to the neo body

********** operation = bodyXmppInfoGet (NO)
 field = bodyId|1|idBody:anyBody,1,1,,,,,,,0
 isFrozen = true
 number = 272
 returnType = bodyXmppInfo
   description = A request from a body for the information it needs to connect to a Xmpp server. Since there's no database access required, the operation is marked with a route of none.

********** operation = cacheKeyStore (NO)
 field = flags|1|int,0,1,low,,,,,,0
 field = key|2|string,1,1,low,,,,,,0
 field = value|3|string,0,1,low,,,,,,0
 number = 1977
 returnType = cacheKey
   description = Stores a new or a modified cacheKeyobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = flags|,,Key flags is a 32 bit integer metadata value describing the value.  It is usually set by the memcache client library to indicate  compression and value type.

********** operation = cacheStatisticsGet (NO)
 isFrozen = true
 number = 274
 returnType = cacheStatistics
   description = Asks the mind to report on the performance of its query cache.

********** operation = cacheTestGet (NO)
 field = isCacheable|1|boolean,1,1,,,,,,,0
 field = secondsUntilExpiration|2|int,1,1,,,,,0,,0
 number = 276
 returnType = cacheTest
   description = This operation echos back a cacheTest object and tells the mind whether the result is cacheable based on the input.
   field = isCacheable|,,Return value from isCacheable() from CacheTestGet.
   field = secondsUntilExpiration|,,Value that CacheTestGet should put in mSecondsUntilExpiration of its result.

********** operation = callInstructionsGet (NO)
 field = bodyId|1|idBody:body,1,1,low,,,,,,0
 field = callId|2|string,1,1,low,,,,,,0
 field = callResult|3|struct:callInstructionResult,0,,low,,,,,,0
 field = channelMapId|7|int,0,1,,,,,,,0
 field = clientMacAddress|8|string,0,1,,,,,,,0
 field = headendId|9|int,0,1,,,,,,,0
 field = pgdHeadendId|10|string,0,1,,,,,,,0
 field = requestToken|4|anyDict,0,1,low,,,,,,0
 field = softwareVersion|5|string,1,1,low,,,,,,0
 field = userInitiated|6|boolean,1,1,low,,,,,,0
 number = 1732
 returnType = callInstructions
   field = callId|,,A session ID.  Historically, a session of a Service call is called a "call". Using "callId" here enables more straightforward correlation to the trackerDb. Typically, the client would send Unix time, in seconds. This same value should be used as the callId for the entire session, meaning the invocation of callInstructionsGet plus each of the subsequent invocations of sub-operations, if any.
   field = callResult|,,The body may report the result(s) of executing the list of instructions/operations given to the body by callInstructionsGet from the previous invocation of callInstructionsGet. If this is the first invocation by the body, then there would not be a result from a previous invocation, so this field may be omitted in that case.
   field = channelMapId|,,An integer identifying the channel map (the complete list of channels) used by this body.
   field = clientMacAddress|,,The MAC address of the client.
   field = headendId|,,The headend ID to which the client believes it is assigned.
   field = pgdHeadendId|,,A PGD headend ID identifying the PGD defined headend for this body.
   field = requestToken|,,Typically the "resultToken" of the previous *InstructionsGet response. If this is the first call, then this field is omitted. As an anyDict field, we have extensibility here.
   field = softwareVersion|,,The currently installed software version on the body. This field is mostly intended for informational logging and potentially identifying what software features are currently available to the client.
   field = userInitiated|,,Was this invocation initiated by explicit user action, rather than programmatically, based on callbackSeconds information? This is mainly informational.

********** operation = callbackPolicyRemove (NO)
 field = operationName|1|string,1,1,,,,,,,0
 field = serviceGroup|2|string,0,1,,,,,,,0
 number = 2068
 returnType = success
   description = Remove callbackPolicy
   field = operationName|,,Operation for which to remove the callback policy (policies)
   field = serviceGroup|,,The serviceGroup for which to remove the callback policy (policies)

********** operation = callbackPolicySearch (NO)
 field = bodyId|2|idBody:body,0,1,,,,,,,0
 field = operationName|1|string,1,,,,,,,,0
 isFrozen = true
 number = 1931
 returnType = callbackPolicyList
   description = Search for the callback policy for the given operation(s)
   field = bodyId|,,If bodyId is specified, it will return serviceGroup specific policy if one exists.
   field = operationName|,,Operation(s) for which to return the callback policy for

********** operation = callbackPolicyStore (NO)
 field = callbackInterval|1|int,1,1,low,,,,,,0
 field = callbackTime|2|dateTime,0,1,low,,,,,,0
 field = operationName|3|string,1,1,low,,,,,,0
 field = serviceGroup|4|string,0,1,low,,,,,,0
 isFrozen = true
 number = 2069
 returnType = callbackPolicy
   description = Stores a new or a modified callbackPolicyobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = callbackInterval|,,Interval (in seconds) after which the caller should call the operation again
   field = callbackTime|,,Absolute time at which the caller should call the operation again.  You can use callbackTime along with callbackInterval.  For example, yon can specify callbackTime (03:00:00)  and callbackInterval (60*60*24*7) to callback weekly at 3am.

********** operation = callerIdSend (NO)
 field = bodyId|1|idBody:body,1,1,low,,,,,,0
 field = checksum|2|string,0,1,low,,,,,2,0
 field = date|3|string,1,1,low,,,,5,5,0
 field = name|4|string,0,1,low,UNAVAILABLE,,,,50,0
 field = number|5|string,0,1,low,UNAVAILABLE,,,,35,0
 field = time|6|string,1,1,low,,,,8,8,0
 number = 1796
 returnType = success
   description = Called by external parter to send callerId message to a TCD
   field = bodyId|,,The globally unique ID for this body.
   field = checksum|,,2-digit HEX string as sum of all ASCII characters of date, time, number and name fields modulo 256.
   field = date|,,Call date: an ASCII string of format 'MM.dd' (e.g. 02.05 for Feb 5)
   field = name|,,Person name: an ASCII string with maxLength of 50 char
   field = number|,,Phone number: an ASCII string of arbitrary format in order to accomodate international phone numbers.
   field = time|,,Call time: an ASCII string of format 'hh:mm:ss' (e.g. 14:05:01 for 2:05:01pm)

********** operation = candidateRemove (NO)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 field = candidateId|2|idInt:candidate,1,1,,,,,,,0
 isFrozen = true
 number = 279
 returnType = success
   description = Removes a candidate object from the mind.

********** operation = candidateSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = bodyId|3|idBody:body,1,1,,,,,,,0
 field = candidateId|4|idInt:candidate,0,1,,,,,,,0
 field = count|5|int,0,1,,1,,,1,,0
 field = format|6|enum:format,0,1,,,,,,,0
 field = groupBy|7|string,0,,,,,,,32,0
 field = levelOfDetail|8|enum:levelOfDetail,0,1,,,,,,,0
 field = note|9|string,0,,,,,,,,0
 field = offset|10|int,0,1,,0,,,,,0
 field = orderBy|11|string,0,,,,,,,32,0
 field = removeField|12|string,0,,,,,2,,,0
 field = responseTemplate|15|struct:responseTemplate,0,,,,,,,,0
 field = subscriptionId|13|idInt:subscription,0,1,,,,,,,0
 field = useAnchorOperation|14|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 isFrozen = true
 number = 280
 orderBy = -priority
 orderBy = title
 returnType = candidateList
   description = Search candidates on a given body.
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = bodyId|,,Limits the search to an object with exactly the same value in this field.
   field = candidateId|,,Limits the search to an object with exactly the same value in this field.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = subscriptionId|,,Limits the search to an object with exactly the same value in this field.
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = candidateStore (NO)
 field = bodyId|1|idBody:body,1,1,low,,,,,,0
 field = candidateId|2|idInt:candidate,0,1,low,,,,,,0
 field = candidateIdInBody|3|localId,0,1,high,,,2,,,0
 field = contentId|4|idLong:content,0,1,low,,,,,,0
 field = offerId|5|idString:offer,0,1,low,,,,,,0
 field = subscriptionId|6|idInt:subscription,1,,low,,,,,,0
 isFrozen = true
 number = 281
 returnType = candidate
   description = Stores a new or a modified candidateobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = candidateId|,,Globally unique ID for this candidate
   field = candidateIdInBody|,2,Body-local ID for this candidate

********** operation = candyBarControlRemove (NO)
 field = candyBarControlId|1|idLong:candyBarControl,1,1,,,,,,,0
 isFrozen = true
 number = 1518
 returnType = success
   description = Removes a candyBarControl object from the mind.

********** operation = candyBarControlSearch (NO)
 field = bodyId|1|idBody:body,0,1,,,,,,,0
 field = candyBarControlId|2|idLong:candyBarControl,0,,,,,,,,0
 field = count|3|int,0,1,,1,,,1,,0
 field = displayName|4|string,0,1,,,,,,100,0
 field = displayNamePrefix|5|string,0,1,,,,,,,0
 field = format|6|enum:format,0,1,,,,,,,0
 field = groupBy|7|string,0,,,,,,,32,0
 field = levelOfDetail|8|enum:levelOfDetail,0,1,,,,,,,0
 field = maxCreateDate|14|dateTime,0,1,,,,,,,0
 field = maxUpdateDate|15|dateTime,0,1,,,,,,,0
 field = minCreateDate|16|dateTime,0,1,,,,,,,0
 field = minUpdateDate|17|dateTime,0,1,,,,,,,0
 field = noLimit|9|boolean,0,1,,,,,,,0
 field = note|10|string,0,,,,,,,,0
 field = offset|11|int,0,1,,0,,,,,0
 field = orderBy|12|string,0,,,,,,,32,0
 field = responseTemplate|13|struct:responseTemplate,0,,,,,,,,0
 fieldGroup = searchFieldsNoAnchoring
 number = 1519
 orderBy = candyBarControlId
 orderBy = displayName
 orderBy = displayRank
 returnType = candyBarControlList
   description = search for candyBarControls
   field = bodyId|,,when present, filter out candyBarControls with serviceGroups to which the body doesn't belong.
   field = candyBarControlId|,,Limits the search to an object with exactly the same value in this field.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = displayName|,,Limits the search to an object with exactly the same value in this field.
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = candyBarControlStore (NO)
 field = candyBarControlId|1|idLong:candyBarControl,0,1,low,,,,,,0
 field = displayName|2|string,1,1,low,,,,,100,0
 field = displayRank|3|int,1,1,low,,,,0,65535,0
 field = serviceGroup|4|string,0,,low,,,,1,128,0
 isFrozen = true
 number = 1520
 returnType = candyBarControl
   description = Stores a new or a modified candyBarControlobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = candyBarControlId|,,the mind-assigned ID for this candyBarControl
   field = displayName|,,the name of the candyBarControl to be displayed in the UI
   field = displayRank|,,the display rank relative to other candyBarControls in the list.  Ties are broken by displayName, and then by candyBarControlId.
   field = serviceGroup|,,candyBarControls with service groups will only appear in the UI for TCDs in those service groups

********** operation = candyBarGet (NO)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 field = cacheKey|14|string,0,1,,,9,,,,0
 field = fallbackImageObjectType|8|enum:fallbackImageObjectType,0,1,,,,8,,,0
 field = filterBehavior|6|enum:candyBucketSearchFilterBehavior,0,1,low,,,8,,,0
 field = fromCache|10
 field = imageRuleset|5|struct:imageRuleset,0,,,,,,,,0
 field = maxViews|9|int,0,1,low,0,,8,,255,0
 field = mindState|2|anyDict,0,1,,,,,,,0
 field = numberOfCandy|11|int,1,1,low,,9,,,255,0
 field = numberOfViewedCandy|12
 field = numberOfVisibleCandy|13|int,0,1,low,,9,,,255,0
 field = screenIdentifier|3|union:screenIdentifier,1,1,,,,,,,0
 field = supportTextOverlay|7|boolean,0,1,,false,,8,,,0
 field = viewedCandy|4|union:candyIdentifier,0,,,,,8,,,0
 number = 1664
 returnType = candyBar
   field = cacheKey|9,,A string that can be used for caching candy bars allowing for retrieval of a candy bar from cache.  The string is opaque to clients.
   field = fallbackImageObjectType|,8,If set, this object type will be used to replace the main object's image if the main object's image is not available based on the input ruleset
   field = filterBehavior|,8,Override the candyBarPolicy's value for the filterBehavior.
   field = imageRuleset|,,one ruleset should be specified per image desired. multiple rulesets can be specified.
   field = maxViews|,8,This maxViews value will override candyBarPolicy's maxViews.
   field = mindState|,,this is an opaque blob optionally returned in the previous cnadyBarGet response. If present in the previous response, it should be present in the request. It's not required to persist across UI sessions.
   field = numberOfCandy|9,,Number of candy in a bar.
   field = numberOfVisibleCandy|9,,Number of visible candy.  Must be less or equal to numberOfCandy. If omitted, defaults to numberOfCandy.
   field = supportTextOverlay|,8,if true, and candy does not have an image, then fill in category images
   field = viewedCandy|,8,the candyIdentifiers for candy viewed since the previous candyBarGet request. Can be empty if the first request.

********** operation = candyBarPolicyGet (NO)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 field = includeCacheKeys|3|boolean,0,1,,false,,,,,0
 field = screenIdentifier|2|union:screenIdentifier,1,1,,,,,,,0
 number = 1004
 returnType = candyBarPolicy
   field = includeCacheKeys|,,if true, a cacheKey will be returned in each bucketIdentifier

********** operation = candyBarScreenPolicyDescriptionSearch (NO)
 field = candyBarScreenPolicyDescriptionId|2|idLong:candyBarScreenPolicyDescription,0,1,,,,,,,0
 field = screenName|1|enum:candyBarScreenName,1,1,,,,,,,0
 field = serviceGroup|3|string,0,,,,,,1,128,0
 number = 1094
 returnType = candyBarScreenPolicyDescriptionList
   field = serviceGroup|,,Limits the search to an object with exactly the same value in this field.

********** operation = candyBarScreenPolicyDescriptionStore (NO)
 field = binPolicy|7|struct:candyBinPolicyDescription,0,,low,,,,,,0
 field = cacheInterval|8|int,0,1,low,,,,,,0
 field = candyBarScreenPolicyDescriptionId|10|idLong:candyBarScreenPolicyDescription,0,1,low,,,,,,0
 field = inactivityScrollTimeout|3|int,0,1,low,0,,8,0,65535,0
 field = maxViews|4|int,0,1,low,2,,8,1,255,0
 field = minViews|5|int,0,1,low,2,,8,1,255,0
 field = mindVersion|12
 field = policy|1|struct:candyBucketPolicyDescription,1,,low,,,,,,0
 field = screenEntryScrollTimeout|6|int,0,1,low,0,,8,0,65535,0
 field = screenName|2|enum:candyBarScreenName,1,1,low,,,,,,0
 field = serviceGroup|11|string,0,,low,,,,1,128,0
 field = version|9|int,0,1,low,1,,,,,0
 number = 1068
 returnType = candyBarScreenPolicyDescription
   description = Stores a new or a modified candyBarScreenPolicyDescriptionobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = cacheInterval|,,The interval, in seconds, that this policy should be cached.
   field = inactivityScrollTimeout|,8,The timeout in seconds after the last "keypress" before a scroll event is triggered. If zero, disable inactivity-timeout scrolling.
   field = maxViews|,8,The maximum number of candyBar "views" to allow on this screen.
   field = minViews|,8,The minimum number of candyBar "views" required on this screen.
   field = screenEntryScrollTimeout|,8,The timeout in seconds after screen entry before a scroll event is triggered. If zero, disable entry-timeout scrolling.
   field = version|,,Versioning for candyBarPolicy. Storing a new candyBarPolicy with the same screenName will increment version by 1.

********** operation = candyBarScreenPolicyServiceGroupSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = count|3|int,0,1,,1,,,1,,0
 field = format|4|enum:format,0,1,,,,,,,0
 field = groupBy|5|string,0,,,,,,,32,0
 field = levelOfDetail|6|enum:levelOfDetail,0,1,,,,,,,0
 field = noLimit|7|boolean,0,1,,,,,,,0
 field = note|8|string,0,,,,,,,,0
 field = offset|9|int,0,1,,0,,,,,0
 field = orderBy|10|string,0,,,,,,,32,0
 field = removeField|11|string,0,,,,,2,,,0
 field = responseTemplate|12|struct:responseTemplate,0,,,,,,,,0
 field = screenName|13|enum:candyBarScreenName,0,1,,,,,,,0
 field = serviceGroup|14|string,0,1,low,,,,1,128,0
 field = useAnchorOperation|15|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 number = 2117
 returnType = candyBarScreenPolicyServiceGroupList
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = noLimit|,,Do not limit this search to a given count.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = candyBucketSearch (NO)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 field = bucket|2|struct:interiorCandyBucketSearchFilter,1,,,,,,,,0
 field = excludeCandy|4|union:candyIdentifier,0,,,,,8,,,0
 field = fallbackImageObjectType|8|enum:fallbackImageObjectType,0,1,,,,8,,,0
 field = filterBehavior|5|enum:candyBucketSearchFilterBehavior,0,1,,filterByAvailability,,8,,,0
 field = imageRuleset|3|struct:imageRuleset,0,,,,,,,,0
 field = includeCacheKeys|6|boolean,0,1,,false,,,,,0
 field = omitPgdImages|9|boolean,0,1,,,9,,,,0
 field = supportTextOverlay|7|boolean,0,1,,false,,8,,,0
 fieldGroup = imageRulesetFields
 number = 1009
 returnType = candyBucketList
   field = fallbackImageObjectType|,8,If set, this object type will be used to replace the main object's image if the main object's image is not available based on the input ruleset
   field = filterBehavior|,8,Determines how the result set is produced and filtered
   field = imageRuleset|,,one ruleset should be specified per image desired. multiple rulesets can be specified.
   field = includeCacheKeys|,,if true, a cacheKey will be returned in each bucketIdentifier
   field = omitPgdImages|9,,If TRUE, then PGD images will not be returned.
   field = supportTextOverlay|,8,if true, and candy does not have an image, then fill in category images

********** operation = captureRequestDataCleanup (NO)
 field = bodyId|1|idBody:body,0,1,low,,,,,,0
 field = maxUpdateDate|2|dateTime,1,1,,,,,,,0
 number = 1971
 returnType = success
   field = maxUpdateDate|,,everything cleaned up must be older than this date.
   project = captureRequestDataCleanup|0|0|0|partner-schedule

********** operation = captureRequestDataRemove (NO)
 field = bodyId|2|idBody:body,1,1,,,,,,,0
 field = captureRequestDataId|1|idInt:captureRequestData,0,1,,,,,,,0
 field = crid|3|long,1,1,,,,,0,2147483647,0
 number = 1872
 returnType = success
   field = captureRequestDataId|,,Limits the search to an object with exactly the same value in this field.
   field = crid|,,Limits the search to an object with exactly the same value in this field.

********** operation = captureRequestDataSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = bodyId|3|idBody:body,1,1,,,,,,,0
 field = captureRequestDataId|4|idInt:captureRequestData,0,1,,,,,,,0
 field = count|5|int,0,1,,1,,,1,,0
 field = crid|15|long,0,1,,,,,0,2147483647,0
 field = format|6|enum:format,0,1,,,,,,,0
 field = groupBy|7|string,0,,,,,,,32,0
 field = levelOfDetail|8|enum:levelOfDetail,0,1,,,,,,,0
 field = note|9|string,0,,,,,,,,0
 field = offset|10|int,0,1,,0,,,,,0
 field = orderBy|11|string,0,,,,,,,32,0
 field = removeField|12|string,0,,,,,2,,,0
 field = responseTemplate|13|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|14|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 isFrozen = true
 number = 1874
 orderBy = updateDate
 returnType = captureRequestDataList
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = bodyId|,,Limits the search to an object with exactly the same value in this field.
   field = captureRequestDataId|,,Limits the search to an object with exactly the same value in this field.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = crid|,,Limits the search to an object with exactly the same value in this field.
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = captureRequestDataStore (NO)
 field = bodyId|1|idBody:body,1,1,low,,,,,,0
 field = captureRequestDataId|2|idInt:captureRequestData,0,1,low,,,,,,0
 field = contents|5|string,1,1,low,,,,,,0
 field = crid|4|long,1,1,low,,,,0,2147483647,0
 field = data|3
 isFrozen = true
 number = 1873
 returnType = captureRequestData
   field = bodyId|,,Limits the search to an object with exactly the same value in this field.
   field = captureRequestDataId|,,Limits the search to an object with exactly the same value in this field.
   field = contents|,,captureRequest contents in the form of name=value pairs. Each pair is delimited by a single space
   field = crid|,,Limits the search to an object with exactly the same value in this field.

********** operation = captureRequestStore (NO)
 field = accountToken|1|string,1,1,low,,,,,,0
 field = aclFlag|19|string,0,1,low,,,,,,0
 field = anonId|2|string,0,1,low,,,,,255,0
 field = bodyId|3|idBody:body,1,1,low,,,,,,0
 field = captureRequestId|4|string,0,1,low,,,,,255,0
 field = captureRequestType|5|enum:captureRequestType,0,1,low,,,,,,0
 field = channelNumber|6|string,0,1,low,,,,,,0
 field = contentId|7|objectId28,1,1,low,,,,,,0
 field = duration|20|string,0,1,low,,,,,,0
 field = email|8|string,0,1,low,,,,,255,0
 field = endTimePadding|9|enum:endTimePadding,0,1,medium,,,,,,0
 field = keepTime|10|enum:keepTime,0,1,medium,,,,,,0
 field = maxRecordings|11|enum:maxRecordings,0,1,medium,,,,,,0
 field = namespace|21|string,0,1,low,,,,,,0
 field = partnerId|12|string,0,1,low,,,,,255,0
 field = programTitle|22|string,0,1,low,,,,,,0
 field = recordingPriority|13|enum:recordingPriority,0,1,medium,,,,,,0
 field = recordingQualityLevel|14|enum:recordingQualityLevel,0,1,medium,,,,,,0
 field = showStart|15|dateTime,0,1,low,,,,,,0
 field = showStatus|16|enum:showStatus,0,1,medium,,,,,,0
 field = startTimePadding|17|enum:startTimePadding,0,1,medium,,,,,,0
 field = stationId|18|objectId28,0,1,low,,,,,,0
 fieldGroup = captureRequestFields
 number = 283
 returnType = captureRequest
   description = The request is a new or modified captureRequest object. The response is the updated captureRequest object.  Newly created captureRequests will include the newly assigned captureRequestId.
   field = endTimePadding|,,Number of seconds after the end time of the showing to continue recording.  This allows the viewer to compensate when stations don't keep exact time.  If negative, it makes the recording end early.  If missing, acts as though it were 0.
   field = maxRecordings|,,The maximum number of recordings to keep at any one time.  Should be greater than or equal to 1.  If missing, means unlimited.
   field = recordingPriority|,,Priority index for this subscription relative to others. Ranges from 1 (highest priority) to 5000 (lowest).
   field = recordingQualityLevel|,,The quality setting that should be used for recordings from this captureRequest -- if possible (not all devices can control the recording quality).  If missing, uses a default quality level.
   field = startTimePadding|,,Number of seconds before the actual start of the showing to begin recording. This allows the viewer to compensate when stations don't keep exact time.  If negative, it makes the recording start late.  If missing, acts as though it were 0.
   fieldProject = accountToken|0|0|0|partner-schedule
   fieldProject = anonId|0|0|0|partner-schedule
   fieldProject = bodyId|0|0|0|partner-schedule
   fieldProject = captureRequestId|0|0|0|partner-schedule
   fieldProject = captureRequestType|0|0|0|partner-schedule
   fieldProject = channelNumber|0|0|0|partner-schedule
   fieldProject = contentId|0|0|0|partner-schedule
   fieldProject = email|0|0|0|partner-schedule
   fieldProject = endTimePadding|0|0|0|partner-schedule
   fieldProject = keepTime|0|0|0|partner-schedule
   fieldProject = maxRecordings|0|0|0|partner-schedule
   fieldProject = partnerId|0|0|0|partner-schedule
   fieldProject = recordingPriority|0|0|0|partner-schedule
   fieldProject = recordingQualityLevel|0|0|0|partner-schedule
   fieldProject = showStart|0|0|0|partner-schedule
   fieldProject = showStatus|0|0|0|partner-schedule
   fieldProject = startTimePadding|0|0|0|partner-schedule
   fieldProject = stationId|0|0|0|partner-schedule
   project = captureRequestStore|0|0|0|partner-schedule

********** operation = categoryDisplayAreaSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = categoryId|3|idLong:category,1,1,,,,,,,0
 field = count|4|int,0,1,,1,,,1,,0
 field = format|5|enum:format,0,1,,,,,,,0
 field = groupBy|6|string,0,,,,,,,32,0
 field = levelOfDetail|7|enum:levelOfDetail,0,1,,,,,,,0
 field = note|8|string,0,,,,,,,,0
 field = offset|9|int,0,1,,0,,,,,0
 field = orderBy|10|string,0,,,,,,,32,0
 field = removeField|11|string,0,,,,,2,,,0
 field = responseTemplate|12|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|13|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 isFrozen = true
 number = 1981
 returnType = categoryDisplayAreaList
   description = categoryDisplayAreaSearch should be used to check displayArea(s) that belongs to a categoryId. Use categorySearch which is more general-purpose for details about category(s).
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = categoryDisplayAreaStore (NO)
 field = categoryId|1|idLong:category,1,1,low,,,,,,0
 field = displayArea|2|enum:uiDisplayArea,1,,low,,,,,,0
 isFrozen = true
 number = 1982
 returnType = categoryDisplayArea
   description = Stores a new or a modified categoryDisplayAreaobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.

********** operation = categoryDisplayRankRemove (NO)
 field = categoryId|1|idLong:category,1,1,,,,,,,0
 field = partnerId|2|idInt:partner,1,1,,,,,,,0
 isFrozen = true
 number = 950
 returnType = success
   description = Removes a categoryDisplayRank object from the mind.

********** operation = categoryDisplayRankSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = categoryId|3|idLong:category,0,1,,,,,,,0
 field = count|4|int,0,1,,1,,,1,,0
 field = format|5|enum:format,0,1,,,,,,,0
 field = groupBy|6|string,0,,,,,,,32,0
 field = levelOfDetail|7|enum:levelOfDetail,0,1,,,,,,,0
 field = note|8|string,0,,,,,,,,0
 field = offset|9|int,0,1,,0,,,,,0
 field = orderBy|10|string,0,,,,,,,32,0
 field = partnerId|11|idInt:partner,1,1,,,,,,,0
 field = removeField|12|string,0,,,,,2,,,0
 field = responseTemplate|14|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|13|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 isFrozen = true
 number = 951
 returnType = categoryDisplayRankList
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = categoryId|,,Limits the search to an object with exactly the same value in this field.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = partnerId|,,Limits the search to an object with exactly the same value in this field.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = categoryDisplayRankStore (NO)
 field = categoryId|1|idLong:category,1,1,low,,,,,,0
 field = displayRank|2|int,1,1,low,,,,0,,0
 field = partnerId|3|idInt:partner,1,1,low,,,,,,0
 isFrozen = true
 number = 952
 returnType = categoryDisplayRank
   description = Stores a new or a modified categoryDisplayRankobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.

********** operation = categoryRemove (NO)
 field = categoryId|1|idLong:category,1,1,,,,,,,0
 isFrozen = true
 number = 818
 returnType = success
   description = Removes a category object from the mind.
   project = categoryRemove|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe

********** operation = categorySearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = categoryId|3|idLong:category,0,1,,,,,,,0
 field = childCategoryId|4|idLong:category,0,1,,,,,,,0
 field = count|5|int,0,1,,1,,,1,,0
 field = displayArea|29|enum:uiDisplayArea,0,1,,,,,,,0
 field = format|6|enum:format,0,1,,,,,,,0
 field = groupBy|7|string,0,,,,,,,32,0
 field = hdtv|25|boolean,0,1,,false,,,,,0
 field = label|8|string,0,1,,,,,,255,0
 field = levelOfDetail|9|enum:levelOfDetail,0,1,,,,,,,0
 field = maxCreateDate|26|dateTime,0,1,,,,,,,0
 field = maxUpdateDate|24|dateTime,0,1,,,,,,,0
 field = minCreateDate|27|dateTime,0,1,,,,,,,0
 field = minUpdateDate|10|dateTime,0,1,,,,,,,0
 field = namespace|11|enum:namespace,0,1,,,,,,,0
 field = noLimit|12|boolean,0,1,,,,,,,0
 field = note|13|string,0,,,,,,,,0
 field = offset|14|int,0,1,,0,,,,,0
 field = omitCategoryId|15|idLong:category,0,,,,,,,,0
 field = orderBy|16|string,0,,,,,,,32,0
 field = parentCategoryId|17|idLong:category,0,1,,,,,,,0
 field = partnerCategoryId|18|string,0,1,,,,,,100,0
 field = partnerId|19|idInt:partner,0,1,,,,,,,0
 field = purchasableFrom|23|enum:mindClient,0,1,,,,,,,0
 field = removeField|20|string,0,,,,,2,,,0
 field = responseTemplate|28|struct:responseTemplate,0,,,,,,,,0
 field = topLevelOnly|21|boolean,0,1,,,,,,,0
 field = useAnchorOperation|22|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 isFrozen = true
 number = 286
 orderBy = displayRank
 orderBy = label
 returnType = categoryList
   description = If no categoryId or parentCategoryId is specified, returns a list of the top-level categories.
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = categoryId|,,Limits the search to an object with exactly the same value in this field.
   field = childCategoryId|,,Restricts the search to the parents of the given category.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = displayArea|,,If displayArea is set, then categorySearch would return categories in the specified uiDisplayArea only.
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = hdtv|,,Restricts the returned content counts to only those that have underlying assets with hdtv set to this value
   field = label|,,Limits the search to an object with exactly the same value in this field.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = namespace|,,Which namespace to search in
   field = noLimit|,,Removes the limit restriction.  Category searches are not paginated, so we need to return all results. Default: false
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = omitCategoryId|,,categoryId(s) of categories that should not be included in the results.  You can specify one or more categoryId, and none of them will be included in the results.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = parentCategoryId|,,Restricts the search to the children of the given category.
   field = partnerCategoryId|,,Limits the search to an object with exactly the same value in this field.
   field = partnerId|,,Limits the search to an object with exactly the same value in this field.
   field = purchasableFrom|,,Restricts the returned content counts to only those purchasable from the enum value passed in (ex, "dvr", "web", ...)
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = topLevelOnly|,,Restricts the search to the top level categories.
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = categoryId|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = childCategoryId|0|0|0|partner-schedule
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = label|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = namespace|0|0|0|partner-schedule,partner-cds,partner-subscribe
   fieldProject = noLimit|0|0|0|partner-schedule
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = parentCategoryId|0|0|0|partner-schedule
   fieldProject = partnerCategoryId|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = partnerId|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = responseTemplate|0|0|0|all
   fieldProject = topLevelOnly|0|0|0|partner-schedule
   project = categorySearch|0|0|0|partner-schedule

********** operation = categoryStore (NO)
 field = availableContentCount|1|int,0,1,medium,0,,7,0,,0
 field = categoryId|2|idLong:category,0,1,low,,,,,,0
 field = childCategoryForCategoryId|3|struct:category,0,,low,,,7,,,1
 field = childCategoryId|4|idLong:category,0,,low,,,,,,0
 field = description|5|string,0,1,high,,,,,,0
 field = displayRank|6|int,0,1,medium,,,,0,,0
 field = image|14|struct:image,0,,medium,,,,,,0
 field = label|7|string,1,1,low,,,,,255,0
 field = nChildren|8|int,0,1,low,,,7,0,,0
 field = parentCategoryForCategoryId|9|struct:category,0,,low,,,7,,,1
 field = parentCategoryId|10|idLong:category,0,,low,,,,,,0
 field = partnerCategoryId|11|string,0,1,low,,,,,100,0
 field = partnerId|12|idInt:partner,0,1,low,,,,,,0
 field = topLevel|13|boolean,0,1,low,,,,,,0
 isFrozen = true
 number = 819
 returnType = category
   description = Stores a new or a modified categoryobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = availableContentCount|,7,The number of authored contents that are available for this category
   field = categoryId|,,Globally unique id for this category.
   field = childCategoryForCategoryId|,7,Child categories for this category
   field = childCategoryId|,,the categoryId for a childCategory of this category
   field = displayRank|,,This field has different meanings depending on where it is used.  When used in a categorySearch, it represents what order to display this category in the categoryList.  When used in a contentSearch, collectionSearch or offerSearch, it represents what order to display the content, collection or offer in depending on what displayRank the filtered category was authored to that content, collection or offer with.
   field = image|,,Image metadata for this category
   field = label|,,The text label for the category
   field = nChildren|,7,The number of categories that are subcategories of this one.
   field = parentCategoryForCategoryId|,7,Parent categories for this category
   field = parentCategoryId|,,the categoryId for a parentCategory of this category
   field = partnerCategoryId|,,The partner's own category Id.
   field = partnerId|,,authored categories require a partnerId
   fieldProject = availableContentCount|0|0|7|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = categoryId|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = childCategoryId|0|0|0|hme-cds,partner-cds,partner-subscribe
   fieldProject = description|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = displayRank|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = label|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = nChildren|0|0|7|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = parentCategoryId|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = partnerCategoryId|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = partnerId|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   project = categoryStore|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe

********** operation = cdsSchedule (NO)
 field = bodyId|1|idBody:body,0,1,,,,,,,0
 field = subscriptionId|3|idInt:subscription,0,1,,,,,,,0
 field = wasInvokedInternally|2|boolean,0,1,,false,,,,,0
 isFrozen = true
 number = 287
 returnType = downloadList
   description = A request to the mind to schedule CDS downloads, either for one body, or for all bodies associated with one user.
   field = subscriptionId|,,If specified, only schedule downloads for this subscription, leaving downloads for other subscriptions alone.
   field = wasInvokedInternally|,,This flag indicates whether a the operation was invoked by the client, as a result of a CdsSchedule call, or internally, as a result of a Subscribe operation or the overnight quartz CdsSchedule job. When invoked internally, a change to the scheduled downloads will trigger a notification to the client telling it to sync.  This flag will not be set during the cdsSchedule call from the client.  It will be set to true in the batch scheduler.  The subscribe and unsubscribe operations set this flag to true. In addition, if this flag is set to true, the CdsScheduler won't try to touch the updateDate in the bodyConfigObject. if it's set to false (or not set), the CdsScheduler will touch the updateDate if necessary.

********** operation = cdsUpdateRequest (NO)
   description = Forces a body to attempt downloading pending CDS assets.

********** operation = certificateKeyPairCreate (NO)
 field = commonName|1|string,1,1,,,,,,,0
 field = partnerId|2|idInt:partner,1,1,,,,,,,0
 number = 999
 returnType = certificateKeyPair
   description = This operation is used to generate a certificate key pair for a given partner
   field = partnerId|,,Partner Id of partner whose configuration to use to generate cert

********** operation = changeXmppOnDemandBehavior (NO)
 field = xmppOnDemandMode|1|string,1,1,,,,,,,0
 number = 295
 returnType = success
   description = change xmpp on demand behavior mode.  There are 3 types of behaviors on: always on off: always off statler6: on for tcd versions of statler 6 or greater

********** operation = channelChange (NO)
 field = channelId|1|idInt:channel,0,1,,,,,,,0
 field = channelList|2|enum:channelListType,0,1,,,,,,,0
 field = channelNumber|3|channelNumber,0,1,,,,,,,0
 field = increment|4|int,0,1,,,,,,,0
 field = serviceId|5|long,0,1,low,,8,,,,0
 number = 297
 returnType = channelList
   description = Changes the channel on the foreground tuner either by an increment relative to the current channel, or to a specific channel. If a channelId field is present, it is used as a channel to tune directly to. Otherwise, if a serviceId is present, then it is used to get the channel to tune to. Otherwise, if a majorNumber  (with optional minorNumber) field is present, then it is used as a  channel to tune directly to. Otherwise, the increment field must be  present and gives an increment to apply to the current channel  number, to effect a relative channel change. The channelList field  gives the channel list in which the channel to change will be looked  up. Returns a channelList that will either be empty or that will  contain exactly one channel. If there is one channel in the returned  channelList, then we will attempt to tune to that channel immediately. If it is empty, then the tune attempt will be deferred until any pending tuning conflicts are resolved.
   field = channelId|,,The channel to change to.
   field = channelList|,,Specifies the channel list which is used to determine the channel to tune to.
   field = channelNumber|,,The channel number to change the channel to.
   field = increment|,,If present, the increment for the channel change; typically it will be  1 to change up one channel or -1 to change down one channel.
   field = serviceId|8,,A network-specific identifier for the channel, provided by the network.

********** operation = channelRemove (NO)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 field = channelId|2|idInt:channel,1,1,,,,,,,0
 isFrozen = true
 number = 301
 returnType = success
   description = Removes a channel object from the mind.
   project = channelRemove|0|0|0|partner-schedule,partner-subscribe

********** operation = channelSearch (YES)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = bodyId|3|idBody:body,0,1,,,,,,,0
 field = channelId|4|idInt:channel,0,1,,,,,,,0
 field = channelNumber|27|channelNumber,0,1,,,,,,,0
 field = collectionId|5|idLong:collection,0,1,,,,,,,0
 field = contentId|6|idLong:content,0,1,,,,,,,0
 field = count|7|int,0,1,,1,,,1,,0
 field = disableIsReceivedDefault|8|boolean,0,1,,,,6,,,0
 field = excludeObjectIdAndType|28|long,0,,,,,,,,0
 field = fallBackToLineup|22|boolean,0,1,,false,,,,,0
 field = format|9|enum:format,0,1,,,,,,,0
 field = groupBy|10|string,0,,,,,,,32,0
 field = isBlocked|26|boolean,0,1,medium,,,,,,0
 field = isFavorite|11|boolean,0,1,medium,,,,,,0
 field = isReceived|12|boolean,0,1,medium,,,,,,0
 field = keyword|34|string,0,1,,,,,,,0
 field = levelOfDetail|13|enum:levelOfDetail,0,1,,,,,,,0
 field = lineup|14|struct:lineup,0,,,,,,,,0
 field = matchedField|35
 field = noLimit|15|boolean,0,1,,,,,,,0
 field = note|16|string,0,,,,,,,,0
 field = objectIdAndType|29|long,0,,,,,,,,0
 field = offset|17|int,0,1,,0,,,,,0
 field = orderBy|18|string,0,,,,,,,32,0
 field = removeField|19|string,0,,,,,2,,,0
 field = resolveCount|30|int,0,1,,0,,,,,0
 field = resolveLevelOfDetail|31|enum:levelOfDetail,0,1,,low,,,,,0
 field = resolveOffset|32|int,0,1,,0,,,,,0
 field = responseTemplate|25|struct:responseTemplate,0,,,,,,,,0
 field = serviceId|33|long,0,1,,,8,,,,0
 field = startTime|20|dateTime,0,1,,,,,,,0
 field = stationId|24|idLong:station,0,,,,,,,,0
 field = stationIdId|23
 field = useAnchorOperation|21|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 fieldGroup = channelSearchFields
 fieldGroup = resolveSearchFields
 groupBy = stationId
 isFrozen = true
 number = 302
 orderBy = -callSign
 orderBy = -channelNumber
 orderBy = stationId
 returnType = channelGroupList
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = bodyId|,,Limits the search to an object with exactly the same value in this field.
   field = channelId|,,Limits the search to an object with exactly the same value in this field.
   field = channelNumber|,,Limits the search to an object with exactly the same value in this field.
   field = collectionId|,,Restricts the search to channel objects that contain this collectionId.
   field = contentId|,,Restricts the search to channel objects that contain this contentId.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = disableIsReceivedDefault|,6,In mind versions prior to mind7, the default for isReceived was "true".  This was inconsistent with other mind queries: the general policy is that not setting something in a query means that you get all objects.  Setting this field to "true" switches to the normal and proper behavior.
   field = excludeObjectIdAndType|,,An objectIdAndType from an idSequence obtained in a previous search operation, to be excluded from the result set.
   field = fallBackToLineup|,,If no channels have been syncd for this body, then fall back to the headend and lineup if available
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = isBlocked|,,Limits the results to those on channels that have been blocked by the user via Parental Controls.
   field = isFavorite|,,Limits the results to those on channels that have the isFavorite attribute set to true. Default is unset, meaning that results from all channels will be returned. Only this or the isReceived attribute should be set.  If both are set, the query result is undefined.
   field = isReceived|,,Limits the search to an object with exactly the same value in this field.
   field = keyword|,,Restricts the search to channel objects with callsign or  affiliate that match the keyword in the request
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = lineup|,,Restricts the search to offers from the named lineup.
   field = noLimit|,,Removes the restriction imposed by the count parameter. Channel searches are not paginated, so we need to return all results. Default: false  If noLimit is specified in addition to count or resolveCount, then count and resolveCount are ignored and all results are included in the response.
   field = note|,,A request for the results to be annotated.
   field = objectIdAndType|,,Limits the search to an object with exactly the same value in this field.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = resolveCount|,,If a format of (string)idSequence is specified, the count of objectIds that should be resolved into objects. Ignored unless format = (string)idSequence.
   field = resolveLevelOfDetail|,,If a format of (string)idSequence is specified, the levelOfDetail at which the objects should be resolved.  Ignored unless resolveCount > 0 and format = (string)idSequence.
   field = resolveOffset|,,If a format of (string)idSequence is specified, the offset into the objectId list that should be resolved into objects. Ignored unless resolveCount > 0 and format = (string)idSequence.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = serviceId|8,,Limits the search to an object with exactly the same value in this field.
   field = startTime|,,Restricts the search to channel objects that contain a content/collection at this startTime
   field = stationId|,,Restricts the search to channel objects that contain these stationIds
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = bodyId|0|0|0|partner-schedule,partner-subscribe
   fieldProject = channelId|0|0|0|partner-schedule,partner-subscribe
   fieldProject = channelNumber|0|0|0|partner-schedule,partner-subscribe
   fieldProject = collectionId|0|0|0|partner-schedule,partner-subscribe
   fieldProject = contentId|0|0|0|partner-schedule,partner-subscribe
   fieldProject = count|0|0|0|all
   fieldProject = fallBackToLineup|0|0|0|partner-schedule,partner-subscribe
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = isReceived|0|0|0|partner-schedule,partner-subscribe
   fieldProject = keyword|0|0|0|partner-schedule,partner-subscribe
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = lineup|0|0|0|partner-schedule,partner-subscribe
   fieldProject = noLimit|0|0|0|partner-schedule,partner-subscribe
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all
   fieldProject = stationId|0|0|0|partner-schedule,partner-subscribe
   project = channelSearch|0|0|0|partner-schedule,partner-subscribe

********** operation = channelStore (NO)
 field = affiliate|1|string,0,1,low,,,7,,32,0
 field = averageBitRate|2|int,0,1,high,,,8,0,,0
 field = bitrate|25|long,0,1,low,,,,0,,0
 field = bodyId|3|idBody:body,0,1,high,,,,,,0
 field = callSign|4|string,0,1,low,,,7,,32,0
 field = channelId|5|idInt:channel,0,1,low,,,,,,0
 field = channelIdInBody|6|localId,0,1,high,,,2,,,0
 field = channelListId|7|idInt:bodyChannelList,0,1,high,,3,,,,0
 field = channelListIdInBody|8|localId,0,1,high,,,2,,,0
 field = channelLogoUrl|9|url,0,1,medium,,,7,,255,0
 field = channelNumber|10|channelNumber,0,1,low,,,,,,0
 field = description|11|string,0,1,medium,,,8,,128,0
 field = isAudio|12|boolean,0,1,medium,,,6,,,0
 field = isBlocked|28|boolean,0,1,low,,,,,,0
 field = isData|13|boolean,0,1,medium,,,6,,,0
 field = isDigital|26|boolean,0,1,low,,,,,,0
 field = isDiscovered|14|boolean,0,1,medium,,,6,,,0
 field = isExternalTuner|15|boolean,0,1,medium,,,6,,,0
 field = isFavorite|16|boolean,0,1,medium,,,,,,0
 field = isHidden|17|boolean,0,1,medium,,,,,,0
 field = isKidZone|18|boolean,0,1,low,,,7,,,0
 field = isReceived|19|boolean,0,1,low,,,,,,0
 field = isVideo|20|boolean,0,1,medium,,,6,,,0
 field = logoIndex|27|int,0,1,low,,,7,,,0
 field = matchedField|31|enum:matchedField,0,1,low,,,7,,,0
 field = name|21|string,0,1,low,,,7,,64,0
 field = networkInfo|22|union:networkInfo,0,1,high,,,6,,,0
 field = partnerStationId|30|string,0,1,low,,,,,,0
 field = serviceId|29|long,0,1,low,,8,,,,0
 field = sourceType|23|enum:channelSourceType,0,1,low,,,,,,0
 field = stationId|24|idLong:station,0,1,low,,,,,,0
 isFrozen = true
 number = 303
 returnType = channel
   description = Stores a new or a modified channelobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = affiliate|,7,The network that this channel is affiliated with.
   field = averageBitRate|,8,Average bit rate for this channel in MegaBits/second. This is to allow the Mind to calculate the estimated size for recordings scheduled on this channel. XXX: This field has been replaced by "bitrate"
   field = bitrate|,,average bitrate in bits per second
   field = bodyId|,,The body where this channel exists.  For queries where no body is specified (such as a grid search by headend), this field is missing.
   field = channelId|,,The ID for this channel.  Unique within one body.
   field = channelIdInBody|,2,The locally unique ID for this channel
   field = channelListId|3,,Which channel list in the body does this belong to?
   field = channelListIdInBody|,2,Which channel list in the body does this belong to?
   field = channelLogoUrl|,7,URL to the logo for this channel.
   field = channelNumber|,,The channel number, in major-minor format. Examples: "23", "30", "4-3".
   field = isAudio|,6,Does this channel carry audio?
   field = isBlocked|,,Is this channel blocked by the user via Parental Controls?
   field = isData|,6,Is this a channel one that carries data?
   field = isDiscovered|,6,Is this a channel that was discovered by the body and not listed in its program guide?  
   field = isExternalTuner|,6,Is this a channel one that comes from a tuner outside the body?
   field = isFavorite|,,Is this a channel one of the user's favorites?
   field = isHidden|,,Is this channel hidden from the UI?
   field = isKidZone|,7,Is this channel in KidZone?
   field = isReceived|,,Is this a channel that the body can receive?
   field = isVideo|,6,Does this channel carry video?
   field = matchedField|,7,This field contains the name of the field that matched the keyword search string which resulted in this channel object being returned from the search.
   field = networkInfo|,6,A network-specific structure that gives more information about this channel.
   field = partnerStationId|,,A unique ID for the partner's station (alphanumeric)
   field = serviceId|8,,A network-specific identifier for this channel, provided by the network.
   field = sourceType|,,The signal source type.
   field = stationId|,,A unique ID for the channel's station (a TiVoId)
   fieldProject = affiliate|0|0|7|partner-schedule,partner-subscribe
   fieldProject = averageBitRate|0|0|8|partner-schedule,partner-subscribe
   fieldProject = bitrate|0|0|0|partner-schedule,partner-subscribe
   fieldProject = bodyId|0|0|0|partner-schedule,partner-subscribe
   fieldProject = callSign|0|0|7|partner-schedule,partner-subscribe
   fieldProject = channelId|0|0|0|partner-schedule,partner-subscribe
   fieldProject = channelLogoUrl|0|0|7|partner-schedule,partner-subscribe
   fieldProject = channelNumber|0|0|0|partner-schedule,partner-subscribe
   fieldProject = description|0|0|8|partner-schedule,partner-subscribe
   fieldProject = isDigital|0|0|0|partner-schedule,partner-subscribe
   fieldProject = isHidden|0|0|0|partner-subscribe
   fieldProject = isKidZone|0|0|7|partner-schedule,partner-subscribe
   fieldProject = isReceived|0|0|0|partner-schedule,partner-subscribe
   fieldProject = name|0|0|7|partner-schedule,partner-subscribe
   fieldProject = partnerStationId|0|0|0|partner-schedule,partner-subscribe
   fieldProject = sourceType|0|0|0|partner-schedule,partner-subscribe
   fieldProject = stationId|0|0|0|partner-schedule,partner-subscribe
   project = channelStore|0|0|0|partner-schedule,partner-subscribe

********** operation = channelUpdate (NO)
   description = Updates one or more fields in one or more channel objects.
   field = allChannels|,,If set to "true" all channels will be updated and the channelId parameter will be ignored.
   field = channelId|,,The channel(s) to update. Only this or the channelIdentifier attrribute should be set.
   field = channelIdentifier|,,The channel(s) to update. Only this or the channelId attrribute should be set.
   field = isBlocked|,,This controls channel locking in parental controls policy. If set and true, the channel(s) will be marked as blocked.

********** operation = chatRoomRemove (NO)
 field = chatRoomId|1|idLong:chatRoom,1,1,,,,,,,0
 number = 1428
 returnType = success
   description = Removes a chatRoom object from the mind.

********** operation = chatRoomSearch (NO)
 field = available|1|boolean,0,1,,,,,,,0
 field = chatId|6
 field = chatRoomId|2|idLong:chatRoom,0,1,,,,,,,0
 field = chatSessionId|7|string,0,1,,,,,,,0
 field = name|3|string,0,1,,,,,,128,0
 field = noLimit|4|boolean,0,1,,,,,,,0
 field = phoneNumber|5|string,0,1,,,,,,16,0
 number = 1430
 returnType = chatRoomList
   field = available|,,Limits the search to an object with exactly the same value in this field.
   field = chatRoomId|,,Limits the search to an object with exactly the same value in this field.
   field = chatSessionId|,,Limits the search to an object with exactly the same value in this field.
   field = name|,,Limits the search to an object with exactly the same value in this field.
   field = phoneNumber|,,Limits the search to an object with exactly the same value in this field.

********** operation = chatRoomStore (NO)
 field = available|1|boolean,1,1,low,,,,,,0
 field = chatId|5
 field = chatRoomId|2|idLong:chatRoom,0,1,low,,,,,,0
 field = chatSessionId|6|string,0,1,low,,,,,,0
 field = name|3|string,1,1,low,,,,,128,0
 field = phoneNumber|4|string,1,1,low,,,,,16,0
 number = 1431
 returnType = chatRoom
   description = Stores a new or a modified chatRoomobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = available|,,whether this chat room is available
   field = chatRoomId|,,unique id for this chat room
   field = chatSessionId|,,chatSessionId
   field = name|,,name
   field = phoneNumber|,,phone number

********** operation = chatRoomUserRemove (NO)
 field = chatRoomId|2
 field = chatRoomUserId|1|idLong:user,1,1,,,,,,,0
 number = 1434
 returnType = success
   description = Removes a chatRoomUser object from the mind.

********** operation = chatRoomUserSearch (NO)
 field = chatId|3
 field = chatRoomId|1
 field = chatRoomUserId|2|idLong:user,0,1,,,,,,,0
 field = chatSessionId|4|string,0,1,,,,,,,0
 number = 1435
 returnType = chatRoomUserList
   field = chatRoomUserId|,,Limits the search to an object with exactly the same value in this field.
   field = chatSessionId|,,Limits the search to an object with exactly the same value in this field.

********** operation = chatRoomUserStore (NO)
 field = chatId|4
 field = chatRoomId|1
 field = chatRoomUserId|2|idLong:user,0,1,low,,,,,,0
 field = chatSessionId|5|string,1,1,low,,,,,,0
 field = originator|3|boolean,0,1,low,,,,,,0
 number = 1436
 returnType = chatRoomUser
   description = Stores a new or a modified chatRoomUserobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = chatRoomUserId|,,unique id for this chat room user
   field = chatSessionId|,,unique id for a particular session of chatRoom
   field = originator|,,did this user originate the chat to which he belongs

********** operation = checkParentalControlsLockRequest (YES)
 field = channel|1|struct:channel,1,1,,,,,,,0
 field = dateTime|2|dateTime,1,1,,,,,,,0
 number = 304
 returnType = checkParentalControlsLockResponse
   description = Sent to check whether or not parental controls would block the offer displayed on a given channel at a given time.  The response is a checkParentalControlsLockResponse event.
   field = channel|,,This is the channel which is being checked for parental controls violation.
   field = dateTime|,,This is the time which is being checked for parental controls violation.

********** operation = checkParentalControlsLockResponse (NO)
   description = Received in response to a checkParentalControlsLockRequest or parentalControlsVodOfferViolationCheck to indicate whether there was a violation of the parental controls policy.
   field = noPgd|,,This is true if there was a parental controls violation due to a lack of the program guide data.
   field = noRating|,,This is true if there was at least one showing which violated parental controls because the showing had no rating, and was of a showing type for which no rating is considered to be the worst possible rating. For example, if a movie has no rating, we err on the most conservative side and consider this to be a violation.
   field = violates|,,This is true if there was a violation of the current parental controls policy, false if not. violatesXXX fields can be checked to get details re the violation.
   field = violatesCost|,,This is true if there was a cost violation.
   field = violatesProgramSource|,,This is true if there was a violation due to the program source.
   field = violatesRatings|,,If there were actual ratings which violated parental controls, then this is a list of all of the ratings which violated. The client may choose to pick the "worst" or the "best" rating from this list to display to the user, or may display all of them.
   field = violatesRecording|,,This is true if the recording violated parental controls.
   field = violatesRegionRating|,,This is true if there was a region rating violation.
   field = violatesStation|,,This is true if there was a violation of a channel lock.

********** operation = checkParentalControlsPinRequest (YES)
   description = Sent to check whether or not parental controls is currently enabled, disabled, or temporarily disabled, and if enabled, to optionally check whether or not a given PIN matches the current parental controls PIN.
   field = pin|,,This is a PIN to check to see if it matches the current parental controls PIN.  If this value is not provided, then no PIN is checked, and only the state of parental controls (enabled, disabled, or temporarily disabled) is checked.
   field = unlock|,,If this is set to true and provided PIN matches the current parental controls PIN, then parental controls will be temporarily disabled.

********** operation = checkPurchaseControlPinRequest (YES)
   description = Sent to check whether or not purchase control is currently enabled, and if so, to optionally check whether or not a given PIN matches the current purchase control PIN.
   field = pin|,,This is a PIN to check to see if it matches the current purchase control PIN, if purchase control is enabled.  If this value is not provided, then no PIN is checked, and only the state of purchase controls (enabled or disabled) is checked.

********** operation = clearAndDelete (NO)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 field = clearData|2|enum:clearData,0,,,,,,,,0
 isFrozen = true
 number = 310
 returnType = success
   description = This operation is called from a body when the user invokes the Clear and Delete Everything command.  It issues a bodyReset to all partners that the body has purchased licenses from and then calls the bodyRemove operation.
   field = clearData|,,This field indicates which type(s) of data that the caller wants to clear

********** operation = clearProgramInformation (NO)
 field = clearable|1|enum:clearableType,1,,,,,,,,0
 number = 311
 returnType = success
   description = Sent to clear program information
   field = clearable|,,This is the set of clearable types to clear in this clear program information command.

********** operation = clusterDataSearch (NO)
 field = clusterId|1|int,0,1,,,,,,,0
 field = routingType|2|enum:routingType,0,1,low,,,,,,0
 number = 1240
 returnType = clusterDataList
   description = Given a clusterId, returns a clusterData. Given no parameters, return a list of clusterData with all clusters

********** operation = collectionIdSearch (NO)
 field = url|1|url,0,1,,,,,,,0
 isFrozen = true
 number = 869
 returnType = collectionIdList
   description = The pcBody needs to know what collectionId the TCD will use for foldering when it downloads a pcBody-transcoded bodyOffer. The collectionId will be either the collectionId of the sourceOfferId from which the bodyOffer derives, or will be computed from the source URL. This operation allows the pcBody to query the mind to find out what collectionId will be used.  Other search criteria may be added in the future.
   field = url|,,Limits the search to an object with exactly the same value in this field.

********** operation = collectionRemove (NO)
 field = collectionId|1|idLong:collection,0,1,,,,,,,0
 field = partnerCollectionId|2|string,0,1,,,,,,100,0
 field = partnerId|3|idInt:partner,0,1,,,,,,,0
 isFrozen = true
 number = 315
 returnType = success
   description = Remove a collection object. You must specify either the collectionId or the partnerCollectionId/partnerId pair.
   field = collectionId|,,Limits the search to an object with exactly the same value in this field.
   field = partnerCollectionId|,,Limits the search to an object with exactly the same value in this field.
   field = partnerId|,,Limits the search to an object with exactly the same value in this field.
   fieldProject = collectionId|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = partnerCollectionId|0|0|0|partner-cds
   fieldProject = partnerId|0|0|0|hme-cds,partner-cds
   project = collectionRemove|0|0|0|partner-cds

********** operation = collectionSearch (YES)
 field = addField|1|string,0,,,,,2,,,0
 field = advancedKeyword|2|boolean,0,1,,,,,,,0
 field = anchor|3|anchorDict,0,1,,,,,,,0
 field = bodyId|4|idBody:body,0,1,,,,,,,0
 field = categoryId|5|idLong:category,0,,,,,,,,0
 field = collectionId|6|idLong:collection,0,,,,,,,,0
 field = collectionType|53|enum:collectionType,0,,,,,,,,0
 field = contentId|7|idLong:content,0,,,,,,,,0
 field = correlatedCollectionId|8|idLong:collection,0,1,,,,,,,0
 field = count|9|int,0,1,,1,,,1,,0
 field = credit|10|struct:credit,0,,,,,,,,0
 field = creditKeyword|11|string,0,1,,,,,,100,0
 field = creditKeywordRole|70|enum:role,0,1,,,,,,,0
 field = descriptionKeyword|12|string,0,1,,,,,,100,0
 field = descriptionLanguage|66|string,0,1,,,,,,64,0
 field = descriptionPrefix|94|string,0,1,,,,,,100,0
 field = episodeNum|56|int,0,1,,,3,,0,,0
 field = episodic|52|boolean,0,1,,,,,,,0
 field = excludeCollectionId|55|idLong:collection,0,,,,,,,,0
 field = excludeContentId|81|idLong:content,0,,,,,,,,0
 field = excludeObjectIdAndType|72|long,0,,,,,,,,0
 field = excludePartnerId|13|idInt:partner,0,,,,,,,,0
 field = fallbackImageObjectType|93|enum:fallbackImageObjectType,0,1,,,,,,,0
 field = filterUnavailable|87|boolean,0,1,,true,,,,,0
 field = format|14|enum:format,0,1,,,,,,,0
 field = groupBy|15|string,0,,,,,,,32,0
 field = hasCorrelatedCollections|60|boolean,0,1,,,,,,,0
 field = hasImages|59|boolean,0,1,,,,,,,0
 field = hdtv|16|boolean,0,1,,,,,,,0
 field = idSetSource|86|union:idSetSource,0,1,,,3,,,,0
 field = imageRuleset|83|struct:imageRuleset,0,,,,,,,,0
 field = includeBroadband|17|boolean,0,1,,true,,,,,0
 field = includeBroadcast|18|boolean,0,1,,true,,,,,0
 field = includeCreditsInKeywordSearch|69|boolean,0,1,,false,,,,,0
 field = includeFree|19|boolean,0,1,,true,,,,,0
 field = includeOverridingCollections|67|boolean,0,1,,false,,,,,0
 field = includeOverridingContent|57|boolean,0,1,,false,,,,,0
 field = includePaid|20|boolean,0,1,,true,,,,,0
 field = includeVod|71|boolean,0,1,,true,,,,,0
 field = isAdult|90|boolean,0,1,,,,,,,0
 field = keyword|21|string,0,1,,,,,,100,0
 field = levelOfDetail|22|enum:levelOfDetail,0,1,,,,,,,0
 field = lineup|23|struct:lineup,0,,,,,,,,0
 field = maxCreateDate|61|dateTime,0,1,,,,,,,0
 field = maxMpaaRating|63|enum:mpaaRating,0,1,,,,,,,0
 field = maxStartTime|24|dateTime,0,1,,,,,,,0
 field = maxStartTimeOffset|88|int,0,1,,,,,,,0
 field = maxStrippedTitle|95|string,0,1,,,,,,,0
 field = maxThumbs|77|int,0,1,low,,7,,-3,3,0
 field = maxTvRating|64|enum:tvRating,0,1,,,,,,,0
 field = maxUpdateDate|58|dateTime,0,1,,,,,,,0
 field = mergeOverridingCollections|68|boolean,0,1,,false,,,,,0
 field = mimeSubtype|25|string,0,1,,,,,,128,0
 field = mimeTopLevelType|26|string,0,1,,,,,,128,0
 field = minCreateDate|62|dateTime,0,1,,,,,,,0
 field = minEndTime|27|dateTime,0,1,,,,,,,0
 field = minEndTimeOffset|89|int,0,1,,,,,,,0
 field = minStarRating|84|enum:starRating,0,1,,,,,,,0
 field = minStrippedTitle|96|string,0,1,,,,,,,0
 field = minThumbs|78|int,0,1,low,,7,,-3,3,0
 field = minUpdateDate|28|dateTime,0,1,,,,,,,0
 field = movieYear|54|int,0,1,,,,,1000,3000,0
 field = namespace|29|enum:namespace,0,1,,,,,,,0
 field = notCategoryId|92|idLong:category,0,,,,,,,,0
 field = note|30|string,0,,,,,,,,0
 field = objectIdAndType|73|long,0,,,,,,,,0
 field = offset|31|int,0,1,,0,,,,,0
 field = orCategoryId|80|idLong:category,0,,,,,,,,0
 field = orCredit|32|struct:credit,0,,,,,2,,,0
 field = orderBy|33|string,0,,,,,,,32,0
 field = partnerCollectionId|34|string,0,1,,,,,,100,0
 field = partnerContentId|35|string,0,1,,,,,,100,0
 field = partnerId|36|idInt:partner,0,1,,,,,,,0
 field = primaryCategoryId|65|idLong:category,0,1,,,,,,,0
 field = removeField|37|string,0,,,,,2,,,0
 field = resolveCount|74|int,0,1,,0,,,,,0
 field = resolveLevelOfDetail|75|enum:levelOfDetail,0,1,,low,,,,,0
 field = resolveOffset|76|int,0,1,,0,,,,,0
 field = responseTemplate|85|struct:responseTemplate,0,,,,,,,,0
 field = searchable|38|boolean,0,1,high,,,,,,0
 field = seasonNumber|39|int,0,1,,,,,0,,0
 field = shortTitle|40|string,0,1,,,5,,,128,0
 field = strippedTitlePrefix|41|string,0,1,,,,,,128,0
 field = subtitle|91|string,0,1,,,,,,255,0
 field = subtitleKeyword|42|string,0,1,,,,,,100,0
 field = subtitlePrefix|43|string,0,1,,,,,,100,0
 field = suggestionsOnly|82|boolean,0,1,,false,,,,,0
 field = tag|44|struct:tag,0,1,high,,,,,,0
 field = title|45|string,0,1,,,,,,128,0
 field = titleBooleanKeyword|46|string,0,1,,,,,,128,0
 field = titleKeyword|47|string,0,1,,,,,,128,0
 field = titlePrefix|48|string,0,1,,,,,,128,0
 field = unreceivedChannelsOnly|79|boolean,0,1,,false,,,,,0
 field = url|49|url,0,1,high,,,,,,0
 field = useAnchorOperation|50|boolean,0,1,,true,,,,,0
 field = useLineup|51|boolean,0,1,,,,,,,0
 fieldGroup = collectionSearchFields
 fieldGroup = contentSearchFields
 fieldGroup = filterFields
 fieldGroup = imageRulesetFields
 fieldGroup = resolveSearchFields
 fieldGroup = searchFields
 fieldGroup = strippedTitlePrefixField
 fieldGroup = thumbsFilters
 groupBy = collectionType
 isFrozen = true
 number = 316
 orderBy = collectionId
 orderBy = contentId
 orderBy = episodic
 orderBy = idSetOrder
 orderBy = partnerCollectionId
 orderBy = partnerId
 orderBy = popularityRank
 orderBy = relevance
 orderBy = starRating
 orderBy = strippedTitle
 orderBy = thumbsRating
 orderBy = title
 returnType = collectionGroupList
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = advancedKeyword|,,When searching with option=advanced, a boolean mode search is done where words starting with   are ANDed together, words starting with - are NOTd, words with * are substring matched, and words enclosed in "" are looked at as a phrase.  Currently not supported in contentSearch or collectionSearch
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = bodyId|,,Restricts the search to collections showing in the next 14 days that are available on this body.  For bodies that sync with the mind, availability is based on the list of channels that the body has sent up.  Only channels that have isReceived=true are used.  For bodies that have not synced with the mind, availability is based on the lineup retrieved from the BSM, and all channels are used.
   field = categoryId|,,If multiple categoryIds are specified, they will be ANDed together in the query
   field = collectionType|,,Limits the search to an object with exactly the same value in this field.
   field = contentId|,,Limits the search to an object with exactly the same value in this field.
   field = correlatedCollectionId|,,Restricts the search to the collection ids correlated to this collection id.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = credit|,,Currently not supported in contentSearch. If multiple credits provided, they will be ORd
   field = creditKeyword|,,Currently not supported in contentSearch or collectionSearch
   field = creditKeywordRole|,,Only applies if a creditKeyword is passed in
   field = descriptionKeyword|,,Currently not supported in contentSearch or collectionSearch
   field = descriptionLanguage|,,Limits the search to an object with exactly the same value in this field.
   field = episodeNum|3,,Limits the search to an object with exactly the same value in this field.
   field = episodic|,,constrains the result to only episodic collections if set to true and only non-episodic collections if set to false.
   field = excludeObjectIdAndType|,,An objectIdAndType from an idSequence obtained in a previous search operation, to be excluded from the result set.
   field = fallbackImageObjectType|,,If set, this object type will be used to replace the main object's image if the main object's image is not available based on the input ruleset
   field = filterUnavailable|,,If filterUnavailable is false, collectionSearch itself will not filter by bodyId/lineup. This field does not affect any of the notes.
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = hasCorrelatedCollections|,,if TRUE, constrains the result set to only those that have correlation data available. FALSE is not supported.
   field = hasImages|,,if true, only return results that have at least one image. false not supported.
   field = imageRuleset|,,one ruleset should be specified per image desired. multiple rulesets can be specified.
   field = includeBroadband|,,Include broadband collections
   field = includeBroadcast|,,Include broadcast collections
   field = includeCreditsInKeywordSearch|,,If set to true, the keyword filter will include credits in the search in addition title, subtitle and description
   field = includeFree|,,Include free collections. These would be the pgd collections and cds offers that has a price of 0.
   field = includeOverridingCollections|,,When partners wish to author their own metadata for a collection object, while maintaining the link to the broadcast collection object, they store the original collectionId in the overriddenCollectionId field of the collection object. Passing true for this flag, along with a collectionId, will result in both the collectionId and the overriddenCollectionId fields to be searched. The result is that both the collection corresponding to the collectionId and any collections overriding that collection will be returned. Passing true for this flag without passing a collectionId is illegal.
   field = includeOverridingContent|,,When partners wish to author their own metadata for a content object, while maintaining the link to the broadcast content object, they store the original contentId in the overriddenContentId field of the content object. Passing true for this flag, along with a contentId, will result in both the contentId and the overriddenContentId fields to be searched. The result is that both the content corresponding to the contentId and any contents overriding that content will be returned. Passing true for this flag without passing a contentId is illegal.
   field = includePaid|,,Include paid collections. These would be cds offers with price greater than 0.
   field = includeVod|,,Include vod collections
   field = isAdult|,,Limits the search to an object with exactly the same value in this field.
   field = keyword|,,The keyword field is used to search through title, subtitle and description to find program matches.  The results are ordered in a way that makes sense.  Wildcards and double-quotes are supported.  Currently not supported in contentSearch or collectionSearch
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = lineup|,,Restricts the search to collections showing in the next 14 days on a channel in the named lineup.
   field = maxMpaaRating|,,filter out results whose mpaaRatings or tvRatings are "worse" than this mpaaRating.
   field = maxStartTime|,,Return collections that show before maxStartTime in the next 14 days of PGD data.
   field = maxStartTimeOffset|,,maxStartTime N seconds in the future. Useful in storing as searchRequest
   field = maxStrippedTitle|,,The max (based on implementation's collation rules ) of strippedTitle range. Note that the boundary condition is exclusive so that setting  maxStrippedTitle='b' will include results whose striped title starts with  letter 'a' but not those whose strippedTitle starts with 'b'.
   field = maxThumbs|7,,maximum thumb rating, inclusive (less then or equal to).
   field = maxTvRating|,,filter out results whose mpaaRatings or tvRatings are "worse" than this tvRating.
   field = mergeOverridingCollections|,,When partners wish to author their own metadata for a collection object, while maintaining the link to the broadcast collection object, they store the original collectionId in the overriddenCollectionId field of the collection object. Passing true for this flag, will result in only one collection being returned for any set of a collection and overriding collections. When a partnerId is specified in the request, overriding collections with the matching partnerId are returned, but the collections that they override are not. When no partnerId is specified, the overridden collection is returned, and the overriding collections are not.
   field = mimeSubtype|,,not implemented
   field = mimeTopLevelType|,,not implemented
   field = minEndTime|,,Returns collections that show after minEndTime in the next 14 days of PGD data.
   field = minEndTimeOffset|,,minEndTime N seconds in the future. Useful in storing as searchRequest
   field = minStrippedTitle|,,The min (based on implementation's collation rules ) of strippedTitle range. Note that the boundary condition is inclusive so that setting  minStrippedTitle='b' will include results whose striped title starts with  letter 'b'.
   field = minThumbs|7,,minimum thumb rating, inclusive (greater than or equal to).
   field = movieYear|,,Limits the search to an object with exactly the same value in this field.
   field = namespace|,,Which namespace to search in
   field = notCategoryId|,,Filter out results that contain any of the notCategoryIds present in the request.
   field = note|,,A request for the results to be annotated.
   field = objectIdAndType|,,Limits the search to an object with exactly the same value in this field.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orCategoryId|,,If multiple categoryIds are specified, they will be ORed together in the query
   field = orCredit|,2,Put this credit in an OR with other orCredits.  Currently not supported in contentSearch or collectionSearch
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = partnerCollectionId|,,Limits the search to an object with exactly the same value in this field.
   field = partnerContentId|,,Limits the search to an object with exactly the same value in this field.
   field = partnerId|,,Limits the search to an object with exactly the same value in this field.
   field = primaryCategoryId|,,restricts search to collections having belonging to this category, with a category displayRank of zero.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = resolveCount|,,If a format of (string)idSequence is specified, the count of objectIds that should be resolved into objects. Ignored unless format = (string)idSequence.
   field = resolveLevelOfDetail|,,If a format of (string)idSequence is specified, the levelOfDetail at which the objects should be resolved.  Ignored unless resolveCount > 0 and format = (string)idSequence.
   field = resolveOffset|,,If a format of (string)idSequence is specified, the offset into the objectId list that should be resolved into objects. Ignored unless resolveCount > 0 and format = (string)idSequence.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = searchable|,,Limits the search to an object with exactly the same value in this field.
   field = seasonNumber|,,Limits the search to an object with exactly the same value in this field.
   field = shortTitle|5,,Limits the search to an object with exactly the same value in this field.
   field = strippedTitlePrefix|,,Perform a prefix search against the strippedTitle field (the field stripped of leading articles and symbols).
   field = subtitle|,,Limits the search to an object with exactly the same value in this field.
   field = subtitleKeyword|,,Currently not supported in contentSearch or collectionSearch
   field = suggestionsOnly|,,when true, restrict results to those that are within the idSet produced by the suggestions engine. required a bodyId if true.
   field = tag|,,Limits the search to an object with exactly the same value in this field.
   field = title|,,Limits the search to an object with exactly the same value in this field.
   field = titleBooleanKeyword|,,Perform a boolean search of the given string against the title.
   field = unreceivedChannelsOnly|,,if TRUE, constrain the result set to unreceived channels for the bodyId. if FALSE, search for both received channels and unreceived channels.
   field = url|,,Limits the search to an object with exactly the same value in this field.
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   field = useLineup|,,forces query to use headend and lineup instead of custom channel list.
   fieldProject = advancedKeyword|0|0|0|partner-schedule
   fieldProject = categoryId|0|0|0|partner-schedule
   fieldProject = collectionId|0|0|0|partner-schedule
   fieldProject = contentId|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = count|0|0|0|all
   fieldProject = credit|0|0|0|partner-schedule
   fieldProject = creditKeyword|0|0|0|partner-schedule
   fieldProject = creditKeywordRole|0|0|0|partner-schedule
   fieldProject = descriptionKeyword|0|0|0|partner-schedule
   fieldProject = descriptionLanguage|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = episodeNum|0|3|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = episodic|0|0|0|partner-cds
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = includeCreditsInKeywordSearch|0|0|0|partner-schedule
   fieldProject = keyword|0|0|0|partner-schedule
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = movieYear|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = namespace|0|0|0|partner-schedule,partner-cds,partner-subscribe
   fieldProject = offset|0|0|0|all
   fieldProject = orCategoryId|0|0|0|partner-schedule
   fieldProject = orderBy|0|0|0|all
   fieldProject = partnerCollectionId|0|0|0|partner-cds
   fieldProject = partnerContentId|0|0|0|partner-cds
   fieldProject = partnerId|0|0|0|hme-cds,partner-cds
   fieldProject = responseTemplate|0|0|0|all
   fieldProject = searchable|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = seasonNumber|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = strippedTitlePrefix|0|0|0|partner-cds
   fieldProject = subtitle|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = subtitleKeyword|0|0|0|partner-schedule
   fieldProject = title|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = titleKeyword|0|0|0|partner-schedule,partner-cds,partner-subscribe
   fieldProject = titlePrefix|0|0|0|partner-schedule,partner-cds,partner-subscribe
   project = collectionSearch|0|0|0|partner-cds

********** operation = collectionStore (NO)
 field = advisory|1|struct:advisory,0,,high,,,2,,,0
 field = autoOverriddenCollectionId|38|idLong:collection,0,1,low,,,8,,,0
 field = availableCorrelatedCollectionForCollectionId|46|struct:collection,0,,low,,,7,,,1
 field = broadbandOfferGroupForCollectionId|34|struct:offerGroup,0,,low,,,7,,,1
 field = broadbandOfferGroupForContentId|44|struct:offerGroup,0,,low,,,7,,,1
 field = broadcastOfferGroupForCollectionId|35|struct:offerGroup,0,,low,,,7,,,1
 field = broadcastOfferGroupForContentId|45|struct:offerGroup,0,,low,,,7,,,1
 field = category|2|struct:category,0,,high,,,,,,0
 field = cdsOfferForCollectionId|3|struct:offer,0,,low,,,7,,,1
 field = checksum|43|string,0,1,low,,,,,64,0
 field = collectionId|4|idLong:collection,0,1,low,,,,,,0
 field = collectionType|5|enum:collectionType,0,1,low,,,,,,0
 field = communityRatingForCollectionId|28|struct:communityRating,0,1,low,,,7,,,1
 field = correlatedCollectionForCollectionId|6|struct:collection,0,,low,,,7,,,1
 field = credit|7|struct:credit,0,,high,,,7,,,0
 field = description|8|string,0,1,medium,,,,,4096,0
 field = descriptionLanguage|37|string,0,1,medium,,,,,64,0
 field = episodic|9|boolean,0,1,low,,,,,,0
 field = hasBroadbandOffers|10|boolean,0,1,low,,,7,,,1
 field = hasBroadcastOffers|11|boolean,0,1,low,,,7,,,1
 field = hasThreeDOffers|52|boolean,0,1,medium,,,7,,,0
 field = hdtv|42|boolean,0,1,medium,,,7,,,0
 field = image|27|struct:image,0,,medium,,,,,,0
 field = imageUrl|12|imageUrl,0,1,medium,,,8,,,0
 field = internalCollectionId|47|idLong:collection,0,1,high,,,,,,0
 field = internalCollectionIdOrigin|48|enum:internalIdOrigin,0,1,high,,,,,,0
 field = internalRating|49|struct:internalRating,0,,low,,,,,,0
 field = isThreeD|50
 field = mixApplicationInfoForCollectionId|30|struct:mixApplicationInfo,0,,low,,,7,,,1
 field = mixForParentMixId|31|struct:mix,0,1,high,,,7,,,1
 field = mixForRootMixId|32|struct:mix,0,1,high,,,7,,,1
 field = mixForSubscribableMixId|33|struct:mix,0,,high,,,7,,,1
 field = movieYear|13|int,0,1,low,,,7,1000,3000,0
 field = mpaaRating|14|enum:mpaaRating,0,1,high,,,7,,,0
 field = overriddenCollectionId|39|idLong:collection,0,1,low,,,8,,,0
 field = partnerCollectionId|15|string,0,1,low,,,,,100,0
 field = partnerId|16|idInt:partner,0,1,low,,,,,,0
 field = partnerInfo|29|struct:partnerInfo,0,1,high,,,7,,,1
 field = personForPersonId|41|struct:person,0,1,low,,,7,,,1
 field = popularityRank|26|int,0,1,low,,,7,,,0
 field = rating|17|struct:rating,0,,high,,,2,,,0|union:typedRating,0,,high,,7,7,,,0
 field = searchable|18|boolean,0,1,high,,,,,,0
 field = shortTitle|19|string,0,1,low,,5,7,,128,0
 field = showCard|20|struct:showCard,0,1,low,,,7,,,1
 field = starRating|21|enum:starRating,0,1,high,,,7,,,0
 field = tag|22|struct:tag,0,,high,,,,,,0
 field = threeD|51
 field = thumbsRating|40|int,0,1,high,,,7,,,0
 field = title|23|string,0,1,low,,,,,128,2
 field = tvRating|36|enum:tvRating,0,1,medium,,,7,,,0
 field = url|24|url,0,1,high,,,,,,0
 field = userContentForCollectionId|25|struct:userContent,0,1,low,,,7,,,1
 isFrozen = true
 number = 317
 returnType = collection
   description = Stores a new or a modified collectionobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = advisory|,2,Single catch-all advisory for offers/content/collection. We'll fill it in with as much detail as we have depending on the object type. OBSOLETE: Please do not use this. Use the tvAdvisory enum in the offer object instead. Contact us if tvAdvisory does not solve your issue.
   field = autoOverriddenCollectionId|,8,If this service has determined that this collection overrides another, this field is used to hold the original collectionId. If overriddenCollectionId is set, this field is ignored.
   field = broadbandOfferGroupForContentId|,7,XXX: This should be added to contentFields instead; however NPE would occur in MindObjectGenerator if defined that way.
   field = broadcastOfferGroupForContentId|,7,XXX: This should be added to contentFields instead; however NPE would occur in MindObjectGenerator if defined that way.
   field = category|,,Single catch-all category for offers/content/collection. We'll fill it in with as much detail as we have depending on the object type
   field = checksum|,,This field stores the checksum of all of the metadata attributes of this object.
   field = collectionId|,,The globally unique ID for a collection. Collection objects retrieved from the mind will always have a collection id.  Collections that are created by other parties and are included in content or recording objects may not have collection ids.
   field = communityRatingForCollectionId|,7,Set to the community rating of the collectionId associated.
   field = description|,,A description of the content.
   field = descriptionLanguage|,,The language that the description is written in
   field = episodic|,,This flag defines whether or not a series is episodic. If it is a 1 or not set it is assumed to be an episodic series. If it is a 0 then it is a non-episodic series such as a movie or special.
   field = hasBroadbandOffers|,7,Set to true if at least one broadband offer exists
   field = hasBroadcastOffers|,7,Set to true if at least one broadband offer exists
   field = hasThreeDOffers|,7,Set to true if at least one threeD offer exists
   field = image|,,Image metadata for this collection
   field = imageUrl|,8,Image URL associated with this collection
   field = internalCollectionId|,,Id field used internally to dedupe collections. It stores the now obsolete overriddenCollectionId or autoOverriddenCollectionId if one of them is set, or collectionId otherwise;
   field = internalCollectionIdOrigin|,,Origin of the internalCollectionId, which is used  to dedupe collections that point to the same pgd collection.
   field = mixForParentMixId|,7,container for the parent mix, when the mixForParentMixId note is specified.
   field = mixForRootMixId|,7,container for the root mix, when the mixForRootMixId note is specified.
   field = mixForSubscribableMixId|,7,container for a subscribable mix, when the mixForSubscribableMixId note is specified.
   field = movieYear|,7,The year the movie came out
   field = overriddenCollectionId|,8,If this collection overrides another, use this field to hold the original collectionId. This is used when partners wish to author their own metadata for a collection object, while maintaining the link to the broadcast collection object, for searches.
   field = partnerCollectionId|,,The partner's own collection Id.
   field = partnerId|,,Id of the partner that created the object.
   field = partnerInfo|,7,a container for the partnerInfoForPartnerId annotation
   field = popularityRank|,7,This field represents an arbitrary popularity rank associated with this item.  It currently only applies to historic broadcast collectionSearch and is calculated based on seasonPassRanking
   field = rating|,2,The ratings of this collection. OBSOLETE: Please do not use this. Use the mpaaRating and starRating enums in the content object instead. Contact us if that does not solve your issue.|7,7,Typed rating.
   field = searchable|,,This flag defines whether or not a collection is searchable. If 1, a collection is searchable. If 0, a collection is not searchable. Default to 0 (not searchable).
   field = shortTitle|5,7,The alternate (short) title for this collection, as defined by the EPG data provider. If this element is not present, the shortTitle can be assumed to be identical to the title.
   field = showCard|,7,showCard for this collection. This is a note.
   field = thumbsRating|,7,Note that this column is returned (thus can be ordered by) only if a thumbs filter (minThumbs and/or maxThumbs) is specified in the mind query input.
   field = title|,,The primary title by which this collection is known.
   field = url|,,A URL associated with the collection. Could be the website for the show, or could be the RSS-feed for a web video collection.
   fieldProject = availableCorrelatedCollectionForCollectionId|0|0|7|partner-schedule
   fieldProject = category|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = collectionId|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = correlatedCollectionForCollectionId|0|0|7|partner-schedule
   fieldProject = credit|0|0|7|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = description|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = descriptionLanguage|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = episodic|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = imageUrl|0|0|8|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = movieYear|0|0|7|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = overriddenCollectionId|0|0|8|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = partnerCollectionId|0|0|0|partner-cds
   fieldProject = partnerId|0|0|0|hme-cds,partner-cds
   fieldProject = personForPersonId|0|0|7|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = searchable|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = title|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = tvRating|0|0|7|partner-schedule,hme-cds,partner-cds,partner-subscribe
   project = collectionStore|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe

********** operation = communityRatingGet (NO)
 field = collectionId|1|idLong:collection,1,,,,,,,,0
 isFrozen = true
 number = 978
 returnType = communityRating
   field = collectionId|,,One or more collectionIds for which to get the community Thumbs rating.

********** operation = connectionConfigurationSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = code|3|string,0,1,,,,,,,0
 field = count|4|int,0,1,,1,,,1,,0
 field = default|5|boolean,0,1,,,,,,,0
 field = format|6|enum:format,0,1,,,,,,,0
 field = groupBy|7|string,0,,,,,,,32,0
 field = host|8|string,0,1,,,,,,,0
 field = levelOfDetail|9|enum:levelOfDetail,0,1,,,,,,,0
 field = name|10|string,0,1,,,,,,,0
 field = note|11|string,0,,,,,,,,0
 field = offset|12|int,0,1,,0,,,,,0
 field = orderBy|13|string,0,,,,,,,32,0
 field = removeField|14|string,0,,,,,2,,,0
 field = responseTemplate|15|struct:responseTemplate,0,,,,,,,,0
 field = selected|16|boolean,0,1,,,,,,,0
 field = useAnchorOperation|17|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 number = 1720
 returnType = connectionConfigurationList
   description = Search for available connection configurations.  Note that the search parameters have not yet been implemented.  Searches will currently always return all available connection configurations.
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = code|,,Limits the search to an object with exactly the same value in this field.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = default|,,Limits the search to an object with exactly the same value in this field.
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = host|,,Limits the search to an object with exactly the same value in this field.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = name|,,Limits the search to an object with exactly the same value in this field.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = selected|,,Limits the search to an object with exactly the same value in this field.
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = connectionConfigurationSelect (NO)
 field = code|1|string,0,1,,,,,,,0
 number = 1721
 returnType = success
   description = Selects a connection configuration.
   field = code|,,This is the code of the connection configuration to select.  This should be something that can be entered easily by the UI.  If no code is provided, the default connection configuration will be used.

********** operation = contentRemove (NO)
 field = contentId|1|idLong:content,0,1,,,,,,,0
 field = partnerContentId|2|string,0,1,,,,,,100,0
 field = partnerId|3|idInt:partner,0,1,,,,,,,0
 isFrozen = true
 number = 323
 returnType = success
   description = Remove a content object.  You must specify either the contentId or the partnerContentId/partnerId pair.
   field = contentId|,,Limits the search to an object with exactly the same value in this field.
   field = partnerContentId|,,Limits the search to an object with exactly the same value in this field.
   field = partnerId|,,Limits the search to an object with exactly the same value in this field.
   fieldProject = contentId|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = partnerContentId|0|0|0|partner-cds
   fieldProject = partnerId|0|0|0|hme-cds,partner-cds
   project = contentRemove|0|0|0|partner-cds

********** operation = contentSearch (YES)
 field = addField|1|string,0,,,,,2,,,0
 field = advancedKeyword|2|boolean,0,1,,,,,,,0
 field = anchor|3|anchorDict,0,1,,,,,,,0
 field = bodyId|43|idBody:body,0,1,,,,,,,0
 field = categoryId|4|idLong:category,0,,,,,,,,0
 field = collectionId|5|idLong:collection,0,,,,,,,,0
 field = collectionType|41|enum:collectionType,0,,,,,,,,0
 field = contentId|6|idLong:content,0,,,,,,,,0
 field = correlatedCollectionId|7|idLong:collection,0,1,,,,,,,0
 field = count|8|int,0,1,,1,,,1,,0
 field = credit|9|struct:credit,0,,,,,,,,0
 field = creditKeyword|10|string,0,1,,,,,,100,0
 field = creditKeywordRole|58|enum:role,0,1,,,,,,,0
 field = descriptionBooleanKeyword|73|string,0,1,,,,,,128,0
 field = descriptionKeyword|11|string,0,1,,,,,,100,0
 field = descriptionLanguage|55|string,0,1,,,,,,64,0
 field = descriptionPrefix|74|string,0,1,,,,,,100,0
 field = episodeNum|45|int,0,1,,,3,,0,,0
 field = episodic|40|boolean,0,1,,,,,,,0
 field = excludeCollectionId|44|idLong:collection,0,,,,,,,,0
 field = excludeContentId|60|idLong:content,0,,,,,,,,0
 field = excludeObjectIdAndType|83|long,0,,,,,,,,0
 field = excludePartnerId|50|idInt:partner,0,,,,,,,,0
 field = fallbackImageObjectType|72|enum:fallbackImageObjectType,0,1,,,,,,,0
 field = filterUnavailableContent|67|boolean,0,1,,false,,,,,0
 field = format|12|enum:format,0,1,,,,,,,0
 field = groupBy|13|string,0,,,,,,,32,0
 field = hasCorrelatedCollections|49|boolean,0,1,,,,,,,0
 field = hasImages|48|boolean,0,1,,,,,,,0
 field = hdtv|75|boolean,0,1,,,,,,,0
 field = idSetSource|65|union:idSetSource,0,1,,,3,,,,0
 field = imageRuleset|62|struct:imageRuleset,0,,,,,,,,0
 field = includeBroadband|76|boolean,0,1,,true,,,,,0
 field = includeBroadcast|77|boolean,0,1,,true,,,,,0
 field = includeCreditsInKeywordSearch|57|boolean,0,1,,false,,,,,0
 field = includeFree|78|boolean,0,1,,true,,,,,0
 field = includeOverridingCollections|56|boolean,0,1,,false,,,,,0
 field = includeOverridingContent|46|boolean,0,1,,false,,,,,0
 field = includePaid|79|boolean,0,1,,true,,,,,0
 field = includeVod|80|boolean,0,1,,true,,,,,0
 field = keyword|14|string,0,1,,,,,,100,0
 field = levelOfDetail|15|enum:levelOfDetail,0,1,,,,,,,0
 field = maxCreateDate|51|dateTime,0,1,,,,,,,0
 field = maxMpaaRating|53|enum:mpaaRating,0,1,,,,,,,0
 field = maxStartTime|68|dateTime,0,1,,,,,,,0
 field = maxTvRating|54|enum:tvRating,0,1,,,,,,,0
 field = maxUpdateDate|47|dateTime,0,1,,,,,,,0
 field = mergeOverridingContent|66|boolean,0,1,,false,,,,,0
 field = mimeSubtype|16|string,0,1,,,,,,128,0
 field = mimeTopLevelType|17|string,0,1,,,,,,128,0
 field = minCreateDate|52|dateTime,0,1,,,,,,,0
 field = minEndTime|69|dateTime,0,1,,,,,,,0
 field = minStarRating|63
 field = minUpdateDate|18|dateTime,0,1,,,,,,,0
 field = movieYear|42|int,0,1,,,,,1000,3000,0
 field = namespace|19|enum:namespace,0,1,,,,,,,0
 field = notCategoryId|71|idLong:category,0,,,,,,,,0
 field = note|20|string,0,,,,,,,,0
 field = objectIdAndType|84|long,0,,,,,,,,0
 field = offset|21|int,0,1,,0,,,,,0
 field = orCredit|22|struct:credit,0,,,,,2,,,0
 field = orderBy|23|string,0,,,,,,,32,0
 field = originalAirYear|61|int,0,1,,,,,,,0
 field = partnerCollectionId|24|string,0,1,,,,,,100,0
 field = partnerContentId|25|string,0,1,,,,,,100,0
 field = partnerId|26|idInt:partner,0,1,,,,,,,0
 field = removeField|27|string,0,,,,,2,,,0
 field = resolveCount|85|int,0,1,,0,,,,,0
 field = resolveLevelOfDetail|86|enum:levelOfDetail,0,1,,low,,,,,0
 field = resolveOffset|87|int,0,1,,0,,,,,0
 field = responseTemplate|64|struct:responseTemplate,0,,,,,,,,0
 field = searchable|28|boolean,0,1,high,,,,,,0
 field = seasonNumber|29|int,0,1,,,,,0,,0
 field = shortTitle|30|string,0,1,,,5,,,128,0
 field = strippedDescriptionPrefix|81|string,0,1,,,,,,128,0
 field = strippedSubtitlePrefix|31|string,0,1,,,,,,128,0
 field = strippedTitlePrefix|32|string,0,1,,,,,,128,0
 field = subtitle|70|string,0,1,,,,,,255,0
 field = subtitleBooleanKeyword|82|string,0,1,,,,,,128,0
 field = subtitleKeyword|33|string,0,1,,,,,,100,0
 field = subtitlePrefix|34|string,0,1,,,,,,100,0
 field = title|35|string,0,1,,,,,,128,0
 field = titleKeyword|36|string,0,1,,,,,,128,0
 field = titlePrefix|37|string,0,1,,,,,,128,0
 field = unreceivedChannelsOnly|59|boolean,0,1,,false,,,,,0
 field = url|38|url,0,1,high,,,,,,0
 field = useAnchorOperation|39|boolean,0,1,,true,,,,,0
 fieldGroup = collectionSearchFields
 fieldGroup = contentSearchFields
 fieldGroup = filterFields
 fieldGroup = imageRulesetFields
 fieldGroup = resolveSearchFields
 fieldGroup = searchFields
 fieldGroup = strippedDescriptionPrefixField
 fieldGroup = strippedSubtitlePrefixField
 fieldGroup = strippedTitlePrefixField
 groupBy = collectionId
 groupBy = collectionType
 groupBy = originalAirYear
 groupBy = seasonNumber
 isFrozen = true
 number = 324
 orderBy = collectionId
 orderBy = contentId
 orderBy = episodeNum
 orderBy = episodic
 orderBy = movieYear
 orderBy = originalAirYear
 orderBy = originalAirdate
 orderBy = partnerContentId
 orderBy = partnerId
 orderBy = releaseDate
 orderBy = seasonNumber
 orderBy = strippedSubtitle
 orderBy = strippedTitle
 orderBy = subtitle
 orderBy = title
 returnType = contentGroupList
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = advancedKeyword|,,When searching with option=advanced, a boolean mode search is done where words starting with   are ANDed together, words starting with - are NOTd, words with * are substring matched, and words enclosed in "" are looked at as a phrase.  Currently not supported in contentSearch or collectionSearch
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = bodyId|,,If recordingForContentId notes is desired, bodyId must be filled in to allow recordingSearch to search by bodyId and contentId. bodyId is not in contentSearchFields because the field group is also used by collectionSearch which inherits bodyId from another field group.
   field = categoryId|,,If multiple categoryIds are specified, they will be ANDed together in the query
   field = collectionType|,,Limits the search to an object with exactly the same value in this field.
   field = contentId|,,Limits the search to an object with exactly the same value in this field.
   field = correlatedCollectionId|,,Restricts the search to the collection ids correlated to this collection id.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = credit|,,Currently not supported in contentSearch. If multiple credits provided, they will be ORd
   field = creditKeyword|,,Currently not supported in contentSearch or collectionSearch
   field = creditKeywordRole|,,Only applies if a creditKeyword is passed in
   field = descriptionBooleanKeyword|,,Perform a boolean search of the given string against the description.
   field = descriptionKeyword|,,Currently not supported in contentSearch or collectionSearch
   field = descriptionLanguage|,,Limits the search to an object with exactly the same value in this field.
   field = episodeNum|3,,Limits the search to an object with exactly the same value in this field.
   field = episodic|,,constrains the result to only episodic collections if set to true and only non-episodic collections if set to false.
   field = excludeObjectIdAndType|,,An objectIdAndType from an idSequence obtained in a previous search operation, to be excluded from the result set.
   field = fallbackImageObjectType|,,If set, this object type will be used to replace the main object's image if the main object's image is not available based on the input ruleset
   field = filterUnavailableContent|,,If set to false, this operation will not filter by bodyId/lineup/offer availability. This field does not affect any of the notes. Note that this field has to be defined for contentSearch in addition to filterUnavailable field defined in collectionSearch because of the schema generator code limitation.
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = hasCorrelatedCollections|,,if TRUE, constrains the result set to only those that have correlation data available. FALSE is not supported.
   field = hasImages|,,If set to TRUE, limits returned Content to only that which has an associated image, or whose collection has an associated image.
   field = imageRuleset|,,one ruleset should be specified per image desired. multiple rulesets can be specified.
   field = includeBroadband|,,Include broadband collections
   field = includeBroadcast|,,Include broadcast collections
   field = includeCreditsInKeywordSearch|,,If set to true, the keyword filter will include credits in the search in addition title, subtitle and description
   field = includeFree|,,Include free collections. These would be the pgd collections and cds offers that has a price of 0.
   field = includeOverridingCollections|,,When partners wish to author their own metadata for a collection object, while maintaining the link to the broadcast collection object, they store the original collectionId in the overriddenCollectionId field of the collection object. Passing true for this flag, along with a collectionId, will result in both the collectionId and the overriddenCollectionId fields to be searched. The result is that both the collection corresponding to the collectionId and any collections overriding that collection will be returned. Passing true for this flag without passing a collectionId is illegal.
   field = includeOverridingContent|,,When partners wish to author their own metadata for a content object, while maintaining the link to the broadcast content object, they store the original contentId in the overriddenContentId field of the content object. Passing true for this flag, along with a contentId, will result in both the contentId and the overriddenContentId fields to be searched. The result is that both the content corresponding to the contentId and any contents overriding that content will be returned. Passing true for this flag without passing a contentId is illegal.
   field = includePaid|,,Include paid collections. These would be cds offers with price greater than 0.
   field = includeVod|,,Include vod collections
   field = keyword|,,The keyword field is used to search through title, subtitle and description to find program matches.  The results are ordered in a way that makes sense.  Wildcards and double-quotes are supported.  Currently not supported in contentSearch or collectionSearch
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = maxMpaaRating|,,filter out results whose mpaaRatings or tvRatings are "worse" than this mpaaRating.
   field = maxStartTime|,,For refserver (broadcast) content only
   field = maxTvRating|,,filter out results whose mpaaRatings or tvRatings are "worse" than this tvRating.
   field = mergeOverridingContent|,,When partners wish to author their own metadata for a content object, while maintaining the link to the broadcast content object, they store the original contentId in the overriddenContentId field of the content object. Passing true for this flag, will result in only one content being returned for any set of a content and overriding content. When a partnerId is specified in the request, overriding content with the matching partnerId are returned, but the content that they override are not. When no partnerId is specified, the overridden content is returned, and the overriding content are not.
   field = mimeSubtype|,,not implemented
   field = mimeTopLevelType|,,not implemented
   field = minEndTime|,,For refserver (broadcast) content only
   field = movieYear|,,Limits the search to an object with exactly the same value in this field.
   field = namespace|,,Which namespace to search in
   field = notCategoryId|,,Filter out results that contain any of the notCategoryIds present in the request.
   field = note|,,A request for the results to be annotated.
   field = objectIdAndType|,,Limits the search to an object with exactly the same value in this field.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orCredit|,2,Put this credit in an OR with other orCredits.  Currently not supported in contentSearch or collectionSearch
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = originalAirYear|,,Limits the search to an object with exactly the same value in this field.
   field = partnerCollectionId|,,Limits the search to an object with exactly the same value in this field.
   field = partnerContentId|,,Limits the search to an object with exactly the same value in this field.
   field = partnerId|,,Limits the search to an object with exactly the same value in this field.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = resolveCount|,,If a format of (string)idSequence is specified, the count of objectIds that should be resolved into objects. Ignored unless format = (string)idSequence.
   field = resolveLevelOfDetail|,,If a format of (string)idSequence is specified, the levelOfDetail at which the objects should be resolved.  Ignored unless resolveCount > 0 and format = (string)idSequence.
   field = resolveOffset|,,If a format of (string)idSequence is specified, the offset into the objectId list that should be resolved into objects. Ignored unless resolveCount > 0 and format = (string)idSequence.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = searchable|,,Limits the search to an object with exactly the same value in this field.
   field = seasonNumber|,,Limits the search to an object with exactly the same value in this field.
   field = shortTitle|5,,Limits the search to an object with exactly the same value in this field.
   field = strippedDescriptionPrefix|,,Perform a prefix search against the strippedDescription field (the field stripped of leading articles and symbols).
   field = strippedSubtitlePrefix|,,Perform a prefix search against the strippedSubtitle field (the field stripped of leading articles and symbols).
   field = strippedTitlePrefix|,,Perform a prefix search against the strippedTitle field (the field stripped of leading articles and symbols).
   field = subtitle|,,Limits the search to an object with exactly the same value in this field.
   field = subtitleBooleanKeyword|,,Perform a boolean search of the given string against the subtitle.
   field = subtitleKeyword|,,Currently not supported in contentSearch or collectionSearch
   field = title|,,Limits the search to an object with exactly the same value in this field.
   field = unreceivedChannelsOnly|,,if TRUE, constrain the result set to unreceived channels for the bodyId. if FALSE, search for both received channels and unreceived channels.
   field = url|,,Limits the search to an object with exactly the same value in this field.
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = advancedKeyword|0|0|0|partner-schedule
   fieldProject = categoryId|0|0|0|partner-schedule
   fieldProject = collectionId|0|0|0|partner-schedule
   fieldProject = contentId|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = count|0|0|0|all
   fieldProject = credit|0|0|0|partner-schedule
   fieldProject = creditKeyword|0|0|0|partner-schedule
   fieldProject = creditKeywordRole|0|0|0|partner-schedule
   fieldProject = descriptionKeyword|0|0|0|partner-schedule
   fieldProject = descriptionLanguage|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = episodeNum|0|3|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = episodic|0|0|0|partner-cds
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = includeCreditsInKeywordSearch|0|0|0|partner-schedule
   fieldProject = keyword|0|0|0|partner-schedule
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = movieYear|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = namespace|0|0|0|partner-schedule,partner-cds,partner-subscribe
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = partnerCollectionId|0|0|0|partner-cds
   fieldProject = partnerContentId|0|0|0|partner-cds
   fieldProject = partnerId|0|0|0|hme-cds,partner-cds
   fieldProject = responseTemplate|0|0|0|all
   fieldProject = searchable|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = seasonNumber|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = strippedDescriptionPrefix|0|0|0|partner-cds
   fieldProject = strippedSubtitlePrefix|0|0|0|partner-cds
   fieldProject = strippedTitlePrefix|0|0|0|partner-cds
   fieldProject = subtitle|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = subtitleKeyword|0|0|0|partner-schedule
   fieldProject = title|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = titleKeyword|0|0|0|partner-schedule,partner-cds,partner-subscribe
   fieldProject = titlePrefix|0|0|0|partner-schedule,partner-cds,partner-subscribe
   project = contentSearch|0|0|0|partner-cds

********** operation = contentStore (NO)
 field = 3D|74
 field = advisory|1|struct:advisory,0,,high,,,2,,,0
 field = audioDuration|2|int,0,1,low,,,2,0,,0
 field = autoOverriddenCollectionId|57|idLong:collection,0,1,low,,,8,,,0
 field = autoOverriddenContentId|51|idLong:content,0,1,low,,,8,,,0
 field = availableCorrelatedCollectionForCollectionId|66|struct:collection,0,,low,,,7,,,1
 field = bookmarkPosition|3|int,0,1,medium,,,,0,,0
 field = broadbandOfferGroupForCollectionId|48|struct:offerGroup,0,,low,,,7,,,1
 field = broadbandOfferGroupForContentId|52|struct:offerGroup,0,,low,,,7,,,1
 field = broadcastOfferGroupForCollectionId|49|struct:offerGroup,0,,low,,,7,,,1
 field = broadcastOfferGroupForContentId|53|struct:offerGroup,0,,low,,,7,,,1
 field = captioning|4|boolean,0,1,medium,,,2,,,0
 field = category|5|struct:category,0,,high,,,,,,0
 field = cdsOfferForCollectionId|6|struct:offer,0,,low,,,7,,,1
 field = checksum|60|string,0,1,low,,,,,64,0
 field = collectionDescription|67|string,0,1,medium,,,,,,0
 field = collectionId|7|idLong:collection,0,1,low,,,,,,0
 field = collectionTitle|65|string,0,1,medium,,,,,128,2
 field = collectionType|8|enum:collectionType,0,1,low,,,,,,0
 field = colorType|9|enum:colorType,0,1,medium,,,,,,0
 field = contentId|10|idLong:content,0,1,low,,,,,,0
 field = contentType|11|enum:contentType,0,1,low,video,,,,,0
 field = correlatedCollectionForCollectionId|12|struct:collection,0,,low,,,7,,,1
 field = credit|13|struct:credit,0,,high,,,,,,0
 field = description|14|string,0,1,medium,,,,,4096,0
 field = descriptionLanguage|56|string,0,1,medium,,,,,64,0
 field = dolbyDigital|15|boolean,0,1,medium,,,,,,0
 field = duration|16|int,0,1,low,,,2,0,,0|int,0,1,low,,3,,0,,0
 field = episodeNum|17|int,0,,low,,3,,0,,0
 field = episodic|18|boolean,0,1,low,,,,,,0
 field = hasBroadbandOffers|62|boolean,0,1,low,,,7,,,1
 field = hasBroadcastOffers|63|boolean,0,1,low,,,7,,,1
 field = hasThreeDOffers|77|boolean,0,1,medium,,,7,,,0
 field = hdtv|64|boolean,0,1,medium,,,7,,,0
 field = height|19|int,0,1,low,,,,0,,0
 field = image|41|struct:image,0,,medium,,,,,,0
 field = imageUrl|20|imageUrl,0,1,medium,,,8,,,0
 field = internalCollectionId|69|idLong:collection,0,1,high,,,,,,0
 field = internalCollectionIdOrigin|70|enum:internalIdOrigin,0,1,high,,,,,,0
 field = internalContentId|71|idLong:content,0,1,high,,,,,,0
 field = internalContentIdOrigin|72|enum:internalIdOrigin,0,1,high,,,,,,0
 field = internalRating|73|struct:internalRating,0,,low,,,,,,0
 field = isEpisode|21|boolean,0,1,low,,,,,,0
 field = isThreeD|76
 field = matchedField|61|enum:matchedField,0,1,low,,,,,,0
 field = mixApplicationInfoForCollectionId|43|struct:mixApplicationInfo,0,,low,,,7,,,1
 field = mixApplicationInfoForContentId|44|struct:mixApplicationInfo,0,,low,,,7,,,1
 field = mixForParentMixId|45|struct:mix,0,1,high,,,7,,,1
 field = mixForRootMixId|46|struct:mix,0,1,high,,,7,,,1
 field = mixForSubscribableMixId|47|struct:mix,0,,high,,,7,,,1
 field = movieYear|22|int,0,1,low,,,,1000,3000,0
 field = mpaaRating|23|enum:mpaaRating,0,1,medium,,,,,,0
 field = originalAirYear|59|int,0,1,medium,,,7,,,0
 field = originalAirdate|24|date,0,1,medium,,,,,,0
 field = overriddenCollectionId|58|idLong:collection,0,1,low,,,8,,,0
 field = overriddenContentId|50|idLong:content,0,1,low,,,8,,,0
 field = partnerCollectionId|25|string,0,1,low,,,,,100,0
 field = partnerContentId|26|string,0,1,low,,,,,100,0
 field = partnerId|27|idInt:partner,0,1,low,,,,,,0
 field = partnerInfo|42|struct:partnerInfo,0,1,high,,,7,,,1
 field = partnerStationId|68
 field = popularityRank|38|int,0,1,low,,,,,,0
 field = rating|28|struct:rating,0,,high,,,2,,,0|union:typedRating,0,,high,,7,,,,0
 field = recordingForContentId|40|struct:recording,0,,low,,,7,,,1
 field = releaseDate|39|dateTime,0,1,medium,,,,,,0
 field = scheduledDownloadForContentId|54|struct:download,0,,low,,,7,,,1
 field = searchable|29|boolean,0,1,high,,,,,,0
 field = seasonNumber|30|int,0,1,low,,,,0,,0
 field = shortTitle|31|string,0,1,low,,5,,,128,0
 field = starRating|32|enum:starRating,0,1,high,,,,,,0
 field = subtitle|33|string,0,1,low,,,,,255,2
 field = threeD|75
 field = title|34|string,0,1,low,,,,,128,2
 field = tvAdvisory|35|enum:tvAdvisory,0,,medium,,,,,,0
 field = tvRating|55|enum:tvRating,0,1,medium,,,7,,,0
 field = userContentForCollectionId|36|struct:userContent,0,1,low,,,7,,,1
 field = width|37|int,0,1,low,,,,0,,0
 isFrozen = true
 number = 325
 returnType = content
   description = Stores a new or a modified contentobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = advisory|,2,Single catch-all advisory for offers/content/collection. We'll fill it in with as much detail as we have depending on the object type. OBSOLETE: Please do not use this. Use the tvAdvisory enum in the offer object instead. Contact us if tvAdvisory does not solve your issue.
   field = audioDuration|,2,The duration of the content.  XXX the name of this field is assymetric with the "duration" field in videoContent. The schema checking requires that they be different.  Should we change the one in videoContent?  Should we make yet another field group to hold duration?  Should we move duration up to content?  The field audioDuration was moved to the duration field in content in mind3.
   field = autoOverriddenCollectionId|,8,If this service has determined that this collection overrides another, this field is used to hold the original collectionId. If overriddenCollectionId is set, this field is ignored.
   field = autoOverriddenContentId|,8,If this service has determined that this content overrides another, this field is used to hold the original contentId. If overriddenContentId is set, this field is ignored.
   field = bookmarkPosition|,,An offset, in milliseconds, into the content
   field = broadbandOfferGroupForContentId|,7,XXX: This should be added to contentFields instead; however NPE would occur in MindObjectGenerator if defined that way.
   field = broadcastOfferGroupForContentId|,7,XXX: This should be added to contentFields instead; however NPE would occur in MindObjectGenerator if defined that way.
   field = captioning|,2,True for video content that has Closed Captioning.  The default value is false.  This field was removed in mind3 because the captioning flag belongs on the offer, not the content.
   field = category|,,Single catch-all category for offers/content/collection. We'll fill it in with as much detail as we have depending on the object type
   field = checksum|,,This field stores the checksum of all of the metadata attributes of this object.
   field = collectionDescription|,,The collection's description.
   field = collectionId|,,The globally unique ID for a collection. Collection objects retrieved from the mind will always have a collection id.  Collections that are created by other parties and are included in content or recording objects may not have collection ids.
   field = collectionTitle|,,The primary title by which the corresponding collection is known. This field may be useful when the collection's title is different than that of the content.  Otherwise, the "title" and "collectionTitle" fields will typically be the same.
   field = contentId|,,The globally unique ID for a content.
   field = description|,,A description of the content.
   field = descriptionLanguage|,,The language that the description is written in
   field = dolbyDigital|,,True for audio content that has a Dolby Digital track.  The default value is false.
   field = duration|,2,The duration of the content (in seconds).  Moved to contentFields in mind3.|3,,The duration of the content (in seconds)
   field = episodeNum|3,,The episode number of the content.  This field has a maxOccurs=unbounded, because sometimes episodes are split up into multiple parts, each with their own episode numbers and then re-broadcast as a single episode.  The rebroadcast will contain the episode numbers of all of the parts.
   field = episodic|,,This flag defines whether or not a series is episodic. If it is a 1 or not set it is assumed to be an episodic series. If it is a 0 then it is a non-episodic series such as a movie or special.
   field = hasBroadbandOffers|,7,Set to true if at least one broadband offer exists
   field = hasBroadcastOffers|,7,Set to true if at least one broadband offer exists
   field = hasThreeDOffers|,7,Set to true if at least one threeD offer exists
   field = height|,,Height of image, in pixels.
   field = image|,,Image metadata for this collection
   field = imageUrl|,8,Image URL associated with this collection
   field = internalCollectionId|,,Id field used internally to dedupe collections. It stores the now obsolete overriddenCollectionId or autoOverriddenCollectionId if one of them is set, or collectionId otherwise;
   field = internalCollectionIdOrigin|,,Origin of the internalCollectionId, which is used  to dedupe collections that point to the same pgd collection.
   field = internalContentId|,,Id field used internally to dedupe contents. It stores the now obsolete overriddenContentId or autoOverriddenContentId if one of them is set, or contentId otherwise;
   field = internalContentIdOrigin|,,Origin of the internalContentId, which is used  to dedupe contents that point to the same pgd content.
   field = isEpisode|,,This flag is set when this program object refers to a specific "episode", a specific content stream. When set, every showing of this program has exactly the same content. Sometimes there are programs (like All My Children) where there is no info about each episode, and one content object is used for all episodes; such programs do not have this flag set.  If this flag is set, TiVo will not record this program more than once, because recording the same content twice would just waste disk space.
   field = matchedField|,,This field contains the name of the field that matched the search string which resulted in this content object being returned from the search.
   field = mixForParentMixId|,7,container for the parent mix, when the mixForParentMixId note is specified.
   field = mixForRootMixId|,7,container for the root mix, when the mixForRootMixId note is specified.
   field = mixForSubscribableMixId|,7,container for a subscribable mix, when the mixForSubscribableMixId note is specified.
   field = movieYear|,,The year the movie came out
   field = originalAirYear|,7,The year when the content of this offer first airs.
   field = originalAirdate|,,The date when the content of this offer first airs.
   field = overriddenCollectionId|,8,If this collection overrides another, use this field to hold the original collectionId. This is used when partners wish to author their own metadata for a collection object, while maintaining the link to the broadcast collection object, for searches.
   field = overriddenContentId|,8,If this content overrides another, use this field to hold the original contentId. This is used when partners wish to author their own metadata for a content object, while maintaining the link to the broadcast content object, for searches.
   field = partnerCollectionId|,,The partner's own collection Id.
   field = partnerContentId|,,The partner's own content Id.
   field = partnerId|,,Id of the partner that created the object.
   field = partnerInfo|,7,a container for the partnerInfoForPartnerId annotation
   field = popularityRank|,,This field represents an arbitrary popularity rank associated with this item.  It currently only applies to historic broadcast collectionSearch and is calculated based on seasonPassRanking
   field = rating|,2,The ratings of this collection. OBSOLETE: Please do not use this. Use the mpaaRating and starRating enums in the content object instead. Contact us if that does not solve your issue.|7,,Typed rating.
   field = recordingForContentId|,7,Holds the recordingForContentId note.
   field = releaseDate|,,The date that this content was released by the content owner for public consumption
   field = searchable|,,This flag defines whether or not a collection is searchable. If 1, a collection is searchable. If 0, a collection is not searchable. Default to 0 (not searchable).
   field = shortTitle|5,,The alternate (short) title for this collection, as defined by the EPG data provider. If this element is not present, the shortTitle can be assumed to be identical to the title.
   field = subtitle|,,A secondary title by which this specific content (as distinguised from the collection) is known (e.g. episode title).  May apply only to content with ambiguous primary titles.
   field = title|,,The primary title by which this collection is known.
   field = width|,,Width of image, in pixels.
   fieldProject = availableCorrelatedCollectionForCollectionId|0|0|7|partner-schedule
   fieldProject = category|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = collectionDescription|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = collectionId|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = collectionTitle|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = contentId|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = contentType|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = correlatedCollectionForCollectionId|0|0|7|partner-schedule
   fieldProject = credit|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = description|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = descriptionLanguage|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = duration|0|3|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = episodeNum|0|3|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = episodic|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = imageUrl|0|0|8|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = isEpisode|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = movieYear|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = mpaaRating|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = originalAirdate|0|0|0|partner-schedule,partner-subscribe
   fieldProject = overriddenCollectionId|0|0|8|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = overriddenContentId|0|0|8|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = partnerCollectionId|0|0|0|partner-cds
   fieldProject = partnerContentId|0|0|0|partner-cds
   fieldProject = partnerId|0|0|0|hme-cds,partner-cds
   fieldProject = releaseDate|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = searchable|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = seasonNumber|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = starRating|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = subtitle|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = title|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = tvAdvisory|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = tvRating|0|0|7|partner-schedule,hme-cds,partner-cds,partner-subscribe
   project = contentStore|0|0|0|hme-cds,partner-cds,partner-subscribe

********** operation = controllerIdVctIdGet (NO)
 number = 1869
 returnType = controllerIdVctId
   description = Get the controllerIdVctId which has controllerId and vctId.

********** operation = countrySearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = code|3|string,0,1,,,,,2,2,0
 field = count|4|int,0,1,,1,,,1,,0
 field = format|5|enum:format,0,1,,,,,,,0
 field = groupBy|6|string,0,,,,,,,32,0
 field = ipAddress|7|string,0,1,,,,,7,15,0
 field = levelOfDetail|8|enum:levelOfDetail,0,1,,,,,,,0
 field = name|9|string,0,1,,,,,,255,0
 field = note|10|string,0,,,,,,,,0
 field = offset|11|int,0,1,,0,,,,,0
 field = orderBy|12|string,0,,,,,,,32,0
 field = removeField|13|string,0,,,,,2,,,0
 field = responseTemplate|15|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|14|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 isFrozen = true
 number = 788
 orderBy = code
 orderBy = name
 returnType = countryList
   description = search for a country
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = code|,,Limits the search to an object with exactly the same value in this field.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = name|,,Limits the search to an object with exactly the same value in this field.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = currentMixRefresh (NO)
 field = collectionId|1|idLong:collection,0,1,,,,,,,0
 field = contentId|2|idLong:content,0,1,,,,,,,0
 field = mixId|3|idLong:mix,0,1,,,,,,,0
 field = offerId|4|idString:offer,0,1,,,,,,,0
 number = 1965
 returnType = success
   description = Refreshes the currentMix table for any mixes that match the specified criteria.
   field = collectionId|,,Limits the search to an object with exactly the same value in this field.
   field = contentId|,,Limits the search to an object with exactly the same value in this field.
   field = mixId|,,Limits the search to an object with exactly the same value in this field.
   field = offerId|,,Limits the search to an object with exactly the same value in this field.
   fieldProject = collectionId|0|0|0|hme-cds
   fieldProject = contentId|0|0|0|hme-cds
   fieldProject = mixId|0|0|0|hme-cds
   fieldProject = offerId|0|0|0|hme-cds

********** operation = cursorMove (NO)
 field = isAbsolute|1|boolean,1,1,,,,,,,0
 field = x|2|int,1,1,,,,,,,0
 field = y|3|int,1,1,,,,,,,0
 number = 1911
 returnType = success
   description = Moves the cursor (mouse pointer) to a relative or absolute screen position
   field = isAbsolute|,,This field indicates whether the specified coordinates are absolute positions  or deltas relative to the current cursor position. If set to true, the  coordinates should be considered absolute coordinates, otherwise they are  relative to the current cursor position.
   field = x|,,The X-coordinate
   field = y|,,The Y-coordinate

********** operation = custOptStatusGet (NO)
 field = accountToken|1|string,0,1,low,,,,,,0
 field = aclFlag|5|string,0,1,low,,,,,,0
 field = anonId|2|string,0,1,low,,,,,,0
 field = optStatus|3|enum:optStatus,0,1,low,,,,,,0
 field = partnerId|4|string,0,1,low,,,,,,0
 field = tsn|6|string,0,1,low,,,,,,0
 fieldGroup = optStatusFields
 number = 330
 returnType = custOptStatusResponse
   description = Request for the opt status. You must specify the:  accountToken

********** operation = custOptStatusStore (NO)
 field = accountToken|1|string,0,1,low,,,,,,0
 field = aclFlag|6|string,0,1,low,,,,,,0
 field = anonId|2|string,0,1,low,,,,,,0
 field = featureName|3|string,1,1,low,,,,,,0
 field = optStatus|4|enum:optStatus,0,1,low,,,,,,0
 field = partnerId|5|string,0,1,low,,,,,,0
 field = tsn|7|string,0,1,low,,,,,,0
 fieldGroup = optStatusFields
 number = 332
 returnType = custOptStatus
   description = Request for updating the opt status. You must specify the:  accountToken

********** operation = delayedRequestStore (NO)
 field = request|1|knownDict,1,1,low,,,,,,0
 field = startDate|2|dateTime,1,1,low,,,,,,0
 number = 778
 returnType = delayedRequest
   description = Stores a new or a modified delayedRequestobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = request|,,the request to execute

********** operation = deploymentTargetRemove (NO)
 field = deploymentTargetId|1|idLong:deploymentTarget,1,1,,,,,,,0
 number = 1791
 returnType = success
   description = Removes a deploymentTarget object from the mind.

********** operation = deploymentTargetSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = count|3|int,0,1,,1,,,1,,0
 field = deploymentTargetId|4|idLong:deploymentTarget,0,1,,,,,,,0
 field = format|5|enum:format,0,1,,,,,,,0
 field = groupBy|6|string,0,,,,,,,32,0
 field = levelOfDetail|7|enum:levelOfDetail,0,1,,,,,,,0
 field = name|8|string,0,1,,,,,,,0
 field = note|9|string,0,,,,,,,,0
 field = offset|10|int,0,1,,0,,,,,0
 field = orderBy|11|string,0,,,,,,,32,0
 field = partnerId|12|idInt:partner,0,1,,,,,,,0
 field = removeField|13|string,0,,,,,2,,,0
 field = responseTemplate|14|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|15|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 number = 1792
 returnType = deploymentTargetList
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = deploymentTargetId|,,Limits the search to an object with exactly the same value in this field.
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = name|,,Limits the search to an object with exactly the same value in this field.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = partnerId|,,Limits the search to an object with exactly the same value in this field.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = deploymentTargetStore (NO)
 field = deploymentTargetId|1|idLong:deploymentTarget,0,1,low,,,,,,0
 field = name|2|string,1,1,low,,,,,,0
 field = partnerId|3|idInt:partner,1,1,low,,,,,,0
 field = serviceGroup|4|struct:serviceGroup,0,,low,,,,,,0
 number = 1793
 returnType = deploymentTarget
   description = Stores a new or a modified deploymentTargetobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.

********** operation = dialConfigInstructionsGet (NO)
 field = bodyId|1|idBody:body,1,1,low,,,,,,0
 field = callId|2|string,1,1,low,,,,,,0
 field = requestToken|3|anyDict,0,1,low,,,,,,0
 field = softwareVersion|4|string,1,1,low,,,,,,0
 field = userInitiated|5|boolean,1,1,low,,,,,,0
 number = 1735
 returnType = dialConfigInstructions
   description = This operation will return the dial configuration that the body should be using now.
   field = callId|,,A session ID.  Historically, a session of a Service call is called a "call". Using "callId" here enables more straightforward correlation to the trackerDb. Typically, the client would send Unix time, in seconds. This same value should be used as the callId for the entire session, meaning the invocation of callInstructionsGet plus each of the subsequent invocations of sub-operations, if any.
   field = requestToken|,,Typically the "resultToken" of the previous *InstructionsGet response. If this is the first call, then this field is omitted. As an anyDict field, we have extensibility here.
   field = softwareVersion|,,The currently installed software version on the body. This field is mostly intended for informational logging and potentially identifying what software features are currently available to the client.
   field = userInitiated|,,Was this invocation initiated by explicit user action, rather than programmatically, based on callbackSeconds information? This is mainly informational.

********** operation = downloadCleanup (NO)
 field = bodyId|1|idBody:body,1,1,low,,,,,,0
 field = maxUpdateDate|2|dateTime,0,1,,,,,,,0
 isFrozen = true
 number = 337
 returnType = success
   description = Cleanup crufty downloads for a body
   field = bodyId|,,the bodyId for which downloads should be cleaned up
   field = maxUpdateDate|,,everything cleaned up must be older than this date. default is 2 days ago.

********** operation = downloadModify (NO)
 field = adForOfferId|1|struct:ad,0,,low,,,,,,1
 field = assetForAssetId|2|struct:asset,0,1,low,,,,,,1
 field = assetId|3|idLong:asset,0,1,low,,,,,,0
 field = bodyId|4|idBody:body,1,1,low,,,,,,0
 field = cancellationReason|5|enum:cancellationReason,0,1,medium,,,,,,0
 field = cancellationSource|19|enum:cancellationSource,0,1,medium,,,,,,0
 field = createDate|6|dateTime,0,1,medium,,,,,,0
 field = deletionReason|7|enum:deletionReason,0,1,medium,,,,,,0
 field = downloadId|8|idInt:download,0,1,,,,,,,0
 field = minStartTime|9|dateTime,0,1,medium,,,,,,0
 field = offerForOfferId|10|struct:offer,0,1,low,,,,,,1
 field = offerId|11|idString:offer,1,1,low,,,,,,0
 field = partnerId|20|idInt:partner,0,1,low,,,,,,0
 field = partnerOfferId|21|string,0,1,low,,,,,100,0
 field = partnerStatusUpdateFailed|12|boolean,0,1,medium,,,,,,0
 field = partnerTransactionId|22|long,0,1,low,,,,0,,0
 field = percentComplete|13|int,0,1,medium,0,,,0,127,0
 field = sourceOfferId|14|idString:offer,0,1,low,,,,,,0
 field = sourceSubscriptionId|15|idInt:subscription,0,1,low,,,,,,0
 field = state|16|enum:recordingBodyState,1,1,low,,,,,,0
 field = subscriptionId|17|idInt:subscription,0,,low,,,,,,0
 field = updateDate|18|dateTime,0,1,medium,,,,,,0
 fieldGroup = downloadFields
 isFrozen = true
 number = 339
 returnType = download
   description = Create or update a download, with desirable side effects. use this instead of downloadStore.
   field = adForOfferId|,,Holds results of the adForOfferId note. While it is possible that there may be multiple ads associated with the same offer, it will not be common during the course of Product Watch authoring.
   field = assetId|,,the assetId for the item to be downloaded.  this will be set for all download objects except for those with a state of reset
   field = bodyId|,,the bodyId for the item to be downloaded
   field = cancellationSource|,,if the download was cancelled, this field stores who is responsible.
   field = createDate|,,download create date
   field = downloadId|,,The downloadId that was previously assigned by the mind. Omit this field if creating a new download.
   field = minStartTime|,,This time at which this download becomes actively scheduled
   field = offerId|,,the offerId for the item to be downloaded
   field = partnerId|,,The Partner Id for the download
   field = partnerOfferId|,,The partner's own offer Id.
   field = partnerTransactionId|,,The partner's own transaction Id
   field = percentComplete|,,what percentage of the published size has been downloaded.
   field = sourceOfferId|,,Id of the originating offer for this download, if different than the offerId
   field = sourceSubscriptionId|,,Id of the originating subscription for this download, if different than the subscriptionId
   field = state|,,the current state of the download
   field = subscriptionId|,,Id of the subscription(s) that scheduled this download
   field = updateDate|,,download update date

********** operation = downloadRemove (NO)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 field = downloadId|2|idInt:download,1,1,,,,,,,0
 isFrozen = true
 number = 340
 returnType = success
   description = Removes a download object from the mind.

********** operation = downloadSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = assetId|3|idLong:asset,0,1,,,,,,,0
 field = bodyId|4|idBody:body,0,1,,,,,,,0
 field = contentId|26|idLong:content,0,1,,,,,,,0
 field = count|5|int,0,1,,1,,,1,,0
 field = downloadId|6|idInt:download,0,1,,,,,,,0
 field = format|7|enum:format,0,1,,,,,,,0
 field = groupBy|8|string,0,,,,,,,32,0
 field = includeSourceOffers|27|boolean,0,1,,false,,,,,0
 field = levelOfDetail|9|enum:levelOfDetail,0,1,,,,,,,0
 field = maxUpdateDate|10|dateTime,0,1,,,,,,,0
 field = minUpdateDate|11|dateTime,0,1,,,,,,,0
 field = noLimit|12|boolean,0,1,,,,,,,0
 field = note|13|string,0,,,,,,,,0
 field = offerId|14|idString:offer,0,,,,,,,,0
 field = offset|15|int,0,1,,0,,,,,0
 field = omitState|16|enum:recordingBodyState,0,,,,,,,,0
 field = orderBy|17|string,0,,,,,,,32,0
 field = partnerId|18|idInt:partner,0,1,,,,,,,0
 field = partnerStatusUpdateFailed|19|boolean,0,1,,,,,,,0
 field = partnerTransactionId|28|long,0,1,,,,,0,,0
 field = removeField|20|string,0,,,,,2,,,0
 field = responseTemplate|29|struct:responseTemplate,0,,,,,,,,0
 field = sourceOfferId|21|idString:offer,0,1,,,,,,,0
 field = sourceSubscriptionId|22|idInt:subscription,0,1,,,,,,,0
 field = state|23|enum:recordingBodyState,0,,,,,,,,0
 field = subscriptionId|24|idInt:subscription,0,1,,,,,,,0
 field = useAnchorOperation|25|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 groupBy = bodyId
 groupBy = offerId
 groupBy = sourceOfferId
 isFrozen = true
 number = 341
 orderBy = bodyId
 orderBy = downloadId
 orderBy = offerId
 orderBy = sourceOfferId
 orderBy = sourceSubscriptionId
 orderBy = state
 orderBy = updateDate
 returnType = downloadGroupList
   description = Search for a download.  You must specify one or more of: assetId, bodyId, offerId, partnerId, state. You can optionally specify on eore more of: downloadId, subscriptionId, max/minUpdateDate.
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = assetId|,,Limits the search to an object with exactly the same value in this field.
   field = bodyId|,,Limits the search to an object with exactly the same value in this field.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = downloadId|,,Limits the search to an object with exactly the same value in this field.
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = includeSourceOffers|,,When true, search for downloads for which either the sourceOfferId or the offerId match the value passed for offerId. The offerId field must be set when this is true.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = maxUpdateDate|,,Search for all downloads with an updateDate less than or equal to the given updateDate
   field = minUpdateDate|,,Search for all downloads with an updateDate greater than or equal to the given updateDate
   field = noLimit|,,Do not limit this search to a given count.  This is a special field that is only allowed on certain operations. This is one of those operations.
   field = note|,,A request for the results to be annotated.
   field = offerId|,,Search for all downloads with a given offerId.  If multipile offerIds are passed in, they will be ORd together.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = omitState|,,Search for all downloads without a given state
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = partnerId|,,Search for all downloads whose asset has the given partnerId
   field = partnerStatusUpdateFailed|,,Limits the search to an object with exactly the same value in this field.
   field = partnerTransactionId|,,Limits the search to an object with exactly the same value in this field.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = sourceOfferId|,,Limits the search to an object with exactly the same value in this field.
   field = sourceSubscriptionId|,,Limits the search to an object with exactly the same value in this field.
   field = state|,,Search for all downloads with a given state.  If multipile states are passed in, they will be ORd together.
   field = subscriptionId|,,Limits the search to an object with exactly the same value in this field.
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = downloadStore (NO)
 field = adForOfferId|1|struct:ad,0,,low,,,7,,,1
 field = assetForAssetId|2|struct:asset,0,1,low,,,7,,,1
 field = assetId|3|idLong:asset,0,1,low,,,,,,0
 field = bodyId|4|idBody:body,1,1,low,,,,,,0
 field = cancellationReason|5|enum:cancellationReason,0,1,medium,,,,,,0
 field = cancellationSource|19|enum:cancellationSource,0,1,medium,,,,,,0
 field = createDate|6|dateTime,0,1,medium,,,6,,,0
 field = deletionReason|7|enum:deletionReason,0,1,medium,,,,,,0
 field = downloadId|8|idInt:download,0,1,low,,,,,,0
 field = minStartTime|9|dateTime,0,1,medium,,,,,,0
 field = offerForOfferId|10|struct:offer,0,1,low,,,7,,,1
 field = offerId|11|idString:offer,1,1,low,,,,,,0
 field = partnerId|22|idInt:partner,0,1,low,,,,,,0
 field = partnerOfferId|20|string,0,1,low,,,7,,100,0
 field = partnerStatusUpdateFailed|12|boolean,0,1,medium,,,,,,0
 field = partnerTransactionId|21|long,0,1,low,,,,0,,0
 field = percentComplete|13|int,0,1,medium,0,,,0,127,0
 field = sourceOfferId|14|idString:offer,0,1,low,,,,,,0
 field = sourceSubscriptionId|15|idInt:subscription,0,1,low,,,,,,0
 field = state|16|enum:recordingBodyState,1,1,low,,,,,,0
 field = subscriptionId|17|idInt:subscription,0,,low,,,,,,0
 field = updateDate|18|dateTime,0,1,medium,,,6,,,0
 isFrozen = true
 number = 342
 returnType = download
   description = Stores a new or a modified downloadobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = adForOfferId|,7,Holds results of the adForOfferId note. While it is possible that there may be multiple ads associated with the same offer, it will not be common during the course of Product Watch authoring.
   field = assetId|,,the assetId for the item to be downloaded.  this will be set for all download objects except for those with a state of reset
   field = bodyId|,,the bodyId for the item to be downloaded
   field = cancellationSource|,,if the download was cancelled, this field stores who is responsible.
   field = createDate|,6,download create date
   field = downloadId|,,per-body unique id for this download
   field = minStartTime|,,This time at which this download becomes actively scheduled
   field = offerId|,,the offerId for the item to be downloaded
   field = partnerId|,,The Partner Id for the download
   field = partnerOfferId|,7,The partner's own offer Id.
   field = partnerTransactionId|,,The partner's own transaction Id
   field = percentComplete|,,what percentage of the published size has been downloaded.
   field = sourceOfferId|,,Id of the originating offer for this download, if different than the offerId
   field = sourceSubscriptionId|,,Id of the originating subscription for this download, if different than the subscriptionId
   field = state|,,the current state of the download
   field = subscriptionId|,,Id of the subscription(s) that scheduled this download
   field = updateDate|,6,download update date

********** operation = endUserMessageEventRegister (NO)
 number = 1678
 returnType = endUserMessageEvent
   description = Checks for message availability and provides follow-up responses when the availability changes.

********** operation = endUserMessageRemove (NO)
 field = endUserMessageId|1|idLong:endUserMessage,1,1,,,,,,,0
 number = 1680
 returnType = success
   description = Removes an end-user message from the body.
   field = endUserMessageId|,,Specifies which message to remove.

********** operation = endUserMessageSearch (NO)
 field = destination|1|enum:endUserMessageDestination,1,1,,,,,,,0
 number = 1681
 returnType = endUserMessageList
   description = Searches for all messages for a given destination.
   field = destination|,,Specifies which destination to return messages for.

********** operation = endUserMessageUpdate (NO)
 field = endUserMessageId|1|idLong:endUserMessage,1,1,,,,,,,0
 field = unread|2|boolean,0,1,,,,,,,0
 number = 1682
 returnType = success
   description = Updates the state of an end-user message on the body.
   field = endUserMessageId|,,Specifies which message to update.
   field = unread|,,Specifies whether the message is read or unread.

********** operation = expiredRecordingRemove (NO)
 number = 347
 returnType = success
   description = Removes Expired recordings from recording table by first archiving then to noReRecord   Also removes old archive recordings from noReRecordTable

********** operation = extraTestsRun (NO)
 field = testArgs|1|anyDict,0,1,,,,,,,0
 field = testName|2|string,1,1,,,,,,,0
 number = 1242
 returnType = extraTestsResult
   description = extraTests pseudo-op. used only for testing to perform special tests for internal components not directly accessible via other mind operations. Allows localtest to dynamically attach test code not available in production.
   field = testArgs|,,The arguments for the specified test
   field = testName|,,defines test to run

********** operation = failedPartnerUpdateModify (NO)
 field = accountToken|1|string,1,1,low,,,,,128,0
 field = autoRetriable|2|boolean,1,1,low,,,,,,0
 field = bodyId|3|idBody:body,0,1,low,,,,,,0
 field = encryptedBodyId|4|string,1,1,low,,,,,128,0
 field = failedOfferId|11|string,1,1,low,,,,,64,0
 field = offerId|5
 field = partnerAccountId|6|string,0,1,low,,,,,128,0
 field = partnerId|7|idInt:partner,1,1,low,,,,,,0
 field = partnerTransactionId|12|long,0,1,low,,,,0,,0
 field = processingFailedTimestamp|8|long,1,1,low,,,,,,0
 field = reason|9|string,1,1,low,,,,,128,0
 field = timestamp|10|long,1,1,low,,,,,,0
 fieldGroup = failedPartnerUpdateFields
 isFrozen = true
 number = 896
 returnType = failedPartnerUpdateList
   description = Client is recommended to call failedPartnerUpdateModify instead of failedPartnerUpdateStore directly. failedPartnerUpdateModify checks via failedPartnerUpdateSearch first, if there is a match, then increment count by 1. If there is no match, then insert a new row by calling failedPartnerUpdateStore.
   field = autoRetriable|,,if true, next Schedule.java run will retry this entry automatically if false, Schedule.java must be run in "recovery mode"
   field = bodyId|,,The bodyId for the debugging purpose. It is an optional field, for store.
   field = encryptedBodyId|,,encryptedBodyId (bodyId encrypted with partnerId)
   field = processingFailedTimestamp|,,seconds from epoch, when it fails
   field = reason|,,At which step this partnerUpdate fail? You can find a list of reasons in PartnerException.java
   field = timestamp|,,Timestamp, from partner's update dict. This is used in appGlobalDataSearch and appGlobalDataStore

********** operation = failedPartnerUpdateRemove (NO)
 field = failedPartnerUpdateId|1|idLong:failedPartnerUpdate,1,1,,,,,,,0
 isFrozen = true
 number = 893
 returnType = success
   description = Removes a failedPartnerUpdate object from the mind.

********** operation = failedPartnerUpdateSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = autoRetriable|3|boolean,0,1,,,,,,,0
 field = count|4|int,0,1,,1,,,1,,0
 field = encryptedBodyId|15|string,0,1,,,,,,128,0
 field = failedOfferId|19|string,0,1,,,,,,64,0
 field = failedPartnerUpdateId|5|idLong:failedPartnerUpdate,0,1,,,,,,,0
 field = format|6|enum:format,0,1,,,,,,,0
 field = groupBy|7|string,0,,,,,,,32,0
 field = levelOfDetail|8|enum:levelOfDetail,0,1,,,,,,,0
 field = maxRetryCount|18|int,0,1,,,,,,,0
 field = maxTries|17
 field = note|9|string,0,,,,,,,,0
 field = offerId|16
 field = offset|10|int,0,1,,0,,,,,0
 field = orderBy|11|string,0,,,,,,,32,0
 field = partnerId|12|idInt:partner,0,1,,,,,,,0
 field = partnerTransactionId|20|long,0,1,,,,,0,,0
 field = removeField|13|string,0,,,,,2,,,0
 field = responseTemplate|21|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|14|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 isFrozen = true
 number = 894
 orderBy = timestamp
 returnType = failedPartnerUpdateList
   description = Search for a FailedPartnerUpdate (see failedPartnerUpdate structure)
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = autoRetriable|,,Limits the search to an object with exactly the same value in this field.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = encryptedBodyId|,,Limits the search to an object with exactly the same value in this field.
   field = failedOfferId|,,Limits the search to an object with exactly the same value in this field.
   field = failedPartnerUpdateId|,,Limits the search to an object with exactly the same value in this field.
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = partnerId|,,Limits the search to an object with exactly the same value in this field.
   field = partnerTransactionId|,,Limits the search to an object with exactly the same value in this field.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = failedPartnerUpdateStore (NO)
 field = accountToken|1|string,1,1,low,,,,,128,0
 field = autoRetriable|2|boolean,1,1,low,,,,,,0
 field = bodyId|3|idBody:body,0,1,low,,,,,,0
 field = count|12
 field = encryptedBodyId|4|string,1,1,low,,,,,128,0
 field = failedOfferId|14|string,1,1,low,,,,,64,0
 field = failedPartnerUpdateId|5|idLong:failedPartnerUpdate,0,1,low,,,,,,0
 field = offerId|6
 field = partnerAccountId|7|string,0,1,low,,,,,128,0
 field = partnerId|8|idInt:partner,1,1,low,,,,,,0
 field = partnerTransactionId|15|long,0,1,low,,,,0,,0
 field = processingFailedTimestamp|9|long,1,1,low,,,,,,0
 field = reason|10|string,1,1,low,,,,,128,0
 field = retryCount|13|int,0,1,low,1,,,1,,0
 field = timestamp|11|long,1,1,low,,,,,,0
 isFrozen = true
 number = 895
 returnType = failedPartnerUpdate
   description = Stores a new or a modified failedPartnerUpdateobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = autoRetriable|,,if true, next Schedule.java run will retry this entry automatically if false, Schedule.java must be run in "recovery mode"
   field = bodyId|,,The bodyId for the debugging purpose. It is an optional field, for store.
   field = encryptedBodyId|,,encryptedBodyId (bodyId encrypted with partnerId)
   field = failedPartnerUpdateId|,,ID
   field = processingFailedTimestamp|,,seconds from epoch, when it fails
   field = reason|,,At which step this partnerUpdate fail? You can find a list of reasons in PartnerException.java
   field = timestamp|,,Timestamp, from partner's update dict. This is used in appGlobalDataSearch and appGlobalDataStore

********** operation = featureFailureSearch (NO)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 field = feature|2|enum:featureName,1,1,,,,,,,0
 number = 352
 returnType = featureFailureList
   description = Find reasons why the feature isn't enabled.  If no featureFailures are returned, we expect the feature to be enabled.
   field = bodyId|,,The body we're querying about.
   field = feature|,,The feature we're asking about.

********** operation = featureSearch (NO)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 field = feature|2|enum:featureName,1,1,,,,,,,0
 number = 355
 returnType = featureList
   description = Find features that apply to a given device.
   field = bodyId|,,The body we're querying about.
   field = feature|,,Limits the search to an object with exactly the same value in this field.

********** operation = fingerprintMatchSearch (NO)
 field = count|1|int,0,1,,1,,,1,,0
 field = fingerprint|2|bytestring,1,1,,,,,,,0
 field = fingerprintType|3|enum:fingerprintType,1,1,,,,,,,0
 field = format|4|enum:format,0,1,,,,,,,0
 field = groupBy|5|string,0,,,,,,,32,0
 field = levelOfDetail|6|enum:levelOfDetail,0,1,,,,,,,0
 field = note|7|string,0,,,,,,,,0
 field = offset|8|int,0,1,,0,,,,,0
 field = orderBy|9|string,0,,,,,,,32,0
 field = responseTemplate|10|struct:responseTemplate,0,,,,,,,,0
 fieldGroup = searchFieldsNoAnchoring
 number = 1550
 returnType = fingerprintMatchList
   description = Searches a video library for a matching segment of video.  There may be multiple matches for a given fingerprint.  Using the default count of 1 will return just one match; if there are different levels of confidence, the best match will be returned.  If you ask for a count of more than one, the n best matches will be returned.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = fingerprint|,,The fingerprint to match.  This is binary data, whose format depends on the fingerprintType.
   field = fingerprintType|,,The algorithm used to create the fingerprint.
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = forceSlowSync (NO)
 field = bodyId|1|idBody:anyBody,1,1,,,,,,,0
 field = databaseName|2|enum:databaseName,1,,,,,,,,0
 number = 358
 returnType = success
   description = This operation will set some state in the  database table for a given bodyId and for given tables that the next time it calls in for a sync, it will do a slow sync on those tables.
   field = bodyId|,,body Id on which to force the slow sync

********** operation = friendCompositeRemove (NO)
 field = friendCompositeId|1|idInt:friendComposite,1,1,,,,,,,0
 isFrozen = true
 number = 1319
 returnType = success
   description = Removes a friendComposite object from the mind.

********** operation = friendCompositeSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = count|3|int,0,1,,1,,,1,,0
 field = format|4|enum:format,0,1,,,,,,,0
 field = friendCompositeId|5|idInt:friendComposite,0,1,,,,,,,0
 field = friendSetId|6|idInt:friendSet,0,1,,,,,,,0
 field = groupBy|7|string,0,,,,,,,32,0
 field = levelOfDetail|8|enum:levelOfDetail,0,1,,,,,,,0
 field = maxCreateDate|16|dateTime,0,1,,,,,,,0
 field = maxUpdateDate|17|dateTime,0,1,,,,,,,0
 field = minCreateDate|18|dateTime,0,1,,,,,,,0
 field = minUpdateDate|19|dateTime,0,1,,,,,,,0
 field = neoUserId|9|idInt:neoUser,0,1,,,,,,,0
 field = note|10|string,0,,,,,,,,0
 field = offset|11|int,0,1,,0,,,,,0
 field = orderBy|12|string,0,,,,,,,32,0
 field = removeField|13|string,0,,,,,2,,,0
 field = responseTemplate|20|struct:responseTemplate,0,,,,,,,,0
 field = socialFriendId|14|idInt:socialFriend,0,1,,,,,,,0
 field = useAnchorOperation|15|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 fieldGroup = serviceClusterSearchDates
 number = 1320
 returnType = friendCompositeList
   description = search for a friendComposite by: friendCompositeId, neoUserId, friendSetId, socialFriendId
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = friendCompositeId|,,Limits the search to an object with exactly the same value in this field.
   field = friendSetId|,,Limits the search to an object with exactly the same value in this field.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = neoUserId|,,Limits the search to an object with exactly the same value in this field.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = socialFriendId|,,Limits the search to an object with exactly the same value in this field.
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = friendCompositeStore (NO)
 field = avatar|1|struct:image,0,1,low,,,,,,0
 field = displayName|2|string,1,1,low,,,,,100,0
 field = friendCompositeId|3|idInt:friendComposite,0,1,low,,,,,,0
 field = neoUserId|4|idInt:neoUser,1,1,low,,,,,,0
 field = socialFriendForFriendCompositeId|5|struct:socialFriend,0,,low,,,7,,,1
 isFrozen = true
 number = 1321
 returnType = friendComposite
   description = Stores a new or a modified friendCompositeobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = avatar|,,The "master" avatar for the friend, typically chosen from among the socialUsers of this friendComposite.
   field = displayName|,,A user-friendly display name for this friend.  It shouldn't be blank :-)
   field = friendCompositeId|,,friendCompositeId to create or update
   field = neoUserId|,,The userId that "owns" this friendComposite
   field = socialFriendForFriendCompositeId|,7,Annotations (notes) contains the list of socialFriend entries for this friendComposite

********** operation = friendSetFriendCompositeMappingRemove (NO)
 field = friendCompositeId|1|idInt:friendComposite,1,1,,,,,,,0
 field = friendSetId|2|idInt:friendSet,1,1,,,,,,,0
 number = 1369
 returnType = success
   description = Removes a friendSetFriendCompositeMapping object from the mind.

********** operation = friendSetFriendCompositeMappingSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = count|3|int,0,1,,1,,,1,,0
 field = format|4|enum:format,0,1,,,,,,,0
 field = friendCompositeId|5|idInt:friendComposite,0,1,,,,,,,0
 field = friendSetId|6|idInt:friendSet,0,1,,,,,,,0
 field = groupBy|7|string,0,,,,,,,32,0
 field = levelOfDetail|8|enum:levelOfDetail,0,1,,,,,,,0
 field = maxCreateDate|14|dateTime,0,1,,,,,,,0
 field = maxUpdateDate|15|dateTime,0,1,,,,,,,0
 field = minCreateDate|16|dateTime,0,1,,,,,,,0
 field = minUpdateDate|17|dateTime,0,1,,,,,,,0
 field = note|9|string,0,,,,,,,,0
 field = offset|10|int,0,1,,0,,,,,0
 field = orderBy|11|string,0,,,,,,,32,0
 field = removeField|12|string,0,,,,,2,,,0
 field = responseTemplate|18|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|13|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 fieldGroup = serviceClusterSearchDates
 number = 1370
 returnType = friendSetFriendCompositeMappingList
   description = search for a friendSetFriendCompositeMapping by friendSetId, friendCompositeId
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = friendCompositeId|,,Limits the search to an object with exactly the same value in this field.
   field = friendSetId|,,Limits the search to an object with exactly the same value in this field.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = friendSetFriendCompositeMappingStore (NO)
 field = friendCompositeId|1|idInt:friendComposite,1,1,low,,,,,,0
 field = friendSetId|2|idInt:friendSet,1,1,low,,,,,,0
 number = 1371
 returnType = friendSetFriendCompositeMapping
   description = Stores a new or a modified friendSetFriendCompositeMappingobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = friendCompositeId|,,The FriendComposite in the FriendSet
   field = friendSetId|,,the FriendSet that the FriendComposite is mapped to 

********** operation = friendSetRemove (NO)
 field = friendSetId|1|idInt:friendSet,1,1,,,,,,,0
 isFrozen = true
 number = 1324
 returnType = success
   description = Removes a friendSet object from the mind.

********** operation = friendSetSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = count|3|int,0,1,,1,,,1,,0
 field = format|4|enum:format,0,1,,,,,,,0
 field = friendSetId|5|idInt:friendSet,0,1,,,,,,,0
 field = groupBy|6|string,0,,,,,,,32,0
 field = levelOfDetail|7|enum:levelOfDetail,0,1,,,,,,,0
 field = maxCreateDate|14|dateTime,0,1,,,,,,,0
 field = maxUpdateDate|15|dateTime,0,1,,,,,,,0
 field = minCreateDate|16|dateTime,0,1,,,,,,,0
 field = minUpdateDate|17|dateTime,0,1,,,,,,,0
 field = neoUserId|8|idInt:neoUser,0,1,,,,,,,0
 field = note|9|string,0,,,,,,,,0
 field = offset|10|int,0,1,,0,,,,,0
 field = orderBy|11|string,0,,,,,,,32,0
 field = removeField|12|string,0,,,,,2,,,0
 field = responseTemplate|18|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|13|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 fieldGroup = serviceClusterSearchDates
 number = 1325
 returnType = friendSetList
   description = search for a friendSet by friendSetId or neoUserId
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = friendSetId|,,Limits the search to an object with exactly the same value in this field.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = neoUserId|,,Limits the search to an object with exactly the same value in this field.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = friendSetSocialFriendSetMappingRemove (NO)
 field = friendSetId|1|idInt:friendSet,1,1,,,,,,,0
 field = socialFriendSetId|2|idInt:socialFriendSet,1,1,,,,,,,0
 number = 1374
 returnType = success
   description = Removes a friendSetSocialFriendSetMapping object from the mind.

********** operation = friendSetSocialFriendSetMappingSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = count|3|int,0,1,,1,,,1,,0
 field = format|4|enum:format,0,1,,,,,,,0
 field = friendSetId|5|idInt:friendSet,0,1,,,,,,,0
 field = groupBy|6|string,0,,,,,,,32,0
 field = levelOfDetail|7|enum:levelOfDetail,0,1,,,,,,,0
 field = maxCreateDate|14|dateTime,0,1,,,,,,,0
 field = maxUpdateDate|15|dateTime,0,1,,,,,,,0
 field = minCreateDate|16|dateTime,0,1,,,,,,,0
 field = minUpdateDate|17|dateTime,0,1,,,,,,,0
 field = note|8|string,0,,,,,,,,0
 field = offset|9|int,0,1,,0,,,,,0
 field = orderBy|10|string,0,,,,,,,32,0
 field = removeField|11|string,0,,,,,2,,,0
 field = responseTemplate|18|struct:responseTemplate,0,,,,,,,,0
 field = socialFriendSetId|12|idInt:socialFriendSet,0,1,,,,,,,0
 field = useAnchorOperation|13|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 fieldGroup = serviceClusterSearchDates
 number = 1375
 returnType = friendSetSocialFriendSetMappingList
   description = search for a friendSetSocialFriendSetMapping by friendSetId, socialFriendSetId
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = friendSetId|,,Limits the search to an object with exactly the same value in this field.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = socialFriendSetId|,,Limits the search to an object with exactly the same value in this field.
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = friendSetSocialFriendSetMappingStore (NO)
 field = friendSetId|1|idInt:friendSet,1,1,low,,,,,,0
 field = socialFriendSetId|2|idInt:socialFriendSet,1,1,low,,,,,,0
 number = 1376
 returnType = friendSetSocialFriendSetMapping
   description = Stores a new or a modified friendSetSocialFriendSetMappingobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = friendSetId|,,the FriendSet that the SocialFriendSet is mapped to 
   field = socialFriendSetId|,,The SocialFriendSet in the FriendSet

********** operation = friendSetStore (NO)
 field = displayName|1|string,1,1,low,,,,,100,0
 field = friendCompositeForFriendSetId|2|struct:friendComposite,0,,low,,,7,,,1
 field = friendSetId|3|idInt:friendSet,0,1,low,,,,,,0
 field = neoUserId|4|idInt:neoUser,1,1,low,,,,,,0
 field = socialFriendSetForFriendSetId|5|struct:socialFriendSet,0,,low,,,7,,,1
 isFrozen = true
 number = 1326
 returnType = friendSet
   description = Stores a new or a modified friendSetobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = displayName|,,A user-friendly display name for this group.  It shouldn't be blank :-)
   field = friendCompositeForFriendSetId|,7,Annotation (note) contains the friendComposite entries for this group
   field = friendSetId|,,friendSetId to create or update
   field = neoUserId|,,The neoUserId that "owns" this friendSet.
   field = socialFriendSetForFriendSetId|,7,Annotation (note) contains the socialFriendSet entries for this group

********** operation = giftCardRedeem (NO)
 field = giftCardId|1|idLong:giftCard,1,1,,,,,,,0
 field = partnerId|2|idInt:partner,0,1,low,,,,,,0
 fieldGroup = headerFields
 number = 362
 returnType = giftCardStatus
   description = Redeem a giftcard
   field = partnerId|,,Partner Id field.  determined by the client certificate

********** operation = giftCardSearch (NO)
 field = giftCardId|1|idLong:giftCard,1,1,,,,,,,0
 field = partnerId|2|idInt:partner,0,1,low,,,,,,0
 fieldGroup = giftCardSearchFields
 fieldGroup = headerFields
 number = 363
 returnType = giftCard
   description = Search a giftcard.
   field = giftCardId|,,Limits the search to an object with exactly the same value in this field.
   field = partnerId|,,Partner Id field.  determined by the client certificate

********** operation = giftCardValidate (NO)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 field = giftCardId|2|idLong:giftCard,1,1,,,,,,,0
 field = partnerId|3|idInt:partner,0,1,low,,,,,,0
 field = sku|4|string,1,1,,,,,,,0
 fieldGroup = giftCardValidateFields
 fieldGroup = headerFields
 number = 365
 returnType = giftCard
   description = Validate a giftcard.
   field = bodyId|,,TSN
   field = partnerId|,,Partner Id field.  determined by the client certificate

********** operation = gridRowSearch (YES)
 field = addField|1|string,0,,,,,2,,,0
 field = advancedKeyword|2|boolean,0,1,,,,,,,0
 field = anchor|3|anchorDict,0,1,,,,,,,0
 field = anchorChannel|4|channelNumber,0,1,,,,,,,0
 field = anchorChannelIdentifier|101|struct:channelIdentifier,0,1,,,,,,,0
 field = assetId|5|idLong:asset,0,1,,,,,,,0
 field = bodyId|6|idBody:body,0,1,,,,,,,0
 field = categoryId|7|idLong:category,0,,,,,,,,0
 field = channel|8|struct:channel,0,1,,,,,,,0
 field = channelId|9|idInt:channel,0,1,,,,,,,0
 field = collectionId|10|idLong:collection,0,,,,,,,,0
 field = collectionType|69|enum:collectionType,0,,,,,,,,0
 field = contentId|11|idLong:content,0,,,,,,,,0
 field = correlatedCollectionId|12|idLong:collection,0,1,,,,,,,0
 field = count|13|int,0,1,,1,,,1,,0
 field = credit|14|struct:credit,0,,,,,,,,0
 field = creditKeyword|15|string,0,1,,,,,,100,0
 field = creditKeywordRole|84|enum:role,0,1,,,,,,,0
 field = descriptionKeyword|16|string,0,1,,,,,,100,0
 field = descriptionLanguage|81|string,0,1,,,,,,64,0
 field = descriptionPrefix|100|string,0,1,,,,,,100,0
 field = disableIsReceivedDefault|17|boolean,0,1,,,,6,,,0
 field = ei|18|boolean,0,1,,,,,,,0
 field = episodeNum|72|int,0,1,,,3,,0,,0
 field = episodic|68|boolean,0,1,,,,,,,0
 field = excludeCollectionId|71|idLong:collection,0,,,,,,,,0
 field = excludeContentId|87|idLong:content,0,,,,,,,,0
 field = fallbackImageObjectType|99|enum:fallbackImageObjectType,0,1,,,,,,,0
 field = format|19|enum:format,0,1,,,,,,,0
 field = groupBy|20|string,0,,,,,,,32,0
 field = hasCorrelatedCollections|75|boolean,0,1,,,,,,,0
 field = hdtv|21|boolean,0,1,,,,,,,0
 field = idSetSource|91|union:idSetSource,0,1,,,3,,,,0
 field = includeCreditsInKeywordSearch|83|boolean,0,1,,false,,,,,0
 field = includeMissingDependentObjects|85|boolean,0,1,,false,,,,,0
 field = includeOverridingCollections|82|boolean,0,1,,false,,,,,0
 field = includeOverridingContent|73|boolean,0,1,,false,,,,,0
 field = includePurchasableFrom|96|enum:mindClient,0,,,,,,,,0
 field = isAdult|22|boolean,0,1,,,,,,,0
 field = isBlocked|95|boolean,0,1,medium,,,,,,0
 field = isFavorite|23|boolean,0,1,medium,,,,,,0
 field = isReceived|24|boolean,0,1,medium,,,,,,0
 field = isSuggested|25|boolean,0,1,,,,,,,0
 field = keyword|26|string,0,1,,,,,,100,0
 field = levelOfDetail|27|enum:levelOfDetail,0,1,,,,,,,0
 field = lineup|28|struct:lineup,0,,,,,,,,0
 field = matchedField|103
 field = maxAvailableStartTime|29|dateTime,0,1,,,,,,,0
 field = maxCreateDate|76|dateTime,0,1,,,,,,,0
 field = maxEndTime|30|dateTime,0,1,,,,,,,0
 field = maxMpaaRating|78|enum:mpaaRating,0,1,,,,,,,0
 field = maxPrice|31|currency,0,1,,,,,,,0
 field = maxStartTime|32|dateTime,0,1,,,,,,,0
 field = maxStartTimeOffset|92|int,0,1,,,,,,,0
 field = maxTvRating|79|enum:tvRating,0,1,,,,,,,0
 field = maxUpdateDate|74|dateTime,0,1,,,,,,,0
 field = mimeSubtype|33|string,0,1,,,,,,128,0
 field = mimeTopLevelType|34|string,0,1,,,,,,128,0
 field = minAvailableEndTime|35|dateTime,0,1,,,,,,,0
 field = minCreateDate|77|dateTime,0,1,,,,,,,0
 field = minEndTime|36|dateTime,0,1,,,,,,,0
 field = minEndTimeOffset|93|int,0,1,,,,,,,0
 field = minPrice|37|currency,0,1,,,,,,,0
 field = minStarRating|89
 field = minStartTime|38|dateTime,0,1,,,,,,,0
 field = minUpdateDate|39|dateTime,0,1,,,,,,,0
 field = movieYear|70|int,0,1,,,,,1000,3000,0
 field = namespace|40|enum:namespace,0,1,,,,,,,0
 field = notCategoryId|98|idLong:category,0,,,,,,,,0
 field = note|41|string,0,,,,,,,,0
 field = offset|42|int,0,1,,0,,,,,0
 field = omitMpaaRating|43|enum:mpaaRating,0,,,,,,,,0
 field = omitTvRating|44|enum:tvRating,0,,,,,,,,0
 field = orCredit|45|struct:credit,0,,,,,2,,,0
 field = orderBy|46|string,0,,,,,,,32,0
 field = partnerAssetId|88|string,0,1,,,,,,,0
 field = partnerCollectionId|47|string,0,1,,,,,,100,0
 field = partnerContentId|48|string,0,1,,,,,,100,0
 field = partnerId|49|idInt:partner,0,1,,,,,,,0
 field = partnerOfferId|50|string,0,,,,,,,100,0
 field = preview|102|boolean,0,1,,,,,,,0
 field = providerId|51|string,0,1,,,,2,,20,0
 field = removeField|52|string,0,,,,,2,,,0
 field = repeat|80|boolean,0,1,,,,,,,0
 field = responseTemplate|90|struct:responseTemplate,0,,,,,,,,0
 field = searchable|53|boolean,0,1,high,,,,,,0
 field = seasonNumber|54|int,0,1,,,,,0,,0
 field = shortTitle|55|string,0,1,,,5,,,128,0
 field = skipPartnerExclusion|94|boolean,0,1,,,,,,,0
 field = startTime|56|dateTime,0,1,,,,,,,0
 field = subtitle|97|string,0,1,,,,,,255,0
 field = subtitleKeyword|57|string,0,1,,,,,,100,0
 field = subtitlePrefix|58|string,0,1,,,,,,100,0
 field = title|59|string,0,1,,,,,,128,0
 field = titleKeyword|60|string,0,1,,,,,,128,0
 field = titlePrefix|61|string,0,1,,,,,,128,0
 field = transportSubset|62|anyDict,0,,,,,,,,0
 field = transportType|63|enum:offerTransportType,0,,,,,,,,0
 field = unreceivedChannelsOnly|86|boolean,0,1,,false,,,,,0
 field = url|64|url,0,1,high,,,,,,0
 field = useAnchorOperation|65|boolean,0,1,,true,,,,,0
 field = useDefaultTransportType|66|boolean,0,1,,true,,8,,,0
 field = useLineup|67|boolean,0,1,,,,,,,0
 fieldGroup = offerSearchFields
 fieldGroup = channelSearchFields
 fieldGroup = contentSearchFields
 fieldGroup = collectionSearchFields
 fieldGroup = searchFields
 isFrozen = true
 number = 368
 orderBy = -callSign
 orderBy = channelNumber
 returnType = gridRowList
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = advancedKeyword|,,When searching with option=advanced, a boolean mode search is done where words starting with   are ANDed together, words starting with - are NOTd, words with * are substring matched, and words enclosed in "" are looked at as a phrase.  Currently not supported in contentSearch or collectionSearch
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = anchorChannel|,,The channel number to anchor this grid on.  Note: anchorChannel is deprecated in favor of anchorChannelIdentifier.
   field = anchorChannelIdentifier|,,The channel Identifier to anchor this grid on.  ChannelNumber is required if AnchorChannelIdentifier is used. StationId and SourceType are optional to reduce identical channel number results from different sources and/or with different stationIds.  Note that the match is based on a sort order of Channel Number, then Station ID, then Source Type.  This means that if the Station ID is specified, the StationId will be "Anchored" before Source Type.  Channel Number is always anchored first.
   field = bodyId|,,Restricts the search to offers (or offered content) that is available on this body.  For bodies that sync with the mind, availability is based on the list of channels that the body has sent up.  Only channels that have isReceived=true are used.  For bodies that have not synced with the mind, availability is based on the lineup retrieved from the BSM, and all channels are used.  BodyId is also required to use the isSchedulable filter.
   field = categoryId|,,If multiple categoryIds are specified, they will be ANDed together in the query
   field = channel|,,Limits the search to an object with exactly the same value in this field.
   field = channelId|,,Limits the search to an object with exactly the same value in this field.
   field = collectionType|,,Limits the search to an object with exactly the same value in this field.
   field = contentId|,,Limits the search to an object with exactly the same value in this field.
   field = correlatedCollectionId|,,Restricts the search to the collection ids correlated to this collection id.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = credit|,,Currently not supported in contentSearch. If multiple credits provided, they will be ORd
   field = creditKeyword|,,Currently not supported in contentSearch or collectionSearch
   field = creditKeywordRole|,,Only applies if a creditKeyword is passed in
   field = descriptionKeyword|,,Currently not supported in contentSearch or collectionSearch
   field = descriptionLanguage|,,Limits the search to an object with exactly the same value in this field.
   field = disableIsReceivedDefault|,6,In mind versions prior to mind7, the default for isReceived was "true".  This was inconsistent with other mind queries: the general policy is that not setting something in a query means that you get all objects.  Setting this field to "true" switches to the normal and proper behavior.
   field = ei|,,Only offers of EI (Educational and Informational) content are returned if this value is set to "true".  If this is set to "false", only non-EI content will be returned. If this is not set, both EI and non-EI content will be returned.
   field = episodeNum|3,,Limits the search to an object with exactly the same value in this field.
   field = episodic|,,constrains the result to only episodic collections if set to true and only non-episodic collections if set to false.
   field = fallbackImageObjectType|,,If set, this object type will be used to replace the main object's image if the main object's image is not available based on the input ruleset
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = hasCorrelatedCollections|,,if TRUE, constrains the result set to only those that have correlation data available. FALSE is not supported.
   field = hdtv|,,Limits the search to an object with exactly the same value in this field.
   field = includeCreditsInKeywordSearch|,,If set to true, the keyword filter will include credits in the search in addition title, subtitle and description
   field = includeMissingDependentObjects|,,allows one to specify, if offer search, should return offers that are missing depedent objects(like asset,content,collection etc.)
   field = includeOverridingCollections|,,When partners wish to author their own metadata for a collection object, while maintaining the link to the broadcast collection object, they store the original collectionId in the overriddenCollectionId field of the collection object. Passing true for this flag, along with a collectionId, will result in both the collectionId and the overriddenCollectionId fields to be searched. The result is that both the collection corresponding to the collectionId and any collections overriding that collection will be returned. Passing true for this flag without passing a collectionId is illegal.
   field = includeOverridingContent|,,When partners wish to author their own metadata for a content object, while maintaining the link to the broadcast content object, they store the original contentId in the overriddenContentId field of the content object. Passing true for this flag, along with a contentId, will result in both the contentId and the overriddenContentId fields to be searched. The result is that both the content corresponding to the contentId and any contents overriding that content will be returned. Passing true for this flag without passing a contentId is illegal.
   field = includePurchasableFrom|,,For CDS offers, filter by purchasableFrom field If this field is null, then do not apply filter 
   field = isAdult|,,Limits the search to an object with exactly the same value in this field.
   field = isBlocked|,,Limits the results to those on channels that have been blocked by the user via Parental Controls.
   field = isFavorite|,,Limits the results to those on channels that have the isFavorite attribute set to true. Default is unset, meaning that results from all channels will be returned. Only this or the isReceived attribute should be set.  If both are set, the query result is undefined.
   field = isReceived|,,Limits the search to an object with exactly the same value in this field.
   field = isSuggested|,,Restricts the search result to offers that are suggested based on predictive thumbs
   field = keyword|,,The keyword field is used to search through title, subtitle and description to find program matches.  The results are ordered in a way that makes sense.  Wildcards and double-quotes are supported.  Currently not supported in contentSearch or collectionSearch
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = lineup|,,Restricts the search to offers from the named lineup.
   field = maxAvailableStartTime|,,Returns offers whose availableStartTime is less than or equal to maxAvailableStartTime
   field = maxEndTime|,,Returns offers whose endTime is less than or equal to maxEndTime
   field = maxMpaaRating|,,filter out results whose mpaaRatings or tvRatings are "worse" than this mpaaRating.
   field = maxStartTime|,,Returns offers whose startTime is less than or equal to maxStartTime
   field = maxStartTimeOffset|,,maxStartTime N seconds in the future. Useful in storing as searchRequest
   field = maxTvRating|,,filter out results whose mpaaRatings or tvRatings are "worse" than this tvRating.
   field = mimeSubtype|,,not implemented
   field = mimeTopLevelType|,,not implemented
   field = minAvailableEndTime|,,Returns offers whose availableEndTime is greater than or equal to minAvailableEndTime
   field = minEndTime|,,Returns offers whose endTime is greater than or equal to minEndTime
   field = minEndTimeOffset|,,minEndTime N seconds in the future. Useful in storing as searchRequest
   field = minStartTime|,,Returns offers whose startTime is greater than or equal to minStartTime
   field = movieYear|,,Limits the search to an object with exactly the same value in this field.
   field = namespace|,,Which namespace to search in
   field = notCategoryId|,,Filter out results that contain any of the notCategoryIds present in the request.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = omitMpaaRating|,,Offers with these mpaa ratings should not be returned.  This can be used to hide "adult" programs
   field = omitTvRating|,,Offers with these TV Ratings should not be returned.  This can be used to hide "adult" programs
   field = orCredit|,2,Put this credit in an OR with other orCredits.  Currently not supported in contentSearch or collectionSearch
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = partnerCollectionId|,,Limits the search to an object with exactly the same value in this field.
   field = partnerContentId|,,Limits the search to an object with exactly the same value in this field.
   field = partnerId|,,Limits the search to an object with exactly the same value in this field.
   field = partnerOfferId|,,The partner's own offer Id.
   field = preview|,,A boolean indicating whether this offer search is for a preview offer.
   field = providerId|,2,Limits the search to an object with exactly the same value in this field.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = searchable|,,Limits the search to an object with exactly the same value in this field.
   field = seasonNumber|,,Limits the search to an object with exactly the same value in this field.
   field = shortTitle|5,,Limits the search to an object with exactly the same value in this field.
   field = skipPartnerExclusion|,,Skip partnerExclusion check of offers even if they are passed in request. Used only internally for some special cases. For example, when body excludes a partner from the screen, but later schedules a download from that partner's web site. 
   field = startTime|,,Limits the search to an object with exactly the same value in this field.
   field = subtitle|,,Limits the search to an object with exactly the same value in this field.
   field = subtitleKeyword|,,Currently not supported in contentSearch or collectionSearch
   field = title|,,Limits the search to an object with exactly the same value in this field.
   field = transportSubset|,,Search a subset of the dictionary that defines the transport.  Only offers whose transport dictionaries contain all of the things in this dictionary will be returned.  If multiple transports are specified, they will be ORd together.
   field = unreceivedChannelsOnly|,,if TRUE, constrain the result set to unreceived channels for the bodyId. if FALSE, search for both received channels and unreceived channels.
   field = url|,,Limits the search to an object with exactly the same value in this field.
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   field = useDefaultTransportType|,8,mind9 and forward will require a transportType. previous versions don't, so we'll use this to allow them to continue not requiring one, while allowing a way for us to start requiring one with mind9
   field = useLineup|,,forces query to use headend and lineup instead of custom channel list
   fieldProject = advancedKeyword|0|0|0|partner-schedule
   fieldProject = assetId|0|0|0|hme-cds,partner-cds
   fieldProject = bodyId|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = categoryId|0|0|0|partner-schedule
   fieldProject = channel|0|0|0|partner-schedule,partner-subscribe
   fieldProject = channelId|0|0|0|partner-schedule,partner-subscribe
   fieldProject = collectionId|0|0|0|partner-schedule
   fieldProject = contentId|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = count|0|0|0|all
   fieldProject = credit|0|0|0|partner-schedule
   fieldProject = creditKeyword|0|0|0|partner-schedule
   fieldProject = creditKeywordRole|0|0|0|partner-schedule
   fieldProject = descriptionKeyword|0|0|0|partner-schedule
   fieldProject = descriptionLanguage|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = episodeNum|0|3|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = episodic|0|0|0|partner-cds
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = hdtv|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = includeCreditsInKeywordSearch|0|0|0|partner-schedule
   fieldProject = isReceived|0|0|0|partner-schedule,partner-subscribe
   fieldProject = keyword|0|0|0|partner-schedule
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = lineup|0|0|0|partner-schedule
   fieldProject = maxAvailableStartTime|0|0|0|hme-cds
   fieldProject = maxEndTime|0|0|0|partner-schedule,partner-subscribe
   fieldProject = maxStartTime|0|0|0|partner-schedule,partner-subscribe
   fieldProject = minAvailableEndTime|0|0|0|hme-cds
   fieldProject = minEndTime|0|0|0|partner-schedule,partner-subscribe
   fieldProject = minStartTime|0|0|0|partner-schedule,partner-subscribe
   fieldProject = movieYear|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = namespace|0|0|0|partner-schedule,partner-cds,partner-subscribe
   fieldProject = offset|0|0|0|all
   fieldProject = omitMpaaRating|0|0|0|partner-schedule,partner-subscribe
   fieldProject = omitTvRating|0|0|0|partner-schedule,partner-subscribe
   fieldProject = orderBy|0|0|0|all
   fieldProject = partnerAssetId|0|0|0|hme-cds,partner-cds
   fieldProject = partnerCollectionId|0|0|0|partner-cds
   fieldProject = partnerContentId|0|0|0|partner-cds
   fieldProject = partnerId|0|0|0|hme-cds,partner-cds
   fieldProject = partnerOfferId|0|0|0|hme-cds,partner-cds
   fieldProject = responseTemplate|0|0|0|all
   fieldProject = searchable|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = seasonNumber|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = startTime|0|0|0|partner-schedule,partner-subscribe
   fieldProject = subtitle|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = subtitleKeyword|0|0|0|partner-schedule
   fieldProject = title|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = titleKeyword|0|0|0|partner-schedule,partner-cds,partner-subscribe
   fieldProject = titlePrefix|0|0|0|partner-schedule,partner-cds,partner-subscribe
   fieldProject = transportType|0|0|0|hme-cds,partner-cds

********** operation = guestUserInfoWrite (NO)
 field = contactMe|1|boolean,1,1,,,,,,,0
 field = email|2|string,1,1,,,,,,,0
 field = postalCode|3|string,1,1,,,,,,,0
 number = 2087
 returnType = success
   description = store information about guest users 

********** operation = guruGuideReport (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = count|3|int,0,1,,1,,,1,,0
 field = format|4|enum:format,0,1,,,,,,,0
 field = groupBy|5|string,0,,,,,,,32,0
 field = levelOfDetail|6|enum:levelOfDetail,0,1,,,,,,,0
 field = maxUpdateDate|7|dateTime,0,1,,,,,,,0
 field = minUpdateDate|8|dateTime,0,1,,,,,,,0
 field = note|9|string,0,,,,,,,,0
 field = offset|10|int,0,1,,0,,,,,0
 field = orderBy|11|string,0,,,,,,,32,0
 field = removeField|12|string,0,,,,,2,,,0
 field = responseTemplate|14|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|13|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 isFrozen = true
 number = 371
 returnType = guruGuideList
   description = A simple Guru Guide report. Shows number of subscribers for each Guru Guide.
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = hasBroadbandOffersSearch (NO)
 field = bodyId|6|idBody:body,0,1,,,,,,,0
 field = collectionId|1|idLong:collection,0,,,,,,,,0
 field = contentId|5|idLong:content,0,,,,,,,,0
 field = excludePartnerId|2|idInt:partner,0,,,,,,,,0
 field = minAvailableEndTime|3|dateTime,0,1,,,,,,,0
 field = vodLocality|4|string,0,1,,,,,,,0
 isFrozen = true
 number = 372
 returnType = idSet
   field = bodyId|,,Restricts search to offers available for this bodyId.
   field = collectionId|,,Restricts the search to the collection with this id
   field = contentId|,,Restricts the search to the content with this id
   field = minAvailableEndTime|,,Offers whose availableEndTime is greater than or equal to minAvailableEndTime
   fieldProject = minAvailableEndTime|0|0|0|hme-cds

********** operation = hasBroadcastOffersSearch (NO)
 field = bodyId|3|idBody:body,0,1,,,,,,,0
 field = collectionId|1|idLong:collection,0,,,,,,,,0
 field = contentId|2|idLong:content,0,,,,,,,,0
 isFrozen = true
 number = 785
 returnType = idSet
   field = collectionId|,,Restricts the search to the collection with this id
   field = contentId|,,Restricts the search to the content with this id

********** operation = hdmiDeviceRemove (NO)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 field = sourceProductDescription|2|string,1,1,,,,,,,0
 number = 1413
 returnType = success
   description = Removes a hdmiDevice object from the mind.

********** operation = hdmiDeviceSearch (NO)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 field = name|2|string,0,,,,,,,,0
 field = sourceProductDescription|3|string,0,,,,,,,,0
 number = 1414
 returnType = hdmiDeviceList
   description = Retrieves information about known HDMI devices.
   field = bodyId|,,Limits the search to an object with exactly the same value in this field.
   field = name|,,Limits the search to an object with exactly the same value in this field.
   field = sourceProductDescription|,,Limits the search to an object with exactly the same value in this field.

********** operation = hdmiDeviceStore (NO)
 field = bodyId|1|idBody:body,1,1,low,,,,,,0
 field = name|2|string,0,1,low,,,,,,0
 field = sourceProductDescription|3|string,1,1,low,,,,,,0
 number = 1415
 returnType = hdmiDevice
   description = Stores a new or a modified hdmiDeviceobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = bodyId|,,The body ID.
   field = name|,,The name of this device.  This will be the name that users supply.
   field = sourceProductDescription|,,The source product description.  This is provided by the device itself through HDMI.

********** operation = hdmiPortSearch (NO)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 field = number|2|int,0,,,,,,,,0
 field = sourceProductDescription|3|string,0,,,,,,,,0
 number = 1418
 returnType = hdmiPortList
   description = Retrieves information about HDMI input ports.  If this is used as a monitoring query, the full search results are returned any time any port in the query (or any port in general if no specific ports are specified) changes.
   field = bodyId|,,Limits the search to an object with exactly the same value in this field.
   field = number|,,Limits the search to an object with exactly the same value in this field.
   field = sourceProductDescription|,,Limits the search to an object with exactly the same value in this field.

********** operation = howToWatchSearch (YES)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 field = collectionId|2|idLong:collection,0,1,low,,,,,,0
 field = contentId|3|idLong:content,0,1,low,,,,,,0
 field = count|4|int,0,1,,1,,,1,,0
 field = excludeObjectIdAndType|5|long,0,,,,,,,,0
 field = format|6|enum:format,0,1,,,,,,,0
 field = groupBy|7|string,0,,,,,,,32,0
 field = levelOfDetail|8|enum:levelOfDetail,0,1,,,,,,,0
 field = note|9|string,0,,,,,,,,0
 field = objectIdAndType|10|long,0,,,,,,,,0
 field = offset|11|int,0,1,,0,,,,,0
 field = orderBy|12|string,0,,,,,,,32,0
 field = resolveCount|13|int,0,1,,0,,,,,0
 field = resolveLevelOfDetail|14|enum:levelOfDetail,0,1,,low,,,,,0
 field = resolveOffset|15|int,0,1,,0,,,,,0
 field = responseTemplate|16|struct:responseTemplate,0,,,,,,,,0
 field = webVideoId|18|idLong:webVideo,0,1,low,,,,,,0
 field = when|17|enum:whenToWatch,0,1,,,,,,,0
 fieldGroup = resolveSearchFields
 fieldGroup = searchFieldsNoAnchoring
 number = 1950
 returnType = howToWatchList
   description = Searches for the ways to watch a particular piece of content on a given body.
   field = bodyId|,,Limits the search to an object with exactly the same value in this field.
   field = collectionId|,,The show that you want to watch.
   field = contentId|,,The episode that you want to watch.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = excludeObjectIdAndType|,,An objectIdAndType from an idSequence obtained in a previous search operation, to be excluded from the result set.
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = objectIdAndType|,,Limits the search to an object with exactly the same value in this field.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = resolveCount|,,If a format of (string)idSequence is specified, the count of objectIds that should be resolved into objects. Ignored unless format = (string)idSequence.
   field = resolveLevelOfDetail|,,If a format of (string)idSequence is specified, the levelOfDetail at which the objects should be resolved.  Ignored unless resolveCount > 0 and format = (string)idSequence.
   field = resolveOffset|,,If a format of (string)idSequence is specified, the offset into the objectId list that should be resolved into objects. Ignored unless resolveCount > 0 and format = (string)idSequence.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = webVideoId|,,The webVideo that you want to watch.
   field = when|,,Specifies what time frames should be searched.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = idContainerListGet (NO)
 field = groupBy|1|string,0,,,,,,,,0
 field = orderBy|2|string,0,,,,,,,,0
 field = request|3|knownDict,1,,,,,,,,0
 number = 1287
 returnType = idContainerList
   description = test hook to get the idContainers and idContainerGroups from mind requests. 
   field = request|,,a fully-formed search request, minus ordering and grouping

********** operation = idSearch (YES)
 field = namespace|1|string,1,1,,,,,,32,0
 field = objectId|2|objectId28,1,1,,,,,,,0
 isFrozen = true
 number = 374
 returnType = idSet
   description = Searches for corresponding id in the given namespace.  Input objectId28 prefixed by namespace:type.
   field = objectId|,,Limits the search to an object with exactly the same value in this field.

********** operation = idSetSourceGet (NO)
 field = subscription|1|struct:subscription,1,1,,,,,,,0
 number = 376
 returnType = idSet
   description = Test hook to exercise the IdSetSource class.  Takes an idSetSource dictionary, returns the idSet that it produces.

********** operation = idSetSourceGetOffers (NO)
 field = isSchedulable|1|boolean,0,1,,false,,,,,0
 field = maxReturn|2|int,0,1,,,,,,,0
 field = subscription|3|struct:subscription,1,1,,,,,,,0
 number = 377
 returnType = offerList
   description = Test hook to exercise the IdSetSource class.  Takes an idSetSource dictionary, returns the offerList from the IdSetSource.getOffers() method.

********** operation = idSetSourceGetUiType (NO)
 field = subscription|1|struct:subscription,1,1,,,,,,,0
 number = 862
 returnType = uiTypeTestResponse
   description = Test hook to exercise the IdSetSource class.  Takes an idSetSource dictionary, returns the uiType from the IdSetSource.getUiType() method.

********** operation = identifiedSocialOperation (NO)
 field = identity|1|struct:socialIdentity,1,1,,,,,,,0
 field = socialOperation|2|knownDict,1,1,,,,,,,0
 number = 1745
 returnType = knownDict
   description = a generic social-operation that wraps an existing social-operation and the social identity  of the requesting user 

********** operation = imageBundleInstructionsGet (NO)
 field = bodyId|1|idBody:body,1,1,low,,,,,,0
 field = callId|2|string,1,1,low,,,,,,0
 field = imageBundleId|3|string,0,,low,,,,,,0
 field = requestToken|4|anyDict,0,1,low,,,,,,0
 field = softwareVersion|5|string,1,1,low,,,,,,0
 field = userInitiated|6|boolean,1,1,low,,,,,,0
 number = 1840
 returnType = imageBundleInstructions
   description = This operation returns information for retrieving an image bundle. Which image bundle will be referenced will typically depend on group mappings of the image bundle and the body.
   field = callId|,,A session ID.  Historically, a session of a Service call is called a "call". Using "callId" here enables more straightforward correlation to the trackerDb. Typically, the client would send Unix time, in seconds. This same value should be used as the callId for the entire session, meaning the invocation of callInstructionsGet plus each of the subsequent invocations of sub-operations, if any.
   field = imageBundleId|,,An opaque string identifier, intended to uniquely identify an image bundle A client may use this field to indicate the image bundle ID of the image bundle already received.  imageBundleInstructionsGet will omit an image bundle from the response that matches an image bundle ID mentioned here in this field.  The intent is to provide a way for the client to avoid having to process an image bundle unnecessarily. This same concept is used by secureBlobInstructionGet's payloadId field.
   field = requestToken|,,Typically the "resultToken" of the previous *InstructionsGet response. If this is the first call, then this field is omitted. As an anyDict field, we have extensibility here.
   field = softwareVersion|,,The currently installed software version on the body. This field is mostly intended for informational logging and potentially identifying what software features are currently available to the client.
   field = userInitiated|,,Was this invocation initiated by explicit user action, rather than programmatically, based on callbackSeconds information? This is mainly informational.

********** operation = imageCreate (NO)
 field = displayRank|1|int,0,1,low,,,,,,0
 field = height|2|int,1,1,low,,,,1,4096,0
 field = imageId|3|idLong:image,0,1,low,,,,,,0
 field = imageType|4|enum:imageType,1,1,low,,,,,,0
 field = imageUrl|5|imageUrl,1,1,low,,,,,,0
 field = partnerId|6|idInt:partner,0,1,low,,,,,,0
 field = partnerInfo|7|struct:partnerInfo,0,1,high,,,,,,1
 field = textOverlay|9|string,0,1,low,,,,,1024,0
 field = width|8|int,1,1,low,,,,1,4096,0
 fieldGroup = imageFields
 isFrozen = true
 number = 995
 returnType = image
   description = Create a new image or return an existing image
   field = displayRank|,,If 2 images are identical in height, width, imageType, objectType, objectId, then displayRank will instruct the UI which image to display first.  1 is higher priority.  2 is next, and so forth.
   field = height|,,image height in pixels.
   field = imageId|,,id of the image. In PGD land, imageId is generated during PGD replication process. In CDS land, imageId is generated by the mind.
   field = imageUrl|,,URL of the image. In PGD land, we download images from TMS, and host them on www.tivo.com In CDS land, partner hosts the images.
   field = partnerId|,,Id of the partner that created the object.
   field = partnerInfo|,,a container for the partnerInfoForPartnerId annotation
   field = textOverlay|,,If not null, client should add this text overlaying image
   field = width|,,image width in pixels.
   fieldProject = partnerId|0|0|0|hme-cds,partner-cds

********** operation = imageFetchingInstructionsGet (NO)
 field = bodyId|1|idBody:body,1,1,low,,,,,,0
 field = callId|2|string,1,1,low,,,,,,0
 field = requestToken|3|anyDict,0,1,low,,,,,,0
 field = softwareVersion|4|string,1,1,low,,,,,,0
 field = userInitiated|5|boolean,1,1,low,,,,,,0
 number = 2089
 returnType = imageFetchingInstructions
   description = This operation returns information for fetching images.
   field = callId|,,A session ID.  Historically, a session of a Service call is called a "call". Using "callId" here enables more straightforward correlation to the trackerDb. Typically, the client would send Unix time, in seconds. This same value should be used as the callId for the entire session, meaning the invocation of callInstructionsGet plus each of the subsequent invocations of sub-operations, if any.
   field = requestToken|,,Typically the "resultToken" of the previous *InstructionsGet response. If this is the first call, then this field is omitted. As an anyDict field, we have extensibility here.
   field = softwareVersion|,,The currently installed software version on the body. This field is mostly intended for informational logging and potentially identifying what software features are currently available to the client.
   field = userInitiated|,,Was this invocation initiated by explicit user action, rather than programmatically, based on callbackSeconds information? This is mainly informational.

********** operation = imageMappingCreate (NO)
 field = collectionId|1|idLong:collection,0,1,,,,,,,0
 field = contentId|2|idLong:content,0,1,,,,,,,0
 field = image|3|struct:image,1,,,,,,,,0
 field = offerId|4|idString:offer,0,1,,,,,,,0
 field = partnerId|5|idInt:partner,1,1,,,,,,,0
 field = personId|6|idLong:person,0,1,,,,,,,0
 isFrozen = true
 number = 1105
 returnType = success
   description = This operation allows a single mind call to: 1) Create one or more images. 2) Map those images to an object

********** operation = imageRemove (NO)
 field = imageId|1|idLong:image,1,1,,,,,,,0
 isFrozen = true
 number = 970
 returnType = success
   description = Removes a image object from the mind.

********** operation = imageSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = count|3|int,0,1,,1,,,1,,0
 field = format|4|enum:format,0,1,,,,,,,0
 field = groupBy|5|string,0,,,,,,,32,0
 field = height|6|int,0,1,,,,,1,4096,0
 field = imageId|7|idLong:image,0,1,,,,,,,0
 field = imageType|8|enum:imageType,0,1,,,,,,,0
 field = imageUrl|9|imageUrl,0,1,,,,,,,0
 field = levelOfDetail|10|enum:levelOfDetail,0,1,,,,,,,0
 field = note|11|string,0,,,,,,,,0
 field = offset|12|int,0,1,,0,,,,,0
 field = orderBy|13|string,0,,,,,,,32,0
 field = partnerId|14|idInt:partner,0,1,,,,,,,0
 field = removeField|15|string,0,,,,,2,,,0
 field = responseTemplate|18|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|16|boolean,0,1,,true,,,,,0
 field = width|17|int,0,1,,,,,1,4096,0
 fieldGroup = searchFields
 number = 971
 returnType = imageList
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = height|,,Limits the search to an object with exactly the same value in this field.
   field = imageId|,,Limits the search to an object with exactly the same value in this field.
   field = imageType|,,Limits the search to an object with exactly the same value in this field.
   field = imageUrl|,,Limits the search to an object with exactly the same value in this field.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = partnerId|,,Limits the search to an object with exactly the same value in this field.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   field = width|,,Limits the search to an object with exactly the same value in this field.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = partnerId|0|0|0|hme-cds,partner-cds
   fieldProject = responseTemplate|0|0|0|all

********** operation = imageStore (NO)
 field = displayRank|1|int,0,1,low,,,,,,0
 field = height|2|int,1,1,low,,,,1,4096,0
 field = imageId|3|idLong:image,0,1,low,,,,,,0
 field = imageType|4|enum:imageType,1,1,low,,,,,,0
 field = imageUrl|5|imageUrl,1,1,low,,,,,,0
 field = partnerId|6|idInt:partner,0,1,low,,,,,,0
 field = partnerInfo|8|struct:partnerInfo,0,1,high,,,7,,,1
 field = rulesetName|9|string,0,,low,,,7,,32,0
 field = textOverlay|10|string,0,1,low,,,7,,1024,0
 field = width|7|int,1,1,low,,,,1,4096,0
 isFrozen = true
 number = 972
 returnType = image
   description = Stores a new or a modified imageobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = displayRank|,,If 2 images are identical in height, width, imageType, objectType, objectId, then displayRank will instruct the UI which image to display first.  1 is higher priority.  2 is next, and so forth.
   field = height|,,image height in pixels.
   field = imageId|,,id of the image. In PGD land, imageId is generated during PGD replication process. In CDS land, imageId is generated by the mind.
   field = imageUrl|,,URL of the image. In PGD land, we download images from TMS, and host them on www.tivo.com In CDS land, partner hosts the images.
   field = partnerId|,,Id of the partner that created the object.
   field = partnerInfo|,7,a container for the partnerInfoForPartnerId annotation
   field = rulesetName|,7,if the image was added because it matched an imageRuleset,  this is the name of the imageRuleset. It's possible that an  image matched multiple imageRulesets, in which case each name  will be listed.
   field = textOverlay|,7,If not null, client should add this text overlaying image
   field = width|,,image width in pixels.
   fieldProject = partnerId|0|0|0|hme-cds,partner-cds

********** operation = infoGet (NO)
 field = bodyId|1|idBody:anyBody,0,1,,,,,,,0
 isFrozen = true
 number = 380
 returnType = info
   description = A request for the info about the mind itself. InfoGet now takes a bodyId so we can route to the approprate cluster and verify that the routing is correct by looking at the clusterId

********** operation = inhibitClosedCaptioningDisplay (NO)
 field = inhibitCaptioning|1|boolean,1,1,,,,,,,0
 number = 383
 returnType = success
   description = Prevents closed captioning from being rendered.  This is meant to be used to inhibit closed captioning display temporarily during certain UI operations.
   field = inhibitCaptioning|,,inhibit captions - if true, captions will be inhibited; if false, captions will not be inhibited.

********** operation = instructionsGetBase (NO)
 field = bodyId|1|idBody:body,1,1,low,,,,,,0
 field = callId|2|string,1,1,low,,,,,,0
 field = requestToken|3|anyDict,0,1,low,,,,,,0
 field = softwareVersion|4|string,1,1,low,,,,,,0
 field = userInitiated|5|boolean,1,1,low,,,,,,0
 fieldGroup = instructionsGetFields
 number = 1737
 returnType = instructionsBase
   description = Omit authentication fields intentionally for this base operation. This should make sure that invoking this base operation directly doesn't get past the proxies.
   field = callId|,,A session ID.  Historically, a session of a Service call is called a "call". Using "callId" here enables more straightforward correlation to the trackerDb. Typically, the client would send Unix time, in seconds. This same value should be used as the callId for the entire session, meaning the invocation of callInstructionsGet plus each of the subsequent invocations of sub-operations, if any.
   field = requestToken|,,Typically the "resultToken" of the previous *InstructionsGet response. If this is the first call, then this field is omitted. As an anyDict field, we have extensibility here.
   field = softwareVersion|,,The currently installed software version on the body. This field is mostly intended for informational logging and potentially identifying what software features are currently available to the client.
   field = userInitiated|,,Was this invocation initiated by explicit user action, rather than programmatically, based on callbackSeconds information? This is mainly informational.

********** operation = instructionsUpdateEventRegister (NO)
 field = instructionsType|1|enum:callInstructionsRequestType,1,1,,,,,,,0
 number = 2044
 returnType = instructionsUpdateEvent
   description = Monitoring query used to listen for updates to a specified instructions structure.  When first called, a response for the specified structure will be immediately sent.  Subsequent structures will be sent whenever the information changes.
   field = instructionsType|,,Specifies the type of call to monitor for changes on.

********** operation = invalidateBodyIdInAnonymizer (NO)
 field = bodyId|1|string,1,1,,,,,,,0
 field = removeFromDatabase|2|boolean,0,1,,false,,,,,0
 field = testDelete|3|boolean,0,1,,false,,,,,0
 number = 925
 returnType = success
   description = Remove a body ID from the anonymizer.
   field = testDelete|,,For testing use only: delete row for bodyId from anonymizerLookup table

********** operation = invalidateTimsBodyIdInAnonymizer (NO)
 field = bodyId|1|string,1,1,,,,,,,0
 field = removeFromDatabase|2|boolean,0,1,,false,,,,,0
 number = 926
 returnType = success
   description = Remove a body ID from the anonymizer.

********** operation = ippvConfigInstructionsGet (NO)
 field = bodyId|1|idBody:body,1,1,low,,,,,,0
 field = callId|2|string,1,1,low,,,,,,0
 field = requestToken|3|anyDict,0,1,low,,,,,,0
 field = softwareVersion|4|string,1,1,low,,,,,,0
 field = userInitiated|5|boolean,1,1,low,,,,,,0
 number = 2073
 returnType = ippvConfigInstructions
   description = This operation will return the provisioning information of IPPV (Impulse Pay-Per-View) service needed by the body.
   field = callId|,,A session ID.  Historically, a session of a Service call is called a "call". Using "callId" here enables more straightforward correlation to the trackerDb. Typically, the client would send Unix time, in seconds. This same value should be used as the callId for the entire session, meaning the invocation of callInstructionsGet plus each of the subsequent invocations of sub-operations, if any.
   field = requestToken|,,Typically the "resultToken" of the previous *InstructionsGet response. If this is the first call, then this field is omitted. As an anyDict field, we have extensibility here.
   field = softwareVersion|,,The currently installed software version on the body. This field is mostly intended for informational logging and potentially identifying what software features are currently available to the client.
   field = userInitiated|,,Was this invocation initiated by explicit user action, rather than programmatically, based on callbackSeconds information? This is mainly informational.

********** operation = isAllowed (NO)
 field = extra|1|struct:extra,1,1,,,,,,,0
 field = operation|2|string,1,1,,,,,,,0
 number = 384
 returnType = success
   description = This operation is used to test the PermissionChecker object in the mind.  It will return success if the operation is allowed, and a notAllowed error if it's not.
   field = extra|,,The "extra" structure that would be passed into the mind. This specifies which partner is making the call, how they were authiauthenticated, which bodies are authenticated, and which accounts are authenticated.  This information is not real and is used only for testing purposes.  No operations will really be performed based on this info.
   field = operation|,,The name of the operation the client wants to do.

********** operation = jobPause (NO)
 field = jobName|1|string,1,1,,,,,,,0
 number = 1770
 returnType = schedulerResponse
   field = jobName|,,Name of the job

********** operation = jobResume (NO)
 field = jobName|1|string,1,1,,,,,,,0
 number = 1771
 returnType = schedulerResponse
   field = jobName|,,Name of the job

********** operation = jobTrigger (NO)
 field = bodyIdBegin|1|string,0,1,,,,,,,0
 field = bodyIdEnd|2|string,0,1,,,,,,,0
 field = jobName|3|string,1,1,,,,,,,0
 number = 1773
 returnType = jobTriggerResponse
   description = Trigger a job on demand.This will schedule the specified job for immediate execution. A new trigger is created within the system and is tracked separately from the triggers created through regular job configurations. Requires anonymous (body) id range for per-body job.
   field = bodyIdBegin|,,First anonymous (body) id of the range for per-body job
   field = bodyIdEnd|,,Last anonymous (body) id of the range for per-body job
   field = jobName|,,Name of the job

********** operation = keepMostTest (NO)
 field = recording|1|struct:recording,1,,,,,,,,0
 field = subscription|2|struct:subscription,1,,,,,,,,0
 number = 386
 returnType = subscriptionConflicts
   description = testing the functionality of KeepMostList, to cope with the limited interface, all recordings passed in without state set will be treated as recording to be checked. The checking is done in the order the recordings are passed in. A subscriptionConflicts will be returned. If a recording passed the check it will be put in "willGet" of a conflicts dict, with all the recordings that must be deleted as losingRecordings in "willCancel". If a recording failed in the check, it will be put in "wontGet".

********** operation = keepUntil (NO)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 field = deletionPolicy|2|enum:deletionPolicy,1,1,,,,,,,0
 field = recordingId|3|idInt:recording,1,1,,,,,,,0
 isFrozen = true
 number = 387
 returnType = keepUntilResult
   description = change the deletion policy of a recording.  For a complete recording, the change will be populated to DB if no disk conflict found, otherwise return a disk conflict. For a scheduled or inProgress recording, the original subscription will be modified if it's a single subscription; otherwise a single explicit subscription will be created for the recording.
   field = deletionPolicy|,,the new deletion policy for the recording
   field = recordingId|,,ID of the recording to be modified

********** operation = keyEventSend (YES)
 field = event|1|enum:keyEvent,1,1,,,,,,,0
 field = value|2|int,0,1,,,,,,,0
 number = 1866
 returnType = success
   field = event|,,Event to send.  If ascii, the value field should be provided.
   field = value|,,If event is ascii, this field defines the ASCII value of the key.

********** operation = keyValueRemove (NO)
 field = key|1|string,0,1,low,,,,,,0
 field = removeExpiredOnly|2|boolean,0,1,low,false,,,,,0
 field = removeOverride|4|boolean,0,1,,,,,,,0
 field = useOverride|3
 number = 1445
 returnType = success
   description = 
   field = key|,,Removes the key in the parameter. If none given, all keys are deleted in the override table, regular table, or both. See useOverride for more instructions.
   field = removeExpiredOnly|,,Only removes keys that have expired. If combined with a key, it will only remove that key when it's expired.
   field = removeOverride|,,If removeOverride is true, delete will remove override keys only. If removeOverride is false, normal keys will be deleted, if any. If removeOverride is null (default case), both override and normal keys are deleted.

********** operation = keyValueSearch (NO)
 field = addField|4
 field = anchor|5
 field = appropriateOnly|3
 field = count|6
 field = format|7
 field = groupBy|8
 field = key|1|string,1,,,,,,,255,0
 field = keyName|2
 field = levelOfDetail|9
 field = note|10
 field = offset|11
 field = orderBy|12
 field = removeField|13
 field = useAnchorOperation|14
 field = useOverride|15|boolean,0,1,,,,,,,0
 number = 1260
 returnType = keyValue
   description = This operation searches keyValue or keyValueOverride table or both, depending on the flag useOverride.
   field = key|,,Any 15 character bodyId with a tsn: prefix.
   field = useOverride|,,If useOverride is true, search will return override keys if they exist, or return normal keys. If useOverride is false no override keys are returned. If useOverride is null (default case), both override and normal keys are returned.

********** operation = keyValueStore (NO)
 field = comment|8|string,0,1,low,,,,,,0
 field = expire|1|dateTime,0,1,low,,,,,,0
 field = isOverride|2|boolean,0,1,low,false,,,,,0
 field = key|5|string,1,1,low,,,,1,255,0
 field = keyName|3
 field = modificationDate|6|dateTime,0,1,low,,,,,,0
 field = note|7
 field = value|4|string,1,1,low,,,,,,0
 number = 1264
 returnType = keyValue
   description = Stores a new or a modified keyValueobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = comment|,,A comment to associate with this key. This only applies to overridden keys. On normal keys,  this field will be ignored.

********** operation = keyValueUpdate (NO)
 field = key|1|string,1,1,low,,,,1,255,0
 field = modificationDate|2|dateTime,1,1,low,,,,,,0
 field = value|3|string,1,1,low,,,,,,0
 number = 1307
 returnType = success
   description = This operation is similar to keyValueStore except it only stores if the modification time is newer than the value in the database. This update only works on regular keyValues, and not override keys. The return value is the stored keyValue or the original keyValue stored in the db. The difference will be reflected in the modificationDate.

********** operation = keyboardEventSend (NO)
 field = isKeyPress|1|boolean,1,1,,,,,,,0
 field = scanCode|2|int,1,1,,,,,,,0
 number = 1891
 returnType = success
   description = Sends a key down or key up event to the currently focused window
   field = isKeyPress|,,true for a key press, false for a key release
   field = scanCode|,,The PS/2 scan code for the key

********** operation = knownHostItemRemove (NO)
 field = ip|1|string,1,1,,,,,,,0
 number = 1644
 returnType = success
   field = ip|,,The ip of the server.

********** operation = knownHostItemSearch (NO)
 field = count|3|int,0,1,,1,,,1,,0
 field = excludeObjectIdAndType|4|long,0,,,,,,,,0
 field = format|11|enum:format,0,1,,,,,,,0
 field = genreRegex|1|string,0,1,,,,,,,0
 field = groupBy|12|string,0,,,,,,,32,0
 field = includeHidden|17|boolean,0,1,,false,,,,,0
 field = levelOfDetail|5|enum:levelOfDetail,0,1,,,,,,,0
 field = note|13|string,0,,,,,,,,0
 field = objectIdAndType|6|long,0,,,,,,,,0
 field = offset|7|int,0,1,,0,,,,,0
 field = orderBy|14|string,0,,,,,,,32,0
 field = resolveCount|8|int,0,1,,0,,,,,0
 field = resolveLevelOfDetail|9|enum:levelOfDetail,0,1,,low,,,,,0
 field = resolveOffset|10|int,0,1,,0,,,,,0
 field = responseTemplate|16|struct:responseTemplate,0,,,,,,,,0
 field = serviceRegex|2|string,0,1,,,,,,,0
 field = serviceRegexExclude|18|string,0,1,,,,,,,0
 field = uri|15|uri,0,,,,,,,,0
 fieldGroup = resolveSearchFields
 fieldGroup = searchFieldsNoAnchoring
 number = 1464
 returnType = knownHostItemList
   description = Returns a list of known hosts based on the services and genres specified.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = excludeObjectIdAndType|,,An objectIdAndType from an idSequence obtained in a previous search operation, to be excluded from the result set.
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = genreRegex|,,Regular expression describing the genre of interest, ".*" for everything. If not specified, ".*" will be assumed.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = includeHidden|,,Boolean flag controlling whether the response should include hidden services or not. If not specified, hidden services will not be included in the response.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = objectIdAndType|,,Limits the search to an object with exactly the same value in this field.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = resolveCount|,,If a format of (string)idSequence is specified, the count of objectIds that should be resolved into objects. Ignored unless format = (string)idSequence.
   field = resolveLevelOfDetail|,,If a format of (string)idSequence is specified, the levelOfDetail at which the objects should be resolved.  Ignored unless resolveCount > 0 and format = (string)idSequence.
   field = resolveOffset|,,If a format of (string)idSequence is specified, the offset into the objectId list that should be resolved into objects. Ignored unless resolveCount > 0 and format = (string)idSequence.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = serviceRegex|,,Regular expression describing the service of interest, ".*" for everything.
   field = serviceRegexExclude|,,Regular expression describing the service that should be excluded, e.g. one can formulate a query to get a list of MRS and MRV hosts as (serviceRegex == _tivo-videostream._tcp) or (serviceRegex == _tivo-videos._tcp and  serviceRegexExclude == _tivo-videostream._tcp)
   field = uri|,,List of URIs describing additional filter and order of items in the result list. If specified only items with matching URIs will be included in the result list.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = knownHostItemStore (NO)
 field = ip|1|string,1,1,,,,,,,0
 number = 1645
 returnType = success
   field = ip|,,The ip of the server.

********** operation = latestOfferSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = collectionId|3|idLong:collection,0,,,,,,,,0
 field = contentId|13|idLong:content,0,,,,,,,,0
 field = count|4|int,0,1,,1,,,1,,0
 field = format|5|enum:format,0,1,,,,,,,0
 field = groupBy|6|string,0,,,,,,,32,0
 field = imageRuleset|14|struct:imageRuleset,0,,,,,,,,0
 field = levelOfDetail|7|enum:levelOfDetail,0,1,,,,,,,0
 field = note|8|string,0,,,,,,,,0
 field = offset|9|int,0,1,,0,,,,,0
 field = orderBy|10|string,0,,,,,,,32,0
 field = removeField|11|string,0,,,,,2,,,0
 field = responseTemplate|15|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|12|boolean,0,1,,true,,,,,0
 fieldGroup = imageRulesetFields
 fieldGroup = searchFields
 groupBy = callSign
 groupBy = collectionId
 groupBy = contentId
 groupBy = stationId
 isFrozen = true
 number = 873
 orderBy = callSign
 orderBy = collectionId
 orderBy = contentId
 orderBy = endTime
 orderBy = startTime
 orderBy = stationId
 returnType = idSet
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = imageRuleset|,,one ruleset should be specified per image desired. multiple rulesets can be specified.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = lifestreamEventSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = bodyId|3
 field = collectionId|4
 field = count|5|int,0,1,,1,,,1,,0
 field = eventType|29|enum:lifestreamEventType,0,,,,,,,,0
 field = excludeStringId|30|string,0,,,,,,,,0
 field = forUserId|18
 field = format|6|enum:format,0,1,,,,,,,0
 field = friendUserId|7
 field = groupBy|8|string,0,,,,,,,32,0
 field = levelOfDetail|9|enum:levelOfDetail,0,1,,,,,,,0
 field = lifestreamEventId|10|string,0,1,,,,,,,0
 field = maxAttachmentCount|22|int,0,1,,1,,7,,,0
 field = maxDateTime|25|dateTime,0,1,,,,,,,0
 field = maxSubEventCount|23|int,0,1,,1,,,,,0
 field = maxUpdateTime|26|dateTime,0,1,,,,,,,0
 field = minDateTime|27|dateTime,0,1,,,,,,,0
 field = minUpdateTime|28|dateTime,0,1,,,,,,,0
 field = note|11|string,0,,,,,,,,0
 field = offset|12|int,0,1,,0,,,,,0
 field = orderBy|13|string,0,,,,,,,32,0
 field = refersToEventId|21|string,0,1,,,,,,,0
 field = removeField|14|string,0,,,,,2,,,0
 field = resolveCount|31|int,0,1,,0,,,,,0
 field = resolveLevelOfDetail|32|enum:levelOfDetail,0,1,,low,,,,,0
 field = resolveOffset|33|int,0,1,,0,,,,,0
 field = responseTemplate|24|struct:responseTemplate,0,,,,,,,,0
 field = searchType|19|enum:lifestreamEventSearchType,0,1,,publicAndPrivateToMe,,,,,0
 field = socialIdentityId|20|idInt:socialIdentity,0,1,,,,,,,0
 field = socialNetworkId|17|idInt:socialNetwork,0,1,,,,,,,0
 field = stringId|34|string,0,,,,,,,,0
 field = useAnchorOperation|15|boolean,0,1,,true,,,,,0
 field = userId|16|idLong:user,0,1,,,,,,,0
 fieldGroup = searchFields
 fieldGroup = resolveSearchStringFields
 number = 1082
 orderBy = dateTime
 orderBy = subEventDateTime
 orderBy = subEventUpdateTime
 orderBy = updateTime
 returnType = lifestreamEventList
   description = Returns lifestream events for the given user.  XXX May need to add fromUser and toUser, since this user may not be the sender or the receiver - users can see posts to friends
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = eventType|,,The specific event types(s) to include in the response.  By default, all event types are returned.
   field = excludeStringId|,,An stringId from an stringIdSequence obtained in a previous search operation, to be excluded from the result set.
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = lifestreamEventId|,,Limits the search to an object with exactly the same value in this field.
   field = maxAttachmentCount|,7,Specify the max number of attachments to return per event.  DEPRECATED - wrong name.  Replaced by maxSubEventCount.
   field = maxDateTime|,,The maximum dateTime (aka 'createTime') to include in the result set.
   field = maxSubEventCount|,,Specify the max number of subEvents - per subEvent type - to return per event.
   field = maxUpdateTime|,,The maximum updateTime to include in the result set.
   field = minDateTime|,,The minimum dateTime (aka 'createTime') to include in the result set.
   field = minUpdateTime|,,The minimum updateTime to include in the result set.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = refersToEventId|,,Limits the search to an object with exactly the same value in this field.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = resolveCount|,,If a format of (string)idSequence is specified, the count of objectIds that should be resolved into objects. Ignored unless format = (string)idSequence.
   field = resolveLevelOfDetail|,,If a format of (string)idSequence is specified, the levelOfDetail at which the objects should be resolved.  Ignored unless resolveCount > 0 and format = (string)idSequence.
   field = resolveOffset|,,If a format of (string)idSequence is specified, the offset into the objectId list that should be resolved into objects. Ignored unless resolveCount > 0 and format = (string)idSequence.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = searchType|,,The type of lifestream events to search for.  The default is getPublicAndPrivateToMe - retrieve all public and private events TO THIS USER, including self-posts by the user.  To emulate the Facebook "News Feed" functionality, use getPublicWall.  To emulate the Facebook "Inbox" functionality, use getMessages.
   field = socialIdentityId|,,Limits the search to an object with exactly the same value in this field.
   field = socialNetworkId|,,Limits the search to an object with exactly the same value in this field.
   field = stringId|,,Limits the search to an object with exactly the same value in this field.
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   field = userId|,,Matches lifestream events for the given user, and for friends of that user.  This is the equivalent of getting the stuff on your NewsFeed, Profile, or Inbox in Facebook, depending on the search type.  Deprecated.  Use socialIdentityId instead.  Larry's bad.  This field should not have been deprecated.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = lifestreamEventStore (NO)
 field = accountId|1
 field = attachment|23|union:lifestreamEventAttachment,0,,low,,,,,,0
 field = attachmentInfo|24
 field = bodyId|2
 field = collectionId|3
 field = dateTime|4|dateTime,1,1,low,,,,,,0
 field = detail|5
 field = details|11
 field = eventType|6|enum:lifestreamEventType,1,1,low,,,,,,0
 field = fromSocialPersonId|14|string,0,1,low,,,,,,0
 field = lifestreamEventId|7|string,0,1,low,,,,,,0
 field = mediaUrl|15|string,0,,low,,,,,1000,0
 field = payload|16|union:lifestreamEventDetails,0,1,medium,,,,,,0
 field = refersToEventId|21|string,0,1,low,,,,,,0
 field = shortText|17|string,0,1,low,,,,,100,0
 field = socialFriendId|12
 field = socialNetworkId|13|idInt:socialNetwork,1,1,low,,,,,,0
 field = socialPersonForFromSocialPersonId|18|struct:socialPerson,0,1,low,,,7,,,1
 field = socialPersonForSocialPersonId|19|struct:socialPerson,0,1,low,,,7,,,1
 field = socialPersonId|20|string,0,1,low,,,,,,0
 field = stringId|27|string,0,1,low,,,,,,0
 field = subEventForLifestreamEventId|22|struct:lifestreamEvent,0,,low,,,7,,,1
 field = subEventInfo|25|struct:lifestreamEventSubEventInfo,0,,low,,,,,,0
 field = text|8|string,0,1,low,,,,,1000,0
 field = thumbsRating|9
 field = updateTime|26|dateTime,0,1,low,,,,,,0
 field = userId|10
 number = 1083
 returnType = lifestreamEvent
   description = Stores a new or a modified lifestreamEventobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = attachment|,,An event can have attachments such as photos, videos, music, flash content.  Note that there may be fewer attachments in the lifestream message than exist with the original source message, if the attachment count is higher than the max allowed (and/or the max attachments requested).
   field = dateTime|,,The time at which the event was created (a.k.a. createTime).
   field = eventType|,,The type of the event.
   field = fromSocialPersonId|,,The person who created this lifestream event.
   field = lifestreamEventId|,,The unique identifier for this lifestream event.  The ID includes both the social network id and the event ID within that social network.
   field = mediaUrl|,,The URL of a media resource, such as an image or video
   field = payload|,,Payload specific to the event type.
   field = refersToEventId|,,Indicates which event this event is in response to. A Facebook Like or Comment is in response to a Post, Photo, etc.
   field = shortText|,,Human-readable short text of the event that can be displayed in the UI.
   field = socialNetworkId|,,The social network that this event is stored in.  For now, this will be the Neo Social Network.  This could also indicate other internal Social Networks for new internal services, and external networks if we store external events.
   field = socialPersonForFromSocialPersonId|,7,Details about the person who created this lifestream event.
   field = socialPersonForSocialPersonId|,7,Details about the person whose wall this event appears on.
   field = socialPersonId|,,The person whose wall this lifestream event appears on.
   field = subEventForLifestreamEventId|,7,Annotation (note) holds the (sub) events that refer to this event.
   field = subEventInfo|,,For each subEvent _type_ in the original (source) event, there will be a subEventInfo field indicating how many subEvents of that type actually exist (not how many were returned for this query).  I.e. if there are comments and likes for a post, it would have two subEventInfo fields with count > 0. If there were just comments, it would have one subEventInfo field with count > 0.  If useful, and depending on the event type, there may be additional subEventInfo fields with count=0 (e.g. "5 comments" and "0 likes").
   field = text|,,Human-readable text of the event that can be displayed in the UI.
   field = updateTime|,,The last time at which the event was updated.  If this field is not set, it has the same value as field='dateTime' (aka createTime).

********** operation = lineupSearch (YES)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = count|3|int,0,1,,1,,,1,,0
 field = format|4|enum:format,0,1,,,,,,,0
 field = groupBy|5|string,0,,,,,,,32,0
 field = levelOfDetail|6|enum:levelOfDetail,0,1,,,,,,,0
 field = noLimit|7|boolean,0,1,,,,,,,0
 field = note|8|string,0,,,,,,,,0
 field = offset|9|int,0,1,,0,,,,,0
 field = orderBy|10|string,0,,,,,,,32,0
 field = removeField|11|string,0,,,,,2,,,0
 field = responseTemplate|14|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|12|boolean,0,1,,true,,,,,0
 field = zipCode|13|string,1,1,,,,,,32,0
 fieldGroup = searchFields
 isFrozen = true
 number = 392
 orderBy = headendLocation
 orderBy = headendName
 orderBy = headendState
 orderBy = lineupName
 returnType = lineupList
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = noLimit|,,Removes the "count" restriction.  Lineup searches are not paginated, so we need to return all results.  You are only allowed to set "noLimit" to true when you specify a zip code. Default: false
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   field = zipCode|,,Restricts the search to lineups in the named zipCode
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = noLimit|0|0|0|partner-schedule
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all
   fieldProject = zipCode|0|0|0|partner-schedule
   project = lineupSearch|0|0|0|partner-schedule

********** operation = localApplicationDataRemove (NO)
 field = appName|1|string,1,1,low,,,,,,0
 field = key|2|string,1,,,,,,,,0
 number = 1586
 returnType = success
   description = Remove one or more previously stored localApplicationData objects. If the specified appName or keys don't exist, they will simply be ignored.
   field = appName|,,Application name for which the key will remain unique to.

********** operation = localApplicationDataSearch (NO)
 field = appName|1|string,1,1,low,,,,,,0
 field = key|2|string,1,,,,,,,,0
 number = 1502
 returnType = localApplicationDataList
   description = Search for and return one or more previously stored localApplicationData objects. If a key doesn't have a previously stored object then the returned list will not contain an entry for that key.
   field = appName|,,Application name for which the key will remain unique to.

********** operation = localApplicationDataStore (NO)
 field = appName|1|string,1,1,low,,,,,,0
 field = data|2|anyDict,1,1,low,,,,,,0
 field = key|3|string,1,1,low,,,,,,0
 field = storeInNonVolatileMemory|4|boolean,1,1,,,,,,,0
 fieldGroup = localApplicationDataFields
 number = 1503
 returnType = localApplicationData
   description = Stores the local application-specific data in the client.
   field = appName|,,Application name for which the key will remain unique to.
   field = data|,,Data that will be persistently stored for later retrieval using the specified key.
   field = key|,,The key associated with this object.
   field = storeInNonVolatileMemory|,,true if the supplied data should be stored in nonvolatile memory, false if it should be stored on disk.

********** operation = locatorRemove (NO)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 field = locatorId|2|idInt:locator,1,1,,,,,,,0
 isFrozen = true
 number = 1276
 returnType = success
   description = Removes a locator object from the mind.

********** operation = locatorSearch (NO)
 field = addField|8|string,0,,,,,2,,,0
 field = anchor|9|anchorDict,0,1,,,,,,,0
 field = bodyId|1|idBody:body,1,1,low,,,,,,0
 field = categoryId|19|idLong:category,0,1,,,,,,,0
 field = collectionId|2|idLong:collection,0,1,low,,,,,,0
 field = collectionType|20|enum:collectionType,0,1,,,,,,,0
 field = contentId|3|idLong:content,0,1,low,,,,,,0
 field = count|10|int,0,1,,1,,,1,,0
 field = format|11|enum:format,0,1,,,,,,,0
 field = groupBy|12|string,0,,,,,,,32,0
 field = hdtv|21|boolean,0,1,,,,,,,0
 field = levelOfDetail|13|enum:levelOfDetail,0,1,,,,,,,0
 field = locatorId|4|idInt:locator,0,1,low,,,,,,0
 field = note|14|string,0,,,,,,,,0
 field = offerId|5|idString:offer,0,1,low,,,,,,0
 field = offset|15|int,0,1,,0,,,,,0
 field = orderBy|16|string,0,,,,,,,32,0
 field = removeField|17|string,0,,,,,2,,,0
 field = responseTemplate|22|struct:responseTemplate,0,,,,,,,,0
 field = state|6|enum:locatorState,0,1,low,,,,,,0
 field = subscriptionId|7|idInt:subscription,0,1,low,,,,,,0
 field = useAnchorOperation|18|boolean,0,1,,true,,,,,0
 fieldGroup = myShowsItemSearchFilters
 fieldGroup = searchFields
 groupBy = collectionId
 groupBy = subscriptionId
 number = 1277
 orderBy = collectionId
 orderBy = contentId
 orderBy = locatorId
 orderBy = subscriptionId
 returnType = locatorGroupList
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = bodyId|,,Limits the search to an object with exactly the same value in this field.
   field = categoryId|,,only return MyShowsItems containing recordings or locators belonging to this category.
   field = collectionId|,,Limits the search to an object with exactly the same value in this field.
   field = collectionType|,,only return MyShowsItems containing recordings or locators with this collectionType.
   field = contentId|,,Limits the search to an object with exactly the same value in this field.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = hdtv|,,when true, return only MyShowsItems containing at least one HD recording or a locator with at least one HD offer available. When false, return only MyShowsItems containing at least one SD recording a a locator with at least one SD offer available. when omitted, no HD filtering is applied.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = locatorId|,,Limits the search to an object with exactly the same value in this field.
   field = note|,,A request for the results to be annotated.
   field = offerId|,,Limits the search to an object with exactly the same value in this field.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = state|,,Limits the search to an object with exactly the same value in this field.
   field = subscriptionId|,,Limits the search to an object with exactly the same value in this field.
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = locatorStore (NO)
 field = availability|1|struct:locatorAvailability,0,,low,,,,,,0
 field = bodyId|2|idBody:body,1,1,low,,,,,,0
 field = collectionForCollectionId|3|struct:collection,0,1,medium,,,7,,,1
 field = collectionId|4|idLong:collection,1,1,low,,,,,,0
 field = contentForContentId|5|struct:content,0,1,medium,,,7,,,1
 field = contentId|6|idLong:content,1,1,low,,,,,,0
 field = deletionReason|7|enum:locatorDeletionReason,0,1,low,,,,,,0
 field = locatorId|8|idInt:locator,0,1,low,,,,,,0
 field = offerForOfferId|9|struct:offer,0,1,medium,,,7,,,1
 field = offerId|10|idString:offer,0,1,low,,,,,,0
 field = state|11|enum:locatorState,1,1,low,,,,,,0
 field = subscriptionId|12|idInt:subscription,1,1,low,,,,,,0
 field = subtitle|13|string,1,1,low,,,,,255,0
 field = title|14|string,1,1,low,,,,,255,0
 isFrozen = true
 number = 1278
 returnType = locator
   description = Stores a new or a modified locatorobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = availability|,,the currently available consumption methods for the located object
   field = bodyId|,,The bodyId of the body for which the locator was generated
   field = collectionForCollectionId|,7,Container for the collectionForCollectionId annotation
   field = collectionId|,,The id of the collection for the located object
   field = contentForContentId|,7,Container for the contentForContentId annotation
   field = contentId|,,The id of the content for the located object
   field = deletionReason|,,the reason the locator was deleted. required if the state is "deleted"
   field = locatorId|,,The Id for this locator. unique per body.
   field = offerForOfferId|,7,The container for the offerForOfferId annotation
   field = offerId|,,If the locator locates a specific offer, the offerId field is populated with the id for that offer.
   field = state|,,The state of the locator. 
   field = subscriptionId|,,The subscription for which the locator was generated
   field = subtitle|,,The subtitle of the located object
   field = title|,,The title of the located object

********** operation = login (NO)
 field = password|1|string,1,1,,,,,,,0
 field = username|2|string,1,1,,,,,,,0
 field = version|3|int,1,1,,,,,,,0
 isFrozen = true
 number = 1144
 returnType = success
   description = 

********** operation = logout (NO)
 isFrozen = true
 number = 1145
 returnType = success
   description = 

********** operation = makeBodyId (NO)
 field = macAddress|1|string,0,1,,,,,,,0
 field = testBodyId|2|string,0,1,,,,,,,0
 number = 930
 returnType = makeBodyIdReturn
   field = testBodyId|,,Used in test only.  Create bodyId and anonId with this value.

********** operation = makeTimsBodyId (NO)
 field = macAddress|1|string,0,1,,,,,,,0
 field = testBodyId|2|string,0,1,,,,,,,0
 number = 931
 returnType = makeBodyIdReturn
   field = testBodyId|,,Used in test only.  Create bodyId and anonId with this value.

********** operation = mapMix (NO)
 field = childMixId|1|idLong:mix,1,1,low,,,,,,0
 field = displayRank|2|int,0,1,low,,,,0,,0
 field = mixMappingId|3|idLong:mixMapping,0,1,,,,,,,0
 field = mixServiceGroup|4|string,0,,low,,,,,,0
 field = parentMixId|5|idLong:mix,1,1,low,,,,,,0
 firstVersion = 6
 isFrozen = true
 number = 397
 returnType = mixMapping
   description = Create or update a mixMapping, with the side effect that mixMappings with the same parent mix and greater or equal displayRank will have the displayRank incremented by one. If no displayRank is specified, the next avaialable displayRank will be used, staring with 1. As of mind version 6, this is the preferred way to store a mix mapping.
   field = childMixId|,,Child mixId.
   field = displayRank|,,Display order of this mix relative to all  other mixes within a parent mix.
   field = mixMappingId|,,The mixMappingId that was previously assigned by the mind. Omit this field if creating a new mix.
   field = mixServiceGroup|,,Service groups this mix belongs to.
   field = parentMixId|,,Parent mixId.
   fieldProject = childMixId|0|0|0|hme-cds
   fieldProject = displayRank|0|0|0|hme-cds
   fieldProject = mixMappingId|0|0|0|hme-cds
   fieldProject = mixServiceGroup|0|0|0|hme-cds
   fieldProject = parentMixId|0|0|0|hme-cds
   project = mapMix|0|0|0|hme-cds

********** operation = mdhVodImportTaskTest (NO)
 field = mdhConnectorProperty|1|string,1,1,,,,,,,0
 field = vodImportType|2|enum:vodImportType,0,1,,,,,,,0
 number = 1566
 returnType = mdhVodImportTaskTestResult
   description = Test import task integration with file connector, metadata mapping, mind store operations, and statistics/event logging.
   field = mdhConnectorProperty|,,The MDH connector property for the test.
   field = vodImportType|,,vod metadata type to import

********** operation = mementoPop (NO)
 number = 1438
 returnType = memento
   description = Pops a memento off the top of the memento stack.

********** operation = mementoPush (NO)
 field = memento|1|struct:memento,1,1,,,,,,,0
 number = 1439
 returnType = success
   description = Pushes a memento onto the top of the memento stack.

********** operation = messageRemove (NO)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 field = messageId|2|idInt:message,1,1,,,,,,,0
 isFrozen = true
 number = 915
 returnType = success
   description = Removes a message object from the mind.

********** operation = messageSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = bodyId|3|idBody:body,1,1,,,,,,,0
 field = count|4|int,0,1,,1,,,1,,0
 field = format|5|enum:format,0,1,,,,,,,0
 field = groupBy|6|string,0,,,,,,,32,0
 field = levelOfDetail|7|enum:levelOfDetail,0,1,,,,,,,0
 field = messageId|8|idInt:message,0,1,,,,,,,0
 field = note|9|string,0,,,,,,,,0
 field = offset|10|int,0,1,,0,,,,,0
 field = orderBy|11|string,0,,,,,,,32,0
 field = removeField|12|string,0,,,,,2,,,0
 field = responseTemplate|14|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|13|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 isFrozen = true
 number = 916
 returnType = messageList
   description = 
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = bodyId|,,Limits the search to an object with exactly the same value in this field.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = messageId|,,Limits the search to an object with exactly the same value in this field.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = messageStore (NO)
 field = bodyId|1|idBody:body,1,1,low,,,,,,0
 field = expiryTime|5|dateTime,0,1,low,,,,,,0
 field = messageBody|2|anyDict,1,1,low,,,,,,0
 field = messageId|3|idInt:message,0,1,low,,,,,,0
 field = sequenceNumber|4|long,0,1,low,,,,,,0
 isFrozen = true
 number = 917
 returnType = message
   description = Stores a new or a modified messageobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = expiryTime|,,If set, specifies a date at which this message will be deleted from the Mind on the next message sync instead of being sent back to the body.
   field = messageBody|,,The message body.
   field = sequenceNumber|,,A sequence number that can be used to order messages targeted for a particular bodyId.

********** operation = middlemindConnectedBodiesGet (NO)
 number = 2012
 returnType = middlemindConnectedBodies
   description = Invoked by a middlemind to get the list of bodies connected to another middlemind.  When a middlemind starts up it calls this on all other connected middleminds.

********** operation = middlemindConnectedBodiesStore (NO)
 field = connectedBodies|1|struct:middlemindConnectedBodies,1,1,,,,,,,0
 number = 2013
 returnType = success
   description = Sent from one middlemind to another to indicate there is a change in the current set of bodies connected.

********** operation = middlemindNotify (NO)
 field = info|1|knownDict,1,1,,,,,,,0
 number = 1460
 returnType = success
   description = A message sent from one middlemind to another to let it know about something that happened.  Usually, the body of the notification will be a mind request that is being sent up to the mind that other middle minds might want to know about.  A middlemind will send out a middlemindNotify after the request to the mind has returned, so that if other middleminds want to fetch the new state from the mind, they can be sure that the mind has been updated.

********** operation = middlemindStatusGet (NO)
 number = 1999
 returnType = middlemindStatus
   description = A request to get status of middlemind

********** operation = mindStatusGet (NO)
 isFrozen = true
 number = 400
 returnType = mindStatus
   description = A request for info about the state of the mind.

********** operation = mindStatusStore (NO)
 field = isTooFull|1|boolean,1,1,,,,,,,0
 isFrozen = true
 number = 401
 returnType = success
   description = Store the isTooFull state.
   field = isTooFull|,,The isTooFull state of the mind

********** operation = mindsetReadyUpdate (NO)
 field = mindsetReady|1|struct:mindsetReady,1,1,,,,,,,0
 number = 2007
 returnType = success
   description = Sent to the middlemind by a mindset so that the former knows  when everyone is ready.

********** operation = mixApplicationInfoSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = bodyId|17|idBody:body,0,1,,,,,,,0
 field = collectionId|3|idLong:collection,0,1,,,,,,,0
 field = contentId|4|idLong:content,0,1,,,,,,,0
 field = count|5|int,0,1,,1,,,1,,0
 field = format|6|enum:format,0,1,,,,,,,0
 field = groupBy|7|string,0,,,,,,,32,0
 field = levelOfDetail|8|enum:levelOfDetail,0,1,,,,,,,0
 field = noLimit|9|boolean,0,1,,,,,,,0
 field = note|10|string,0,,,,,,,,0
 field = offerId|11|idString:offer,0,1,,,,,,,0
 field = offset|12|int,0,1,,0,,,,,0
 field = orderBy|13|string,0,,,,,,,32,0
 field = removeField|14|string,0,,,,,2,,,0
 field = responseTemplate|16|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|15|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 isFrozen = true
 number = 993
 returnType = mixApplicationInfoList
   description = Get information about mix-based applications in which the leaves of the mix tree contain the objects referenced in the request
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = bodyId|,,Limits the search to an object with exactly the same value in this field.
   field = collectionId|,,Limits the search to an object with exactly the same value in this field.
   field = contentId|,,Limits the search to an object with exactly the same value in this field.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = noLimit|,,Do not limit this search to a given count.
   field = note|,,A request for the results to be annotated.
   field = offerId|,,Limits the search to an object with exactly the same value in this field.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = collectionId|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = contentId|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offerId|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = mixMappingRemove (NO)
 field = childMixId|1|idLong:mix,0,1,,,,,,,0
 field = mixMappingId|2|idLong:mixMapping,0,1,,,,,,,0
 field = parentMixId|3|idLong:mix,0,1,,,,,,,0
 isFrozen = true
 number = 406
 returnType = success
   description = Remove a mixMapping.  You must specify the parentMixId and childMixId.
   field = childMixId|,,Limits the search to an object with exactly the same value in this field.
   field = mixMappingId|,,Limits the search to an object with exactly the same value in this field.
   field = parentMixId|,,Limits the search to an object with exactly the same value in this field.
   fieldProject = childMixId|0|0|0|hme-cds
   fieldProject = mixMappingId|0|0|0|hme-cds
   fieldProject = parentMixId|0|0|0|hme-cds
   project = mixMappingRemove|0|0|0|hme-cds

********** operation = mixMappingSearch (YES)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = assetForAssetId|3
 field = bodyId|25|idBody:body,0,1,,,,,,,0
 field = childMixId|4|idLong:mix,0,1,,,,,,,0
 field = childMixObjectFilters|36|struct:unifiedItemFilters,0,1,,,,,,,0
 field = childMixPartnerId|5|idInt:partner,0,1,,,,,,,0
 field = collectionForCollectionId|6
 field = contentForContentId|7
 field = count|8|int,0,1,,1,,,1,,0
 field = disableFilterUnavailableChildren|34
 field = excludeObjectIdAndType|28|long,0,,,,,,,,0
 field = format|9|enum:format,0,1,,,,,,,0
 field = groupBy|10|string,0,,,,,,,32,0
 field = imageRuleset|35|struct:imageRuleset,0,,,,,,,,0
 field = levelOfDetail|11|enum:levelOfDetail,0,1,,,,,,,0
 field = maxCreateDate|26|dateTime,0,1,,,,,,,0
 field = maxDepth|33|int,0,1,,,,,0,,0
 field = maxUpdateDate|23|dateTime,0,1,,,,,,,0
 field = minCreateDate|27|dateTime,0,1,,,,,,,0
 field = minUpdateDate|12|dateTime,0,1,,,,,,,0
 field = mixMappingId|13|idLong:mixMapping,0,,,,,,,,0
 field = mixServiceGroup|14|string,0,1,,,,,,32,0
 field = note|15|string,0,,,,,,,,0
 field = objectIdAndType|29|long,0,,,,,,,,0
 field = offerForOfferId|16
 field = offset|17|int,0,1,,0,,,,,0
 field = orderBy|18|string,0,,,,,,,32,0
 field = parentMixId|19|idLong:mix,0,,,,,,,,0
 field = parentMixPartnerId|20|idInt:partner,0,1,,,,,,,0
 field = parentPartnerMixId|38|string,0,1,,,,,,,0
 field = removeField|21|string,0,,,,,2,,,0
 field = resolveCount|30|int,0,1,,0,,,,,0
 field = resolveLevelOfDetail|31|enum:levelOfDetail,0,1,,low,,,,,0
 field = resolveOffset|32|int,0,1,,0,,,,,0
 field = responseTemplate|37|struct:responseTemplate,0,,,,,,,,0
 field = subscriptionForOfferId|24
 field = useAnchorOperation|22|boolean,0,1,,true,,,,,0
 fieldGroup = imageRulesetFields
 fieldGroup = resolveSearchFields
 fieldGroup = searchFields
 isFrozen = true
 number = 407
 orderBy = displayRank
 orderBy = hdtv
 orderBy = price
 orderBy = starRating
 orderBy = startTime
 orderBy = strippedTitle
 orderBy = title
 orderBy = updateDate
 returnType = idSequence
   description = Search for a mixMapping.  You must specify one of: the parentMixId childMixId.
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = bodyId|,,restrict search to mappings with groups to which the body belongs
   field = childMixId|,,Limits the search to an object with exactly the same value in this field.
   field = childMixObjectFilters|,,filters results by both the child mix and potentially the contained object
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = excludeObjectIdAndType|,,An objectIdAndType from an idSequence obtained in a previous search operation, to be excluded from the result set.
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = imageRuleset|,,one ruleset should be specified per image desired. multiple rulesets can be specified.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = maxDepth|,,Limits the search to an object with exactly the same value in this field.
   field = mixMappingId|,,Limits the search to an object with exactly the same value in this field.
   field = mixServiceGroup|,,Limits the search to an object with exactly the same value in this field.
   field = note|,,A request for the results to be annotated.
   field = objectIdAndType|,,Limits the search to an object with exactly the same value in this field.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = parentMixId|,,Limits the search to an object with exactly the same value in this field.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = resolveCount|,,If a format of (string)idSequence is specified, the count of objectIds that should be resolved into objects. Ignored unless format = (string)idSequence.
   field = resolveLevelOfDetail|,,If a format of (string)idSequence is specified, the levelOfDetail at which the objects should be resolved.  Ignored unless resolveCount > 0 and format = (string)idSequence.
   field = resolveOffset|,,If a format of (string)idSequence is specified, the offset into the objectId list that should be resolved into objects. Ignored unless resolveCount > 0 and format = (string)idSequence.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = childMixId|0|0|0|hme-cds
   fieldProject = childMixPartnerId|0|0|0|hme-cds
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = mixMappingId|0|0|0|hme-cds
   fieldProject = mixServiceGroup|0|0|0|hme-cds
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = parentMixId|0|0|0|hme-cds
   fieldProject = parentMixPartnerId|0|0|0|hme-cds
   fieldProject = responseTemplate|0|0|0|all
   project = mixMappingSearch|0|0|0|hme-cds

********** operation = mixMappingStore (NO)
 field = assetForAssetId|1|struct:asset,0,1,low,,,7,,,1
 field = bodyThumbsForMixId|19|struct:bodyThumbs,0,1,low,,,7,,,1
 field = childMix|2|struct:mix,0,1,low,,,7,,,1
 field = childMixId|3|idLong:mix,1,1,low,,,,,,0
 field = childMixOfferSummaryForMixId|14|struct:childMixOfferSummary,0,1,medium,,,7,,,1
 field = collectionForCollectionId|4|struct:collection,0,1,low,,,7,,,1
 field = contentForContentId|5|struct:content,0,1,low,,,7,,,1
 field = displayRank|6|int,1,1,low,,,,0,,0
 field = endTime|20|dateTime,0,1,low,,3,,,,0
 field = mixMappingId|7|idLong:mixMapping,0,1,low,,,,,,0
 field = mixServiceGroup|8|string,0,,low,,,,,32,0
 field = mostRecentDownloadForOfferId|13|struct:download,0,1,medium,,,7,,,1
 field = offerForOfferId|9|struct:offer,0,1,low,,,7,,,1
 field = parentMix|10|struct:mix,0,1,low,,,7,,,1
 field = parentMixId|11|idLong:mix,1,1,low,,,,,,0
 field = previewOfferForOfferId|22|struct:offer,0,1,low,,,7,,,1
 field = searchRequestSummaryForSearchRequestId|15|struct:searchRequestSummary,0,1,medium,,,7,,,1
 field = startTime|21|dateTime,0,1,low,,3,,,,0
 field = subscriptionForOfferId|12|struct:subscription,0,,medium,,,7,,,1
 field = uiDestinationForUiDestinationId|16|struct:uiDestination,0,1,low,,,7,,,1
 field = uiDestinationInstanceForUiDestinationInstanceId|17|struct:uiDestinationInstance,0,1,low,,,7,,,1
 field = uiTransitionForUiTransitionId|18|struct:uiTransition,0,1,low,,,7,,,1
 isFrozen = true
 number = 408
 returnType = mixMapping
   description = Stores a new or a modified mixMappingobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = assetForAssetId|,7,Holds the assetForAssetId note.
   field = childMix|,7,Holds the childMixForMixId note.
   field = childMixId|,,Child mixId.
   field = childMixOfferSummaryForMixId|,7,container for the childMixOfferSummaryForMixId annotation
   field = collectionForCollectionId|,7,Holds the collectionForCollectionId note.
   field = contentForContentId|,7,Holds the contentForContentId note.
   field = displayRank|,,Display order of this mix relative to all  other mixes within a parent mix.
   field = endTime|3,,Date the mixMapping expires.
   field = mixMappingId|,,Globally unique id for this mix.
   field = mixServiceGroup|,,Service groups this mix belongs to.
   field = offerForOfferId|,7,Holds the offerForOfferId note.
   field = parentMix|,7,Holds the parentMixForMixId note.
   field = parentMixId|,,Parent mixId.
   field = previewOfferForOfferId|,7,Holds the previewOfferForOfferId note.
   field = searchRequestSummaryForSearchRequestId|,7,container for the searchRequestForSearchRequestId annotation. will be filled in based on the searchRequestId in the objectId field, if the contained object is a searchReqest.
   field = startTime|3,,Date the mixMapping becomes effective.
   fieldProject = assetForAssetId|0|0|7|hme-cds
   fieldProject = childMix|0|0|7|hme-cds
   fieldProject = childMixId|0|0|0|hme-cds
   fieldProject = collectionForCollectionId|0|0|7|hme-cds
   fieldProject = contentForContentId|0|0|7|hme-cds
   fieldProject = displayRank|0|0|0|hme-cds
   fieldProject = endTime|0|3|0|hme-cds
   fieldProject = mixMappingId|0|0|0|hme-cds
   fieldProject = mixServiceGroup|0|0|0|hme-cds
   fieldProject = offerForOfferId|0|0|7|hme-cds
   fieldProject = parentMix|0|0|7|hme-cds
   fieldProject = parentMixId|0|0|0|hme-cds
   fieldProject = startTime|0|3|0|hme-cds
   project = mixMappingStore|0|0|0|hme-cds

********** operation = mixRemove (NO)
 field = mixId|1|idLong:mix,1,1,,,,,,,0
 isFrozen = true
 number = 409
 returnType = success
   description = Removes a mix object from the mind.
   project = mixRemove|0|0|0|hme-cds

********** operation = mixSearch (YES)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = assetForAssetId|3|struct:asset,0,1,low,,,,,,1
 field = bodyId|4|idBody:body,0,1,,,,,,,0
 field = categoryId|5|idLong:category,0,,,,,,,,0
 field = collectionId|6|idLong:collection,0,1,,,,,,,0
 field = contentId|7|idLong:content,0,1,,,,,,,0
 field = count|8|int,0,1,,1,,,1,,0
 field = current|9|boolean,0,1,,,,,,,0
 field = excludeMixId|51|idLong:mix,0,,,,,,,,0
 field = excludeObjectIdAndType|40|long,0,,,,,,,,0
 field = fallbackImageObjectType|53
 field = filterUnavailable|55|boolean,0,1,,,,,,,0
 field = filterUnavailableChildren|38|boolean,0,1,,,,,,,0
 field = format|10|enum:format,0,1,,,,,,,0
 field = groupBy|11|string,0,,,,,,,32,0
 field = hasImage|52|boolean,0,1,,,,,,,0
 field = imageRuleset|49|struct:imageRuleset,0,,,,,,,,0
 field = isAdult|56|boolean,0,1,,,,,,,0
 field = isForKids|12|boolean,0,1,,,,,,,0
 field = leaf|39|boolean,0,1,,,,,,,0
 field = levelOfDetail|13|enum:levelOfDetail,0,1,,,,,,,0
 field = maxCreateDate|36|dateTime,0,1,,,,,,,0
 field = maxDepth|47
 field = maxUpdateDate|35|dateTime,0,1,,,,,,,0
 field = minBodyThumbs|48|int,0,1,low,,,,-3,3,0
 field = minCreateDate|37|dateTime,0,1,,,,,,,0
 field = minPublishDate|34|dateTime,0,1,,,,,,,0
 field = minUpdateDate|14|dateTime,0,1,,,,,,,0
 field = mixId|15|idLong:mix,0,,,,,,,,0
 field = mixType|16|enum:mixType,0,,,,,,,,0
 field = note|17|string,0,,,,,,,,0
 field = objectId|45|idLongAndType,0,,,,7,,,,0
 field = objectIdAndType|41|long,0,,,,,,,,0
 field = objectType|46|enum:mindObjectType,0,,,,,,,,0
 field = offerForOfferId|18|struct:offer,0,1,low,,,,,,1
 field = offerId|19|idString:offer,0,1,,,,,,,0
 field = offset|20|int,0,1,,0,,,,,0
 field = orderBy|21|string,0,,,,,,,32,0
 field = parentMixId|22|idLong:mix,0,,,,,,,,0
 field = partnerId|23|idInt:partner,0,,,,,,,,0
 field = partnerMixId|24|string,0,1,,,5,,,128,0
 field = previewOfferForOfferId|54|struct:offer,0,1,low,,,,,,1
 field = removeField|25|string,0,,,,,2,,,0
 field = resolveCount|42|int,0,1,,0,,,,,0
 field = resolveLevelOfDetail|43|enum:levelOfDetail,0,1,,low,,,,,0
 field = resolveOffset|44|int,0,1,,0,,,,,0
 field = responseTemplate|50|struct:responseTemplate,0,,,,,,,,0
 field = root|26|boolean,0,1,,,,,,,0
 field = rootTitle|27|string,0,1,,,,,,128,0
 field = subscribable|28|boolean,0,1,,,,,,,0
 field = suspended|29|boolean,0,1,,,,,,,0
 field = title|30|string,0,1,,,,,,128,0
 field = titleKeyword|31|string,0,1,,,,,,128,0
 field = titlePrefix|32|string,0,1,,,,,,128,0
 field = useAnchorOperation|33|boolean,0,1,,true,,,,,0
 fieldGroup = imageRulesetFields
 fieldGroup = resolveSearchFields
 fieldGroup = searchFields
 isFrozen = true
 number = 410
 orderBy = bodyThumbsRating
 orderBy = mixId
 orderBy = publishDate
 orderBy = title
 orderBy = updateDate
 returnType = idSequence
   description = Search for a mix.  You must specify exactly one of: mixId, parentMixId, root, or title.
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = assetForAssetId|,,Limits the search to an object with exactly the same value in this field.
   field = bodyId|,,If input body id, search for those mixes this TSN can see  based upon which groups it is in.
   field = categoryId|,,If multiple categoryIds are specified, they will be ANDed together in the query
   field = collectionId|,,Limits the search to an object with exactly the same value in this field.
   field = contentId|,,Limits the search to an object with exactly the same value in this field.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = current|,,Limits the search to an object with exactly the same value in this field.
   field = excludeObjectIdAndType|,,An objectIdAndType from an idSequence obtained in a previous search operation, to be excluded from the result set.
   field = filterUnavailable|,,If filterUnavailable is true, only return mixes that point to existing or available items.
   field = filterUnavailableChildren|,,Limits the search to an object with exactly the same value in this field.
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = imageRuleset|,,one ruleset should be specified per image desired. multiple rulesets can be specified.
   field = isAdult|,,Limits the search to an object with exactly the same value in this field.
   field = isForKids|,,Limits the search to an object with exactly the same value in this field.
   field = leaf|,,Limits the search to an object with exactly the same value in this field.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = mixId|,,Limits the search to an object with exactly the same value in this field.
   field = mixType|,,multiple mixTypes will be ORd together
   field = note|,,A request for the results to be annotated.
   field = objectId|7,,Limits the search to an object with exactly the same value in this field.
   field = objectIdAndType|,,Limits the search to an object with exactly the same value in this field.
   field = offerForOfferId|,,Limits the search to an object with exactly the same value in this field.
   field = offerId|,,Limits the search to an object with exactly the same value in this field.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = parentMixId|,,Return the list of mixes pointed at by parentMixId.
   field = partnerId|,,Limits the search to an object with exactly the same value in this field.
   field = partnerMixId|5,,Limits the search to an object with exactly the same value in this field.
   field = previewOfferForOfferId|,,Limits the search to an object with exactly the same value in this field.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = resolveCount|,,If a format of (string)idSequence is specified, the count of objectIds that should be resolved into objects. Ignored unless format = (string)idSequence.
   field = resolveLevelOfDetail|,,If a format of (string)idSequence is specified, the levelOfDetail at which the objects should be resolved.  Ignored unless resolveCount > 0 and format = (string)idSequence.
   field = resolveOffset|,,If a format of (string)idSequence is specified, the offset into the objectId list that should be resolved into objects. Ignored unless resolveCount > 0 and format = (string)idSequence.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = root|,,Limits the search to an object with exactly the same value in this field.
   field = rootTitle|,,Limits the search to an object with exactly the same value in this field.
   field = subscribable|,,Limits the search to an object with exactly the same value in this field.
   field = suspended|,,Limits the search to an object with exactly the same value in this field.
   field = title|,,Limits the search to an object with exactly the same value in this field.
   field = titleKeyword|,,Find a mix by title keyword.
   field = titlePrefix|,,Find a mix by titlePrefix.
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = assetForAssetId|0|0|0|hme-cds
   fieldProject = collectionId|0|0|0|hme-cds
   fieldProject = contentId|0|0|0|hme-cds
   fieldProject = count|0|0|0|all
   fieldProject = current|0|0|0|hme-cds
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = isForKids|0|0|0|hme-cds
   fieldProject = leaf|0|0|0|hme-cds
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = mixId|0|0|0|hme-cds
   fieldProject = offerForOfferId|0|0|0|hme-cds
   fieldProject = offerId|0|0|0|hme-cds
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = parentMixId|0|0|0|hme-cds
   fieldProject = partnerId|0|0|0|hme-cds,partner-cds
   fieldProject = partnerMixId|0|5|0|hme-cds
   fieldProject = responseTemplate|0|0|0|all
   fieldProject = root|0|0|0|hme-cds
   fieldProject = rootTitle|0|0|0|hme-cds
   fieldProject = subscribable|0|0|0|hme-cds
   fieldProject = suspended|0|0|0|hme-cds
   fieldProject = title|0|0|0|hme-cds
   fieldProject = titleKeyword|0|0|0|hme-cds
   fieldProject = titlePrefix|0|0|0|hme-cds
   project = mixSearch|0|0|0|hme-cds

********** operation = mixStore (NO)
 field = adBrandId|1|idInt:adBrand,0,1,medium,,,,,,0
 field = assetForAssetId|2|struct:asset,0,1,low,,,7,,,1
 field = authorDescription|3|string,0,1,medium,,,,,4096,0
 field = bodyThumbsForMixId|56|struct:bodyThumbs,0,1,low,,,7,,,1
 field = category|4|struct:category,0,,high,,,,,,0
 field = childFilterPartnerId|60|idInt:partner,0,1,low,,,,,,0
 field = childMixOfferSummaryForMixId|48|struct:childMixOfferSummary,0,1,medium,,,7,,,1
 field = collectionForCollectionId|5|struct:collection,0,1,low,,,7,,,1
 field = collectionId|6|idLong:collection,0,1,low,,,,,,0
 field = contentForContentId|7|struct:content,0,1,low,,,7,,,1
 field = contentId|8|idLong:content,0,1,low,,,,,,0
 field = createDate|9|dateTime,0,1,medium,,,6,,,0
 field = current|10|boolean,0,1,high,false,,7,,,0
 field = description|11|string,0,1,medium,,,,,4096,0
 field = displayRank|12|int,0,1,medium,,,,0,,0
 field = editor|13|string,0,1,medium,,,,,128,0
 field = endTime|14|dateTime,0,1,low,,3,,,,0
 field = filterUnavailableChildren|49|boolean,0,1,medium,false,,,,,0
 field = gridItemType|51|enum:mixGridItemType,0,1,medium,,,,,,0
 field = hasContentLeafChildren|52|boolean,0,1,medium,false,,7,,,0
 field = image|45|struct:image,0,,medium,,,,,,0
 field = imageUrl|15|imageUrl,0,1,medium,,,8,,255,0
 field = implementedBy|67|enum:mindType,0,1,low,remote,9,,,,0
 field = isAdult|61|boolean,0,1,low,,,,,,0
 field = isForKids|16|boolean,0,1,low,,,,,,0
 field = isReadOnly|17|boolean,0,1,low,,4,,,,0
 field = leaf|18|boolean,1,1,low,,,,,,0
 field = leafObjectType|53|enum:mindObjectType,0,1,medium,,,7,,,0
 field = maxStartTime|19|dateTime,0,1,low,,,2,,,0
 field = minEndTime|20|dateTime,0,1,low,,,2,,,0
 field = mixId|21|idLong:mix,0,1,low,,,,,,0
 field = mixType|22|enum:mixType,1,1,low,,,,,,0
 field = mostRecentDownloadForOfferId|47|struct:download,0,1,medium,,,7,,,1
 field = mpaaRating|63
 field = objectId|50|idLongAndType,0,1,low,,7,,,,0
 field = offerForOfferId|23|struct:offer,0,1,low,,,7,,,1
 field = offerId|24|idString:offer,0,1,low,,,,,,0
 field = partnerId|25|idInt:partner,1,1,low,,,,,,0
 field = partnerInfo|44|struct:partnerInfo,0,1,high,,,7,,,1
 field = partnerMixId|26|string,0,1,low,,5,,,128,0
 field = presentationHint|62|struct:mixPresentationHint,0,1,low,,,,,,0
 field = previewOfferForOfferId|66|struct:offer,0,1,low,,,7,,,1
 field = price|27|currency,0,1,low,,4,,,,0
 field = publicationFrequency|28|string,0,1,low,,4,,,100,0
 field = publishDate|41|dateTime,0,1,medium,,,,,,0
 field = rating|64|union:typedRating,0,,high,,7,,,,0
 field = recordPolicy|29|enum:recordPolicy,0,1,low,recordAll,,,,,0
 field = root|30|boolean,1,1,low,,,,,,0
 field = rootTitle|31|string,0,1,low,,,,,128,0
 field = screenType|54|enum:mixScreenType,0,1,medium,,,,,,0
 field = searchRequestSummaryForSearchRequestId|55|struct:searchRequestSummary,0,1,medium,,,7,,,1
 field = shortDescription|32|string,0,1,medium,,,,,4096,0
 field = startTime|33|dateTime,0,1,low,,3,,,,0
 field = subscribable|34|boolean,1,1,low,,,,,,0
 field = subscribableMix|43|struct:mix,0,,low,,,7,,,1
 field = subscribableMixId|42
 field = subscriptionExclusionForCollectionId|35|struct:subscriptionExclusion,0,1,low,,,7,,,1
 field = subscriptionForOfferId|46|struct:subscription,0,,medium,,,7,,,1
 field = subtitle|36|string,0,1,medium,,,,,255,0
 field = suspended|37|boolean,0,1,medium,false,,,,,0
 field = title|38|string,1,1,low,,,,,128,2
 field = tvRating|65
 field = uiDestinationForUiDestinationId|57|struct:uiDestination,0,1,low,,,7,,,1
 field = uiDestinationInstanceForUiDestinationInstanceId|58|struct:uiDestinationInstance,0,1,low,,,7,,,1
 field = uiTransitionForUiTransitionId|59|struct:uiTransition,0,1,low,,,7,,,1
 field = updateDate|39|dateTime,0,1,medium,,,6,,,0
 field = webSiteUrl|40|url,0,1,medium,,,,,255,0
 isFrozen = true
 number = 412
 returnType = mix
   description = Stores a new or a modified mixobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = adBrandId|,,The ID of the AdBrand a mix may be associated with.
   field = assetForAssetId|,7,Holds the assetForAssetId note.
   field = authorDescription|,,Description of the author of this mix.
   field = category|,,like content, collections, and offers, mixes can have categories
   field = childFilterPartnerId|,,When specified, all descendant mixes should be filtered by this partnerId value (this matters for mixMappingSearch).  This really implies the objects referenced by content leaf mixes will be filtered by this partnerId.  This enables a partner to create a "walled garden" effect for a consumer of this mix tree, such that only leaf objects related to this partnerId should be considered.
   field = childMixOfferSummaryForMixId|,7,container for the childMixOfferSummaryForMixId annotation
   field = collectionForCollectionId|,7,Holds the collectionForCollectionId note.
   field = contentForContentId|,7,Holds the contentForContentId note.
   field = createDate|,6,Mix creation date.
   field = current|,7,is a mix considered current? this field is autogenerated, and cannot be used in a mixStore.
   field = description|,,Description of this mix.
   field = displayRank|,,Order to display the mix relative to other mixes. this field is generated from a mixMapping and cannot be used in a mixStore.
   field = editor|,,Editor of this mix.
   field = endTime|3,,Date the mix expires.
   field = filterUnavailableChildren|,,When set to true, mixMappingSearch will filter unavailable children
   field = gridItemType|,,the type of grid item this mix should be displayed as in a grid.
   field = hasContentLeafChildren|,7,if any of the children of this mix are leaves containing a collection, content, or offer, this is true.
   field = image|,,image metadata associated with this mix.
   field = imageUrl|,8,URL to an image associated withi this mix.
   field = implementedBy|9,,Where the underlying object is implemented (local or remote mind, etc.)
   field = isAdult|,,Whether or not this mix represents content or contains information that is considered adult by the TiVo Service.
   field = isForKids|,,Flag to indicate that this is a KidZone approved mix.
   field = isReadOnly|4,,Flag to indicate whether or not the mix can be updated.
   field = leaf|,,Flag to indicate that this is a leaf mix.
   field = leafObjectType|,7,the type of object contained. populated by the mind if the mix is a leaf.
   field = maxStartTime|,2,Date the mix becomes effective.  Renamed to "startTime" in mind3.
   field = minEndTime|,2,Date the mix expires.  Renamed to "endTime" in mind3.
   field = mixId|,,Globally unique id for this mix.
   field = objectId|7,,objectId of the mix object 
   field = offerForOfferId|,7,Holds the offerForOfferId note.
   field = partnerId|,,Id of the partner that created the object.
   field = partnerInfo|,7,a container for the partnerInfoForPartnerId annotation
   field = partnerMixId|5,,The partner's own mix Id.
   field = presentationHint|,,Presentation hints to the UI.
   field = previewOfferForOfferId|,7,Holds the previewOfferForOfferId note.
   field = price|4,,Price to purchase this mix.
   field = publicationFrequency|4,,A description of how often the mix is updated.  The author is  free to put in whatever he wants, but it will probably look something like, "Monday, Wednesday, Friday" or "Once a month".
   field = publishDate|,,the date the mix was published. defaults to current dateif not specified.
   field = rating|7,,Typed rating union, represents a rating from a specific rating authority.
   field = recordPolicy|,,which offers should the scheduler consider as candidates?
   field = root|,,Flag to indicate that this is a root level mix.
   field = rootTitle|,,If this is a root mix, this title will uniquely identify this root mix.  No other mix can have the same rootTitle.
   field = screenType|,,the type of screen in which to display this mix and its children
   field = searchRequestSummaryForSearchRequestId|,7,container for the searchRequestForSearchRequestId annotation. will be filled in based on the searchRequestId in the objectId field, if the contained object is a searchReqest.
   field = shortDescription|,,Short description of this mix.
   field = startTime|3,,Date the mix becomes effective.
   field = subscribable|,,Flag to indicate that this is a subscribable mix.  In the current/archive mix paradigm, this flag is used to indicate which mix is the current mix.  As you make your way down from the root of the tree, the first mix you see that is  subscribable is the current mix, which points at the one or more offer mixes that are deemed by the author to be "current".  An offer mix is a mix that points directly to an offer.  The mix on the same level as the current mix that is not subscribable is the archive mix, which points at one more offer mixes which are deemed by the author to be "archived".
   field = subscribableMix|,7,This field contains the subscribable parent mix for this mix, if the subscribableMixForMixId note is used and there is a subscribable parent mix
   field = subscriptionExclusionForCollectionId|,7,Holds the subscriptionExclusionForCollectionId note.
   field = subtitle|,,Subtitle of this mix.
   field = suspended|,,when a mix is suspended, its corresponding mixSource object will not return any offers.
   field = title|,,Title of this mix.
   field = updateDate|,6,Mix update date.
   field = webSiteUrl|,,URL to a website associated with this mix.
   fieldProject = assetForAssetId|0|0|7|hme-cds
   fieldProject = collectionForCollectionId|0|0|7|hme-cds
   fieldProject = collectionId|0|0|0|hme-cds
   fieldProject = contentForContentId|0|0|7|hme-cds
   fieldProject = contentId|0|0|0|hme-cds
   fieldProject = createDate|0|0|6|hme-cds
   fieldProject = current|0|0|7|hme-cds
   fieldProject = description|0|0|0|hme-cds
   fieldProject = displayRank|0|0|0|hme-cds
   fieldProject = endTime|0|3|0|hme-cds
   fieldProject = hasContentLeafChildren|0|0|7|hme-cds
   fieldProject = image|0|0|0|hme-cds
   fieldProject = imageUrl|0|0|8|hme-cds
   fieldProject = isForKids|0|0|0|hme-cds
   fieldProject = leaf|0|0|0|hme-cds
   fieldProject = leafObjectType|0|0|7|hme-cds
   fieldProject = mixId|0|0|0|hme-cds
   fieldProject = mixType|0|0|0|hme-cds
   fieldProject = offerForOfferId|0|0|7|hme-cds
   fieldProject = offerId|0|0|0|hme-cds
   fieldProject = partnerId|0|0|0|hme-cds,partner-cds
   fieldProject = partnerMixId|0|5|0|hme-cds
   fieldProject = price|0|4|0|hme-cds
   fieldProject = publicationFrequency|0|4|0|hme-cds
   fieldProject = recordPolicy|0|0|0|hme-cds
   fieldProject = root|0|0|0|hme-cds
   fieldProject = rootTitle|0|0|0|hme-cds
   fieldProject = shortDescription|0|0|0|hme-cds
   fieldProject = startTime|0|3|0|hme-cds
   fieldProject = subscribable|0|0|0|hme-cds
   fieldProject = subscribableMix|0|0|7|hme-cds
   fieldProject = subscriptionExclusionForCollectionId|0|0|7|hme-cds
   fieldProject = subtitle|0|0|0|hme-cds
   fieldProject = suspended|0|0|0|hme-cds
   fieldProject = title|0|0|0|hme-cds
   fieldProject = updateDate|0|0|6|hme-cds
   fieldProject = webSiteUrl|0|0|0|hme-cds
   project = mixStore|0|0|0|hme-cds

********** operation = monitorLogOperation (NO)
 field = operation|1|string,1,1,,,,,,,0
 field = operationsToLog|2|int,1,1,,,,,0,,0
 field = threshold|3|int,0,1,,,,,0,,0
 number = 416
 returnType = success
   description = will log 'n' requests for a given operation
   field = operation|,,operation to log
   field = operationsToLog|,,number of times to log the operation
   field = threshold|,,only log operations lasting longer than threshold, in milliseconds

********** operation = monitorToggle (NO)
 field = allowDangerousValues|1|boolean,0,1,,,,,,,0
 field = enable|2|boolean,1,1,,,,,,,0
 field = interval|3|int,0,1,,,,,0,,0
 field = outputNanos|4|boolean,0,1,,,,,,,0
 field = threshold|5|int,0,1,,,,,0,,0
 number = 418
 returnType = success
   description = turns monitoring operations on or off, depending on the parameters passed in.  If monitoring is on, additional information will go into the mind log files for every nth operation
   field = allowDangerousValues|,,should we override hardcoded minimums for interval and threshold
   field = enable|,,enable (or disable)
   field = interval|,,interval of sessions to log
   field = outputNanos|,,should we output in nanoseconds
   field = threshold|,,threshold (in ms) that triggers automatic logging

********** operation = mouseButtonStateSet (NO)
 field = button|1|enum:mouseButton,1,1,,,,,,,0
 field = isPressed|2|boolean,1,1,,,,,,,0
 number = 1892
 returnType = success
   description = Sets the state (pressed or released) for a specified mouse button
   field = button|,,The mouse button in question
   field = isPressed|,,true if the button is pressed (down), otherwise false

********** operation = myShowsItemSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = bodyId|3|idBody:body,1,1,,,,,,,0
 field = categoryId|4|idLong:category,0,1,,,,,,,0
 field = collectionType|5|enum:collectionType,0,1,,,,,,,0
 field = count|6|int,0,1,,1,,,1,,0
 field = flatten|7|boolean,0,1,,false,,,,,0
 field = format|8|enum:format,0,1,,,,,,,0
 field = groupBy|9|string,0,,,,,,,32,0
 field = hdtv|10|boolean,0,1,,,,,,,0
 field = levelOfDetail|11|enum:levelOfDetail,0,1,,,,,,,0
 field = myShowsItemId|12|idLongAndType,0,1,,,,,,,0
 field = note|13|string,0,,,,,,,,0
 field = offset|14|int,0,1,,0,,,,,0
 field = orderBy|15|string,0,,,,,,,32,0
 field = parentMyShowsItemId|16|idLongAndType,0,1,,,,,,,0
 field = removeField|17|string,0,,,,,2,,,0
 field = responseTemplate|19|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|18|boolean,0,1,,true,,,,,0
 fieldGroup = myShowsItemSearchFilters
 fieldGroup = searchFields
 number = 1306
 orderBy = deletionTime
 orderBy = isInProgress
 orderBy = startTime
 orderBy = title
 returnType = myShowsItemList
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = bodyId|,,Limits the search to an object with exactly the same value in this field.
   field = categoryId|,,only return MyShowsItems containing recordings or locators belonging to this category.
   field = collectionType|,,only return MyShowsItems containing recordings or locators with this collectionType.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = flatten|,,when true, return myShowsItems containing single items, instead of grouping like-items together
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = hdtv|,,when true, return only MyShowsItems containing at least one HD recording or a locator with at least one HD offer available. When false, return only MyShowsItems containing at least one SD recording a a locator with at least one SD offer available. when omitted, no HD filtering is applied.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = myShowsItemId|,,Limits the search to an object with exactly the same value in this field.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = parentMyShowsItemId|,,Get the contents of a MyShowsItem. If the parentMyShowsItemId corresponds to a MyShowsItem consisting of a single recording or locator, this is equivalent to searching by MyShowsItemId. If it represents a group, this will return a MyShowsItem per recording or locator in the group.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = nameRemove (NO)
 field = nameId|1|idLong:name,1,1,,,,,,,0
 isFrozen = true
 number = 822
 returnType = success
   description = Removes a name object from the mind.

********** operation = nameSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = count|3|int,0,1,,1,,,1,,0
 field = first|4|string,0,1,,,,,,100,0
 field = format|5|enum:format,0,1,,,,,,,0
 field = groupBy|6|string,0,,,,,,,32,0
 field = last|7|string,0,1,,,,,,100,0
 field = levelOfDetail|8|enum:levelOfDetail,0,1,,,,,,,0
 field = maxCreateDate|22|dateTime,0,1,,,,,,,0
 field = maxUpdateDate|21|dateTime,0,1,,,,,,,0
 field = middle|9|string,0,1,,,,,,100,0
 field = minCreateDate|23|dateTime,0,1,,,,,,,0
 field = minUpdateDate|10|dateTime,0,1,,,,,,,0
 field = name|11|string,0,1,,,,,,100,0
 field = nameId|12|idLong:name,0,1,,,,,,,0
 field = namespace|20|enum:namespace,0,1,,,,,,,0
 field = note|13|string,0,,,,,,,,0
 field = offset|14|int,0,1,,0,,,,,0
 field = orderBy|15|string,0,,,,,,,32,0
 field = partnerId|19|idInt:partner,0,1,,,,,,,0
 field = personId|16|idLong:person,0,1,,,,,,,0
 field = removeField|17|string,0,,,,,2,,,0
 field = responseTemplate|24|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|18|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 isFrozen = true
 number = 823
 orderBy = first
 orderBy = last
 orderBy = nameId
 orderBy = personId
 orderBy = relevance
 returnType = nameList
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = first|,,Limits the search to an object with exactly the same value in this field.
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = last|,,Limits the search to an object with exactly the same value in this field.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = middle|,,Limits the search to an object with exactly the same value in this field.
   field = name|,,limits the person search to people whose first or last name match this attribute
   field = nameId|,,Limits the search to an object with exactly the same value in this field.
   field = namespace|,,Limits the search to an object with exactly the same value in this field.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = partnerId|,,Limits the search to an object with exactly the same value in this field.
   field = personId|,,Limits the search to an object with exactly the same value in this field.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = first|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = last|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = middle|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = namespace|0|0|0|partner-schedule,partner-cds,partner-subscribe
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = nameStore (NO)
 field = first|1|string,0,1,low,,,,,100,0
 field = last|2|string,0,1,low,,,,,100,0
 field = lockPersonId|6|boolean,0,1,low,false,,,,,0
 field = middle|3|string,0,1,low,,,,,100,0
 field = nameId|4|idLong:name,0,1,low,,,,,,0
 field = partnerId|7|idInt:partner,0,1,low,,,,,,0
 field = personId|5|idLong:person,1,1,low,,,,,,0
 isFrozen = true
 number = 824
 returnType = name
   description = Stores a new or a modified nameobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = first|,,First name
   field = last|,,Last name
   field = lockPersonId|,,For authored names, there is an out of band process that tries to map names to EPG personIds.  If this flag is set to true, that process will ignore the name and not override the personId for it.
   field = middle|,,Middle name
   field = partnerId|,,authored names require a partnerId
   fieldProject = first|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = last|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = middle|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe

********** operation = neoFriendRemove (NO)
 field = fromUserId|1|idInt:neoUser,1,1,,,,,,,0
 field = toUserId|2|idInt:neoUser,1,1,,,,,,,0
 number = 1157
 returnType = success
   description = Removes a neoFriend object from the mind.

********** operation = neoFriendSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = count|3|int,0,1,,1,,,1,,0
 field = format|4|enum:format,0,1,,,,,,,0
 field = fromUserId|5|idInt:neoUser,0,1,,,,,,,0
 field = groupBy|6|string,0,,,,,,,32,0
 field = levelOfDetail|7|enum:levelOfDetail,0,1,,,,,,,0
 field = note|8|string,0,,,,,,,,0
 field = offset|9|int,0,1,,0,,,,,0
 field = orderBy|10|string,0,,,,,,,32,0
 field = removeField|11|string,0,,,,,2,,,0
 field = responseTemplate|14|struct:responseTemplate,0,,,,,,,,0
 field = toUserId|12|idInt:neoUser,0,1,,,,,,,0
 field = useAnchorOperation|13|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 number = 1158
 returnType = neoFriendList
   description = search for friends by FromUserId, ToUserId
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = fromUserId|,,Limits the search to an object with exactly the same value in this field.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = toUserId|,,Limits the search to an object with exactly the same value in this field.
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = neoFriendStore (NO)
 field = fromUserId|1|idInt:neoUser,1,1,low,,,,,,0
 field = neoUserForToUserId|3|struct:neoUser,0,1,low,,,7,,,1
 field = toUserId|2|idInt:neoUser,1,1,low,,,,,,0
 number = 1159
 returnType = neoFriend
   description = Stores a new or a modified neoFriendobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = fromUserId|,,The user who has the friend.
   field = neoUserForToUserId|,7,Annotation (note) holds user details of friend
   field = toUserId|,,The friend.

********** operation = neoRecommendationRemove (NO)
 field = neoRecommendationId|1|idInt:neoRecommendation,1,1,,,,,,,0
 number = 1185
 returnType = success
   description = Removes a neoRecommendation object from the mind.

********** operation = neoRecommendationSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = contentSource|3|string,0,1,,,,,,255,0
 field = contentUrl|4|string,0,1,,,,,,255,0
 field = count|5|int,0,1,,1,,,1,,0
 field = format|6|enum:format,0,1,,,,,,,0
 field = groupBy|7|string,0,,,,,,,32,0
 field = levelOfDetail|8|enum:levelOfDetail,0,1,,,,,,,0
 field = neoRecommendationId|9|idInt:neoRecommendation,0,1,,,,,,,0
 field = note|10|string,0,,,,,,,,0
 field = offset|11|int,0,1,,0,,,,,0
 field = orderBy|12|string,0,,,,,,,32,0
 field = referringUserId|13|idInt:neoUser,0,1,,,,,,,0
 field = removeField|14|string,0,,,,,2,,,0
 field = requestingUserId|15|idInt:neoUser,0,1,,,,,,,0
 field = responseTemplate|17|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|16|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 number = 1186
 returnType = neoRecommendationList
   description = search for a clip by NeoRecommendationId or RequestingUserId  can limit results by referring user, content, content source type
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = contentSource|,,Limits the search to an object with exactly the same value in this field.
   field = contentUrl|,,Limits the search to an object with exactly the same value in this field.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = neoRecommendationId|,,Limits the search to an object with exactly the same value in this field.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = referringUserId|,,Limits the search to an object with exactly the same value in this field.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = requestingUserId|,,neoUserId requesting recommendations
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = neoRecommendationStore (NO)
 field = contentDescription|8|string,0,1,low,,,,,255,0
 field = contentSource|1|string,0,1,low,,,,,255,0
 field = contentSourceIconUrl|9|string,0,1,low,,,,,255,0
 field = contentUrl|2|string,0,1,low,,,,,255,0
 field = matchRank|3|int,0,1,low,,,,,,0
 field = matchReasonText|4|string,0,1,low,,,,,255,0
 field = neoRecommendationId|5|idInt:neoRecommendation,0,1,low,,,,,,0
 field = referringUserId|6|idInt:neoUser,0,1,low,,,,,,0
 field = userRating|7|int,0,1,low,,,,,,0
 number = 1187
 returnType = neoRecommendation
   description = Stores a new or a modified neoRecommendationobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = contentDescription|,,Textual description of the content
   field = contentSource|,,source of the content (e.g. YouTube, TV, DVD, Twitter, Email)
   field = contentSourceIconUrl|,,URL for the source of the content (e.g. "YouTube" icon)
   field = contentUrl|,,recommended content (to be deprecated by contentId)
   field = matchRank|,,ranking of the match, 1=highest, 99=somewhat low rank
   field = matchReasonText|,,relevant reason for the match, such as an actor name, topic (to be deprecated by reason type)
   field = referringUserId|,,neoUserId who recommended the content
   field = userRating|,,user rating, if specified

********** operation = neoSocialEventRemove (NO)
 field = neoSocialEventId|1|idInt:neoSocialEvent,1,1,,,,,,,0
 number = 1477
 returnType = success
   description = Removes a neoSocialEvent object from the mind.

********** operation = neoSocialEventSearch (NO)
 field = addField|6|string,0,,,,,2,,,0
 field = anchor|7|anchorDict,0,1,,,,,,,0
 field = count|8|int,0,1,,1,,,1,,0
 field = eventVisibilityLevel|17|enum:lifestreamEventVisibility,0,1,,,,,,,0
 field = format|9|enum:format,0,1,,,,,,,0
 field = fromUserId|1|idLong:user,0,1,,,,,,,0
 field = groupBy|10|string,0,,,,,,,32,0
 field = levelOfDetail|11|enum:levelOfDetail,0,1,,,,,,,0
 field = neoSocialEventId|2|idInt:neoSocialEvent,0,1,,,,,,,0
 field = note|12|string,0,,,,,,,,0
 field = offset|13|int,0,1,,0,,,,,0
 field = orderBy|14|string,0,,,,,,,32,0
 field = refersToEventId|18|idInt:neoSocialEvent,0,1,,,,,,,0
 field = removeField|15|string,0,,,,,2,,,0
 field = responseTemplate|19|struct:responseTemplate,0,,,,,,,,0
 field = searchType|3|enum:lifestreamEventSearchType,0,1,,publicAndPrivateToMe,,,,,0
 field = toUserId|4|idLong:user,0,1,,,,,,,0
 field = useAnchorOperation|16|boolean,0,1,,true,,,,,0
 field = userId|5|idLong:user,0,1,,,,,,,0
 fieldGroup = searchFields
 number = 1478
 returnType = neoSocialEventList
   description = Returns NEO lifestream events visible by a Neo User, either posted to them, from them, or to a friend, depending on search type.  The default is to search for all events posted to this user.  Note: The default may change to include events posted *by* this user, too.  Either EventId or UserId must be specified (not both).  ToUserId is only applicable when Friends' Wall is included in the search (a user's Public Wall includes events on friends' walls that are posted by the user or self-posted by the friend).  This is the equivalent of getting streams like your NewsFeed, Profile, or Inbox in Facebook.  XXX Need more search parameters: minDateTime, maxDateTime  XXX Need orderBy options.  For now things are always returned in reverse dateTime order.
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = eventVisibilityLevel|,,The visibility of the lifestream events to search for, including all visiblities ABOVE this level.  I.e. if searchVisibility = 'friends', retrieve events with 'friends-of-friends' and 'world', since friends can see those messages too.  The default level depends on the context - type of search, type of event, social network, etc.
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = fromUserId|,,Matches lifestream events *from* the given user.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = neoSocialEventId|,,Limits the search to an object with exactly the same value in this field.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = refersToEventId|,,Limits the search to an object with exactly the same value in this field.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = searchType|,,Limit the type of lifestream events to search for.  The default is getPublicAndPrivateToMe to search for all events posted to this user, which includes the "PublicProfile" and all private events posted to this user.  To emulate the Facebook "News Feed" functionality, use publicWall.  To emulate the Facebook "Profile" functionality, use profile  To emulate the Facebook "Inbox" functionality, use messages.  To emulate the Facebook "Wall-to-Wall" functionality, use publicWall with both fromUserId and toUserId set.  To get only self-posts, use publicProfile with fromUserId=toUserId
   field = toUserId|,,Matches lifestream events *to* the given user.  Only applicable for PublicWall events.
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   field = userId|,,The user to search by. Events may not necessarily be to or from this user, since users can see posts to friends, groups, etc.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = neoSocialEventStore (NO)
 field = attachment|14|union:lifestreamEventAttachment,0,,low,,,,,,0
 field = attachmentInfo|15
 field = dateTime|1|dateTime,1,1,low,,,,,,0
 field = eventType|2|enum:lifestreamEventType,1,1,low,,,,,,0
 field = eventVisibility|11|enum:lifestreamEventVisibility,0,1,low,friends,,,,,0
 field = fromUserId|3|idLong:user,1,1,low,,,,,,0
 field = mediaUrl|4|string,0,,low,,,,,1000,0
 field = neoSocialEventId|5|idInt:neoSocialEvent,0,1,low,,,,,,0
 field = payload|6|union:lifestreamEventDetails,0,1,medium,,,,,,0
 field = refersToEventId|12|idInt:neoSocialEvent,0,1,low,,,,,,0
 field = shortText|7|string,0,1,low,,,,,100,0
 field = socialNetworkId|8|idInt:socialNetwork,1,1,low,,,,,,0
 field = subEventForNeoSocialEventId|13|struct:neoSocialEvent,0,,low,,,7,,,1
 field = subEventInfo|16|struct:lifestreamEventSubEventInfo,0,,low,,,,,,0
 field = text|9|string,0,1,low,,,,,1000,0
 field = updateTime|17|dateTime,0,1,low,,,,,,0
 field = userId|10|idLong:user,1,1,low,,,,,,0
 number = 1479
 returnType = neoSocialEvent
   description = Stores a new or a modified neoSocialEventobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = attachment|,,An event can have attachments such as photos, videos, music, flash content.  Note that there may be fewer attachments in the lifestream message than exist with the original source message, if the attachment count is higher than the max allowed (and/or the max attachments requested).
   field = dateTime|,,The time at which the event was created (a.k.a. createTime).
   field = eventType|,,The type of the event.
   field = eventVisibility|,,Who can view the event.  The default is normally "just my friends", but can be overridden by user preferences. The Social Network sets this field based on network policy and user preferences.
   field = fromUserId|,,Who posted the event.  Same as userId if self-posted.
   field = mediaUrl|,,The URL of a media resource, such as an image or video
   field = neoSocialEventId|,,The unique identifier for this lifestream event.
   field = payload|,,Payload specific to the event type.
   field = refersToEventId|,,The unique identifier for this lifestream event.
   field = shortText|,,Human-readable short text of the event that can be displayed in the UI.
   field = socialNetworkId|,,The social network that this event is stored in.  For now, this will be the Neo Social Network.  This could also indicate other internal Social Networks for new internal services, and external networks if we store external events.
   field = subEventForNeoSocialEventId|,7,Annotation (note) holds the (sub) events that refer to this event.
   field = subEventInfo|,,For each subEvent _type_ in the original (source) event, there will be a subEventInfo field indicating how many subEvents of that type actually exist (not how many were returned for this query).  I.e. if there are comments and likes for a post, it would have two subEventInfo fields with count > 0. If there were just comments, it would have one subEventInfo field with count > 0.  If useful, and depending on the event type, there may be additional subEventInfo fields with count=0 (e.g. "5 comments" and "0 likes").
   field = text|,,Human-readable text of the event that can be displayed in the UI.
   field = updateTime|,,The last time at which the event was updated.  If this field is not set, it has the same value as field='dateTime' (aka createTime).
   field = userId|,,The "owner" of the event - whose wall the event is posted on

********** operation = neoUserBookmarkRemove (NO)
 field = neoRecommendationId|1|idInt:neoRecommendation,1,1,,,,,,,0
 field = neoUserId|2|idInt:neoUser,1,1,,,,,,,0
 number = 1190
 returnType = success
   description = Removes a neoUserBookmark object from the mind.

********** operation = neoUserBookmarkSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = count|3|int,0,1,,1,,,1,,0
 field = format|4|enum:format,0,1,,,,,,,0
 field = groupBy|5|string,0,,,,,,,32,0
 field = levelOfDetail|6|enum:levelOfDetail,0,1,,,,,,,0
 field = neoRecommendationId|7|idInt:neoRecommendation,0,1,,,,,,,0
 field = neoUserId|8|idInt:neoUser,0,1,,,,,,,0
 field = note|9|string,0,,,,,,,,0
 field = offset|10|int,0,1,,0,,,,,0
 field = orderBy|11|string,0,,,,,,,32,0
 field = removeField|12|string,0,,,,,2,,,0
 field = responseTemplate|14|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|13|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 number = 1191
 returnType = neoUserBookmarkList
   description = search for saved user clips (bookmarks)
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = neoRecommendationId|,,Limits the search to an object with exactly the same value in this field.
   field = neoUserId|,,Limits the search to an object with exactly the same value in this field.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = neoUserBookmarkStore (NO)
 field = neoRecommendationId|1|idInt:neoRecommendation,1,1,low,,,,,,0
 field = neoUserId|2|idInt:neoUser,1,1,low,,,,,,0
 number = 1192
 returnType = neoUserBookmark
   description = Stores a new or a modified neoUserBookmarkobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = neoRecommendationId|,,recommended content
   field = neoUserId|,,user who saved the content

********** operation = neoUserRemove (NO)
 field = neoUserId|1|idInt:neoUser,1,1,,,,,,,0
 isFrozen = true
 number = 1161
 returnType = success
   description = Removes a neoUser object from the mind.

********** operation = neoUserSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = count|3|int,0,1,,1,,,1,,0
 field = format|4|enum:format,0,1,,,,,,,0
 field = groupBy|5|string,0,,,,,,,32,0
 field = levelOfDetail|6|enum:levelOfDetail,0,1,,,,,,,0
 field = maxCreateDate|15|dateTime,0,1,,,,,,,0
 field = maxUpdateDate|16|dateTime,0,1,,,,,,,0
 field = minCreateDate|17|dateTime,0,1,,,,,,,0
 field = minUpdateDate|18|dateTime,0,1,,,,,,,0
 field = name|7|string,0,1,,,,,,100,0
 field = neoUserId|8|idInt:neoUser,0,1,,,,,,,0
 field = note|9|string,0,,,,,,,,0
 field = offset|10|int,0,1,,0,,,,,0
 field = orderBy|11|string,0,,,,,,,32,0
 field = removeField|12|string,0,,,,,2,,,0
 field = responseTemplate|19|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|13|boolean,0,1,,true,,,,,0
 field = voipUser|14
 fieldGroup = searchFields
 fieldGroup = serviceClusterSearchDates
 number = 1162
 returnType = neoUserList
   description = search for a neoUser: by userId, by name
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = name|,,Limits the search to an object with exactly the same value in this field.
   field = neoUserId|,,Limits the search to an object with exactly the same value in this field.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = neoUserStore (NO)
 field = avatar|1|struct:image,1,1,low,,,,,,0
 field = bodyUserForNeoUserId|9|struct:bodyUser,0,,low,,,7,,,1
 field = credentials|10|string,1,1,low,,,,,100,0
 field = friendCompositeForNeoUserId|11|struct:friendComposite,0,,low,,,7,,,1
 field = friendSetForNeoUserId|12|struct:friendSet,0,,low,,,7,,,1
 field = hardPhoneNumber|2
 field = name|3|string,1,1,low,,,,,100,0
 field = neoUserId|4|idInt:neoUser,0,1,low,,,,,,0
 field = socialIdentityForNeoUserId|13|struct:socialIdentity,0,,low,,,7,,,1
 field = voipPassword|5
 field = voipServer|6
 field = voipType|7
 field = voipUser|8
 isFrozen = true
 number = 1163
 returnType = neoUser
   description = Stores a new or a modified neoUserobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = avatar|,,The avatar of the neoUser
   field = bodyUserForNeoUserId|,7,Annotations (notes) holds each bodyUser associated with this neo body, one of which can have the "primary" capability (the primaryNeoUser), and at least one of which must have the "invite" capability.
   field = credentials|,,The credentials needed for this identity to login to the TiVo social network.  TBD: change the type from String to ?
   field = friendCompositeForNeoUserId|,7,Annotation (note) lists the friendComposites for this neoUser.
   field = friendSetForNeoUserId|,7,Annotation (note) lists the friendSets for this neoUser.
   field = name|,,the name of the neoUser; this will be displayed to other neoUsers
   field = socialIdentityForNeoUserId|,7,Annotation (note) lists the social identities for this neoUser. There is always at least one social identity for a neoUser - in the TiVo social network.

********** operation = noReRecordSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = bodyId|3|idBody:body,1,1,low,,,,,,0
 field = contentId|4|idLong:content,0,1,low,,,,,,0
 field = count|5|int,0,1,,1,,,1,,0
 field = format|6|enum:format,0,1,,,,,,,0
 field = groupBy|7|string,0,,,,,,,32,0
 field = levelOfDetail|8|enum:levelOfDetail,0,1,,,,,,,0
 field = note|9|string,0,,,,,,,,0
 field = offset|10|int,0,1,,0,,,,,0
 field = orderBy|11|string,0,,,,,,,32,0
 field = removeField|12|string,0,,,,,2,,,0
 field = responseTemplate|14|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|13|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 isFrozen = true
 number = 1229
 returnType = noReRecordList
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = bodyId|,,Limits the search to an object with exactly the same value in this field.
   field = contentId|,,Limits the search to an object with exactly the same value in this field.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = noReRecordStore (NO)
 field = bodyId|1|idBody:body,1,1,low,,,,,,0
 field = contentId|2|idLong:content,1,1,low,,,,,,0
 field = expireTime|3|dateTime,1,1,low,,,,,,0
 field = subscriptionType|4|enum:subscriptionType,1,1,low,,,,,,0
 isFrozen = true
 number = 1230
 returnType = noReRecord
   description = Stores a new or a modified noReRecordobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = contentId|,,content of original recording
   field = expireTime|,,when the ban of recording will be lifted
   field = subscriptionType|,,type of the subscription that triggered the original recording

********** operation = noReRecordTest (NO)
 field = noReRecord|1|struct:noReRecord,0,,,,,,,,0
 field = recording|2|struct:recording,1,,,,,,,,0
 number = 421
 returnType = recordingList
   description = testing the functionality of NoReRecordList, to cope with the limited interface, all recordings passed in with state will be treated as NoReRecord, others as recording to be checked. Return a list of recordings that didn't pass the check.

********** operation = nodeGroupGet (NO)
 field = provider|1|enum:vodProvider,1,1,,,,,,,0
 number = 2131
 returnType = nodeGroup
   description = Cable networks that do real-time digital switching of channels (as seen in SDV and QAM-based VOD) need to know the set of switched modulators that a given set-top-box is physically connected to, so that the correct modulators can be affected at the headend on behalf of that particular set-top box. The process used to determine this information is called Node Group Discovery (or, in some cases, Service Group Discovery).  This process invariably involves tuning to one or more frequencies, and acquiring information specific to the modulators at those frequencies (most often the MPEG Transport Stream ID, or TSID).  The nodeGroupGet request allows a Trio Face to acquire the most up-to-date discovered node group information. The Body will apply the appropriate business logic for the specified provider to determine how and whether the node group is discovered, and how long that node group information may be cached. This operation MAY cause a tuner conflict, and MAY cause video playback to be interrupted.  This operation deprecates vodNodeDiscover, allowing detailed node group information to be returned in the nodeGroup structure, whereas vodNodeDiscover only returns Success or Error.
   field = provider|,,The provider for which to get Node Group information.

********** operation = notificationSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = count|3|int,0,1,,1,,,1,,0
 field = format|4|enum:format,0,1,,,,,,,0
 field = groupBy|5|string,0,,,,,,,32,0
 field = levelOfDetail|6|enum:levelOfDetail,0,1,,,,,,,0
 field = note|7|string,0,,,,,,,,0
 field = offset|8|int,0,1,,0,,,,,0
 field = orderBy|9|string,0,,,,,,,32,0
 field = removeField|10|string,0,,,,,2,,,0
 field = responseTemplate|14|struct:responseTemplate,0,,,,,,,,0
 field = socialNetworkid|11
 field = useAnchorOperation|12|boolean,0,1,,true,,,,,0
 field = userId|13|idLong:user,1,1,,,,,,,0
 fieldGroup = searchFields
 number = 1575
 returnType = notificationList
   description = Gets the notifications for a given user on a given social-network
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   field = userId|,,The Neo user whose social networks should be used to do the search.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = objectProductOverrideRemove (NO)
 field = collectionId|1|idLong:collection,0,1,,,,,,,0
 field = contentId|2|idLong:content,0,1,,,,,,,0
 field = objectProductOverrideId|5|idLong:objectProductOverride,0,1,,,,,,,0
 field = partnerId|3|idInt:partner,0,1,,,,,,,0
 field = productId|4|string,0,1,,,,,,,0
 isFrozen = true
 number = 889
 returnType = success
   field = collectionId|,,Limits the search to an object with exactly the same value in this field.
   field = contentId|,,Limits the search to an object with exactly the same value in this field.
   field = objectProductOverrideId|,,Limits the search to an object with exactly the same value in this field.
   field = partnerId|,,Limits the search to an object with exactly the same value in this field.
   field = productId|,,Limits the search to an object with exactly the same value in this field.

********** operation = objectProductOverrideSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = collectionId|3|idLong:collection,0,1,,,,,,,0
 field = contentId|4|idLong:content,0,1,,,,,,,0
 field = count|5|int,0,1,,1,,,1,,0
 field = format|6|enum:format,0,1,,,,,,,0
 field = groupBy|7|string,0,,,,,,,32,0
 field = levelOfDetail|8|enum:levelOfDetail,0,1,,,,,,,0
 field = minUpdateDate|16
 field = note|9|string,0,,,,,,,,0
 field = objectProductOverrideId|17|idLong:objectProductOverride,0,1,,,,,,,0
 field = offset|10|int,0,1,,0,,,,,0
 field = omit|11|boolean,0,1,,,,,,,0
 field = orderBy|12|string,0,,,,,,,32,0
 field = partnerId|13|idInt:partner,0,1,,,,,,,0
 field = removeField|14|string,0,,,,,2,,,0
 field = responseTemplate|18|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|15|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 isFrozen = true
 number = 887
 orderBy = displayRank
 orderBy = partnerId
 returnType = idSet
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = collectionId|,,Limits the search to an object with exactly the same value in this field.
   field = contentId|,,Limits the search to an object with exactly the same value in this field.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = objectProductOverrideId|,,Limits the search to an object with exactly the same value in this field.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = omit|,,Limits the search to an object with exactly the same value in this field.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = partnerId|,,Limits the search to an object with exactly the same value in this field.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = objectProductOverrideStore (NO)
 field = author|9|string,0,1,low,,,,,,0
 field = collectionId|1|idLong:collection,0,1,low,,,,,,0
 field = contentId|2|idLong:content,0,1,low,,,,,,0
 field = description|7|string,0,1,low,,,,,,0
 field = displayRank|3|int,0,1,low,,,,,,0
 field = imageUrl|8|imageUrl,0,1,low,,,,,,0
 field = objectProductOverrideId|11|idLong:objectProductOverride,0,1,low,,,,,,0
 field = omit|4|boolean,0,1,low,false,,,,,0
 field = partnerId|5|idInt:partner,1,1,low,,,,,,0
 field = productId|6|string,1,1,low,,,,,,0
 field = title|10|string,0,1,low,,,,,,0
 isFrozen = true
 number = 888
 returnType = objectProductOverride
   description = Stores a new or a modified objectProductOverrideobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.

********** operation = offerDbObjectIdSearchTest (NO)
 field = typedDbObjectId|1|struct:typedDbObjectId,1,,,,,,,,0
 number = 1568
 returnType = offerList
   description = Search for Offers that match the Service or PGD ids provided.
   field = typedDbObjectId|,,The service or PGD Database Id field list

********** operation = offerExpire (NO)
 field = offerId|1|idString:offer,1,1,,,,,,,0
 isFrozen = true
 number = 940
 returnType = success
   description = Expire an offer.  
   field = offerId|,,Limits the search to an object with exactly the same value in this field.
   fieldProject = offerId|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   project = offerExpire|0|0|0|partner-cds

********** operation = offerLocalityRemove (NO)
 field = offerId|1|idString:offer,0,1,,,,,,,0
 field = vodLocality|2|string,0,1,,,,,,50,0
 isFrozen = true
 number = 1600
 returnType = success
   description = Remove an offer, locality map.
   field = offerId|,,Limits the search to an object with exactly the same value in this field.
   field = vodLocality|,,Limits the search to an object with exactly the same value in this field.

********** operation = offerLocalitySearch (NO)
 field = activeOnly|1|boolean,0,1,,,,,,,0
 field = addField|2|string,0,,,,,2,,,0
 field = anchor|3|anchorDict,0,1,,,,,,,0
 field = count|4|int,0,1,,1,,,1,,0
 field = format|5|enum:format,0,1,,,,,,,0
 field = groupBy|6|string,0,,,,,,,32,0
 field = levelOfDetail|7|enum:levelOfDetail,0,1,,,,,,,0
 field = maxCreateDate|17|dateTime,0,1,,,,,,,0
 field = maxUpdateDate|18|dateTime,0,1,,,,,,,0
 field = minCreateDate|19|dateTime,0,1,,,,,,,0
 field = minUpdateDate|20|dateTime,0,1,,,,,,,0
 field = note|8|string,0,,,,,,,,0
 field = offerId|9|idString:offer,0,1,,,,,,,0
 field = offset|10|int,0,1,,0,,,,,0
 field = orderBy|11|string,0,,,,,,,32,0
 field = propagateMode|12|enum:propagateModeType,0,1,,,,,,,0
 field = removeField|13|string,0,,,,,2,,,0
 field = responseTemplate|16|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|14|boolean,0,1,,true,,,,,0
 field = vodLocality|15|string,0,1,,,,,,50,0
 fieldGroup = searchFields
 groupBy = vodLocality
 isFrozen = true
 number = 1601
 returnType = offerLocalityGroupList
   description = search offers for a locality
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offerId|,,Limits the search to an object with exactly the same value in this field.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = propagateMode|,,Limits the search to an object with exactly the same value in this field.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   field = vodLocality|,,Limits the search to an object with exactly the same value in this field.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = offerLocalityStore (NO)
 field = offerId|1|idString:offer,1,1,low,,,,,,0
 field = propagateMode|2|enum:propagateModeType,0,1,low,,,,,,0
 field = vodLocality|3|string,0,1,low,,,,,50,0
 isFrozen = true
 number = 1602
 returnType = offerLocality
   description = Stores a new or a modified offerLocalityobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = propagateMode|,,Flag to indicate if the media associated with the offer will be distributed to the VOD servers via the CDN (content distribution network) or direct
   field = vodLocality|,,vod locality

********** operation = offerRemove (NO)
 field = offerId|1|idString:offer,0,1,,,,,,,0
 field = partnerId|3|idInt:partner,0,1,,,,,,,0
 field = partnerOfferId|2|string,0,1,,,,,,100,0
 isFrozen = true
 number = 427
 returnType = success
   description = Remove an offer. You must specify either the offerId or the partnerOfferId/partnerId pair.
   field = offerId|,,Limits the search to an object with exactly the same value in this field.
   field = partnerId|,,Limits the search to an object with exactly the same value in this field.
   field = partnerOfferId|,,Limits the search to an object with exactly the same value in this field.
   fieldProject = offerId|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = partnerId|0|0|0|hme-cds,partner-cds
   project = offerRemove|0|0|0|partner-cds

********** operation = offerRevoke (NO)
 field = offerId|1|idString:offer,1,,,,,,,,0
 number = 870
 returnType = success
   description = Given a list of offerIds. For each offerId, offerRemove and revokedOfferStore.

********** operation = offerSearch (YES)
 field = active|98|boolean,0,1,,,,,,,0
 field = addField|1|string,0,,,,,2,,,0
 field = advancedKeyword|2|boolean,0,1,,,,,,,0
 field = anchor|3|anchorDict,0,1,,,,,,,0
 field = assetId|4|idLong:asset,0,1,,,,,,,0
 field = audioLanguage|72|string,0,1,,,,,,26,0
 field = bestBetsOnly|93|boolean,0,1,,false,,,,,0
 field = bodyId|5|idBody:body,0,1,,,,,,,0
 field = captionLanguage|73|string,0,1,,,,,,26,0
 field = categoryId|6|idLong:category,0,,,,,,,,0
 field = channel|7|struct:channel,0,1,,,,,,,0
 field = collectionId|8|idLong:collection,0,,,,,,,,0
 field = collectionType|74|enum:collectionType,0,,,,,,,,0
 field = contentId|9|idLong:content,0,,,,,,,,0
 field = correlatedCollectionId|10|idLong:collection,0,1,,,,,,,0
 field = count|11|int,0,1,,1,,,1,,0
 field = credit|12|struct:credit,0,,,,,,,,0
 field = creditKeyword|13|string,0,1,,,,,,100,0
 field = creditKeywordRole|90|enum:role,0,1,,,,,,,0
 field = descriptionKeyword|14|string,0,1,,,,,,100,0
 field = descriptionLanguage|87|string,0,1,,,,,,64,0
 field = descriptionPrefix|112|string,0,1,,,,,,100,0
 field = ei|15|boolean,0,1,,,,,,,0
 field = episodeNum|77|int,0,1,,,3,,0,,0
 field = episodic|71|boolean,0,1,,,,,,,0
 field = excludeCollectionId|76|idLong:collection,0,,,,,,,,0
 field = excludeContentId|94|idLong:content,0,,,,,,,,0
 field = excludeObjectIdAndType|114|long,0,,,,,,,,0
 field = excludePartnerId|16|idInt:partner,0,,,,,,,,0
 field = fallbackImageObjectType|111|enum:fallbackImageObjectType,0,1,,,,,,,0
 field = favoriteChannelsOnly|85|boolean,0,1,,,,,,,0
 field = format|17|enum:format,0,1,,,,,,,0
 field = groupBy|18|string,0,,,,,,,32,0
 field = hasCorrelatedCollections|80|boolean,0,1,,,,,,,0
 field = hdtv|19|boolean,0,1,,,,,,,0
 field = idSetSource|101|union:idSetSource,0,1,,,3,,,,0
 field = ignoreAvailabilityWindow|95|boolean,0,1,,false,,,,,0
 field = imageRuleset|97|struct:imageRuleset,0,,,,,,,,0
 field = includeCreditsInKeywordSearch|89|boolean,0,1,,false,,,,,0
 field = includeMissingDependentObjects|91|boolean,0,1,,false,,,,,0
 field = includeOverridingCollections|88|boolean,0,1,,false,,,,,0
 field = includeOverridingContent|78|boolean,0,1,,false,,,,,0
 field = includePaddingFields|120|boolean,0,1,,false,,8,,,0
 field = includePurchasableFrom|107|enum:mindClient,0,,,,,,,,0
 field = isAdult|20|boolean,0,1,,,,,,,0
 field = isSchedulable|21|boolean,0,1,,,,,,,0
 field = isSuggested|22|boolean,0,1,,,,,,,0
 field = keyword|23|string,0,1,,,,,,100,0
 field = levelOfDetail|24|enum:levelOfDetail,0,1,,,,,,,0
 field = lineup|25|struct:lineup,0,,,,,,,,0
 field = live|102|enum:live,0,1,,,5,,,,0
 field = maxAvailableStartTime|26|dateTime,0,1,,,,,,,0
 field = maxCreateDate|81|dateTime,0,1,,,,,,,0
 field = maxEndTime|27|dateTime,0,1,,,,,,,0
 field = maxMpaaRating|83|enum:mpaaRating,0,1,,,,,,,0
 field = maxPrice|28|currency,0,1,,,,,,,0
 field = maxStartTime|29|dateTime,0,1,,,,,,,0
 field = maxStartTimeOffset|103|int,0,1,,,,,,,0
 field = maxTvRating|84|enum:tvRating,0,1,,,,,,,0
 field = maxUpdateDate|79|dateTime,0,1,,,,,,,0
 field = mimeSubtype|30|string,0,1,,,,,,128,0
 field = mimeTopLevelType|31|string,0,1,,,,,,128,0
 field = minAvailableEndTime|32|dateTime,0,1,,,,,,,0
 field = minCreateDate|82|dateTime,0,1,,,,,,,0
 field = minEndTime|33|dateTime,0,1,,,,,,,0
 field = minEndTimeOffset|104|int,0,1,,,,,,,0
 field = minPrice|34|currency,0,1,,,,,,,0
 field = minStarRating|99
 field = minStartTime|35|dateTime,0,1,,,,,,,0
 field = minUpdateDate|36|dateTime,0,1,,,,,,,0
 field = movieYear|75|int,0,1,,,,,1000,3000,0
 field = namespace|37|enum:namespace,0,1,,,,,,,0
 field = notCategoryId|110|idLong:category,0,,,,,,,,0
 field = note|38|string,0,,,,,,,,0
 field = objectIdAndType|115|long,0,,,,,,,,0
 field = offerId|39|idString:offer,0,,,,,,,,0
 field = offset|40|int,0,1,,0,,,,,0
 field = omitMpaaRating|41|enum:mpaaRating,0,,,,,,,,0
 field = omitTvRating|42|enum:tvRating,0,,,,,,,,0
 field = orCredit|43|struct:credit,0,,,,,2,,,0
 field = orderBy|44|string,0,,,,,,,32,0
 field = originalAirYear|106|int,0,1,,,,,,,0
 field = partnerAssetId|96|string,0,1,,,,,,,0
 field = partnerCollectionId|45|string,0,1,,,,,,100,0
 field = partnerContentId|46|string,0,1,,,,,,100,0
 field = partnerId|47|idInt:partner,0,1,,,,,,,0
 field = partnerOfferId|48|string,0,,,,,,,100,0
 field = preview|113|boolean,0,1,,,,,,,0
 field = providerId|49|string,0,1,,,,2,,20,0
 field = receivedChannelsOnly|50|boolean,0,1,,,5,,,,0
 field = removeField|51|string,0,,,,,2,,,0
 field = repeat|86|boolean,0,1,,,,,,,0
 field = resolveCount|116|int,0,1,,0,,,,,0
 field = resolveLevelOfDetail|117|enum:levelOfDetail,0,1,,low,,,,,0
 field = resolveOffset|118|int,0,1,,0,,,,,0
 field = responseTemplate|100|struct:responseTemplate,0,,,,,,,,0
 field = searchOnlyHistoricalOffers|119|boolean,0,1,,false,,,,,0
 field = searchable|52|boolean,0,1,high,,,,,,0
 field = seasonNumber|53|int,0,1,,,,,0,,0
 field = shortTitle|54|string,0,1,,,5,,,128,0
 field = skipPartnerExclusion|105|boolean,0,1,,,,,,,0
 field = startTime|55|dateTime,0,1,,,,,,,0
 field = strippedSubtitlePrefix|56|string,0,1,,,,,,128,0
 field = strippedTitlePrefix|57|string,0,1,,,,,,128,0
 field = subscriptionId|58|idInt:subscription,0,1,,,,,,,0
 field = subtitle|108|string,0,1,,,,,,255,0
 field = subtitleKeyword|59|string,0,1,,,,,,100,0
 field = subtitlePrefix|60|string,0,1,,,,,,100,0
 field = title|61|string,0,1,,,,,,128,0
 field = titleKeyword|62|string,0,1,,,,,,128,0
 field = titlePrefix|63|string,0,1,,,,,,128,0
 field = transportSubset|64|anyDict,0,,,,,,,,0
 field = transportType|65|enum:offerTransportType,0,,,,,,,,0
 field = unreceivedChannelsOnly|92|boolean,0,1,,false,,,,,0
 field = url|66|url,0,1,high,,,,,,0
 field = useAnchorOperation|67|boolean,0,1,,true,,,,,0
 field = useBodyLineupSearch|68|boolean,0,1,,,,,,,0
 field = useDefaultTransportType|69|boolean,0,1,,true,,8,,,0
 field = useLineup|70|boolean,0,1,,,,,,,0
 field = vodOfferIdFormat|109|enum:vodOfferIdFormat,0,1,,client,,,,,0
 fieldGroup = imageRulesetFields
 fieldGroup = offerSearchFields
 fieldGroup = contentSearchFields
 fieldGroup = collectionSearchFields
 fieldGroup = resolveSearchFields
 fieldGroup = searchFields
 fieldGroup = strippedSubtitlePrefixField
 fieldGroup = strippedTitlePrefixField
 groupBy = active
 groupBy = channelIdentifier
 groupBy = channelNumber
 groupBy = channelNumberMajor
 groupBy = collectionId
 groupBy = collectionType
 groupBy = contentId
 groupBy = episodeNum
 groupBy = hdtv
 groupBy = maxKeepAfterDownload
 groupBy = maxKeepAfterView
 groupBy = originalAirYear
 groupBy = partnerId
 groupBy = seasonNumber
 groupBy = stationId
 isFrozen = true
 number = 428
 orderBy = -thumbs
 orderBy = assetId
 orderBy = categoryDisplayRank
 orderBy = channelIsFavorite
 orderBy = channelNumber
 orderBy = collectionId
 orderBy = collectionType
 orderBy = contentId
 orderBy = correlationScore
 orderBy = creditKeywordRelevance
 orderBy = currency
 orderBy = descriptionKeywordRelevance
 orderBy = displayRank
 orderBy = endTime
 orderBy = episodeNum
 orderBy = episodic
 orderBy = hdtv
 orderBy = keywordRelevance
 orderBy = movieYear
 orderBy = offerId
 orderBy = originalAirdate
 orderBy = partnerId
 orderBy = partnerOfferId
 orderBy = price
 orderBy = providerId
 orderBy = releaseDate
 orderBy = relevance
 orderBy = seasonNumber
 orderBy = startTime
 orderBy = stationId
 orderBy = subtitle
 orderBy = subtitleKeywordRelevance
 orderBy = suggestionScore
 orderBy = title
 orderBy = titleKeywordRelevance
 returnType = idSet
   field = active|,,If present it is used to filter current or non-current offers by availability window
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = advancedKeyword|,,When searching with option=advanced, a boolean mode search is done where words starting with   are ANDed together, words starting with - are NOTd, words with * are substring matched, and words enclosed in "" are looked at as a phrase.  Currently not supported in contentSearch or collectionSearch
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = audioLanguage|,,Limits the search to an object with exactly the same value in this field.
   field = bestBetsOnly|,,when true, restrict results to those that are best bets.
   field = bodyId|,,Restricts the search to offers (or offered content) that is available on this body.  For bodies that sync with the mind, availability is based on the list of channels that the body has sent up.  Only channels that have isReceived=true are used.  For bodies that have not synced with the mind, availability is based on the lineup retrieved from the BSM, and all channels are used.  BodyId is also required to use the isSchedulable filter.
   field = captionLanguage|,,Limits the search to an object with exactly the same value in this field.
   field = categoryId|,,If multiple categoryIds are specified, they will be ANDed together in the query
   field = channel|,,Limits the search to an object with exactly the same value in this field.
   field = collectionType|,,Limits the search to an object with exactly the same value in this field.
   field = contentId|,,Limits the search to an object with exactly the same value in this field.
   field = correlatedCollectionId|,,Restricts the search to the collection ids correlated to this collection id.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = credit|,,Currently not supported in contentSearch. If multiple credits provided, they will be ORd
   field = creditKeyword|,,Currently not supported in contentSearch or collectionSearch
   field = creditKeywordRole|,,Only applies if a creditKeyword is passed in
   field = descriptionKeyword|,,Currently not supported in contentSearch or collectionSearch
   field = descriptionLanguage|,,Limits the search to an object with exactly the same value in this field.
   field = ei|,,Only offers of EI (Educational and Informational) content are returned if this value is set to "true".  If this is set to "false", only non-EI content will be returned. If this is not set, both EI and non-EI content will be returned.
   field = episodeNum|3,,Limits the search to an object with exactly the same value in this field.
   field = episodic|,,constrains the result to only episodic collections if set to true and only non-episodic collections if set to false.
   field = excludeObjectIdAndType|,,An objectIdAndType from an idSequence obtained in a previous search operation, to be excluded from the result set.
   field = fallbackImageObjectType|,,If set, this object type will be used to replace the main object's image if the main object's image is not available based on the input ruleset
   field = favoriteChannelsOnly|,,Search offers on channels marked as "favorite" only. When set false, matching offers on all channels in the lineup will be returned, no matter if the channel is marked as favorite or not. Default value is false.
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = hasCorrelatedCollections|,,if TRUE, constrains the result set to only those that have correlation data available. FALSE is not supported.
   field = hdtv|,,Limits the search to an object with exactly the same value in this field.
   field = ignoreAvailabilityWindow|,,This only works in conjunction with the isSchedulable flag.  If set to true, the offerSearch will consider offers schedulable even if they are outside of their availability window.  This is necessary for paid CDS partners who allow customers to re-download offers that were already purchased but are no longer in the availability window.
   field = imageRuleset|,,one ruleset should be specified per image desired. multiple rulesets can be specified.
   field = includeCreditsInKeywordSearch|,,If set to true, the keyword filter will include credits in the search in addition title, subtitle and description
   field = includeMissingDependentObjects|,,allows one to specify, if offer search, should return offers that are missing depedent objects(like asset,content,collection etc.)
   field = includeOverridingCollections|,,When partners wish to author their own metadata for a collection object, while maintaining the link to the broadcast collection object, they store the original collectionId in the overriddenCollectionId field of the collection object. Passing true for this flag, along with a collectionId, will result in both the collectionId and the overriddenCollectionId fields to be searched. The result is that both the collection corresponding to the collectionId and any collections overriding that collection will be returned. Passing true for this flag without passing a collectionId is illegal.
   field = includeOverridingContent|,,When partners wish to author their own metadata for a content object, while maintaining the link to the broadcast content object, they store the original contentId in the overriddenContentId field of the content object. Passing true for this flag, along with a contentId, will result in both the contentId and the overriddenContentId fields to be searched. The result is that both the content corresponding to the contentId and any contents overriding that content will be returned. Passing true for this flag without passing a contentId is illegal.
   field = includePaddingFields|,8,An application using mind 6 needed to access padding fields in offerSearch that were not added until mind 8. In order to accomdate that, we introduce this boolean to only include padding fields if this is explicitly passed into offerSerach as true.  Starting in version 9, the padding fields will always be returned if they have values in the metadata.
   field = includePurchasableFrom|,,For CDS offers, filter by purchasableFrom field If this field is null, then do not apply filter 
   field = isAdult|,,Limits the search to an object with exactly the same value in this field.
   field = isSchedulable|,,for now, only works with CDS offers. for broadcast offers, setting this to true or false will return no results. for CDS offers, setting to true will filter out offers that cannot be scheduled for download, because they are either present on the body, or have been cancelled or deleted. if set to false, it will only show these offers. requires both a bodyId and subscriptionId.
   field = isSuggested|,,Restricts the search result to offers that are suggested based on predictive thumbs
   field = keyword|,,The keyword field is used to search through title, subtitle and description to find program matches.  The results are ordered in a way that makes sense.  Wildcards and double-quotes are supported.  Currently not supported in contentSearch or collectionSearch
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = lineup|,,Restricts the search to offers from the named lineup.
   field = live|5,,Limits the search to an object with exactly the same value in this field.
   field = maxAvailableStartTime|,,Returns offers whose availableStartTime is less than or equal to maxAvailableStartTime
   field = maxEndTime|,,Returns offers whose endTime is less than or equal to maxEndTime
   field = maxMpaaRating|,,filter out results whose mpaaRatings or tvRatings are "worse" than this mpaaRating.
   field = maxStartTime|,,Returns offers whose startTime is less than or equal to maxStartTime
   field = maxStartTimeOffset|,,maxStartTime N seconds in the future. Useful in storing as searchRequest
   field = maxTvRating|,,filter out results whose mpaaRatings or tvRatings are "worse" than this tvRating.
   field = mimeSubtype|,,not implemented
   field = mimeTopLevelType|,,not implemented
   field = minAvailableEndTime|,,Returns offers whose availableEndTime is greater than or equal to minAvailableEndTime
   field = minEndTime|,,Returns offers whose endTime is greater than or equal to minEndTime
   field = minEndTimeOffset|,,minEndTime N seconds in the future. Useful in storing as searchRequest
   field = minStartTime|,,Returns offers whose startTime is greater than or equal to minStartTime
   field = movieYear|,,Limits the search to an object with exactly the same value in this field.
   field = namespace|,,Which namespace to search in
   field = notCategoryId|,,Filter out results that contain any of the notCategoryIds present in the request.
   field = note|,,A request for the results to be annotated.
   field = objectIdAndType|,,Limits the search to an object with exactly the same value in this field.
   field = offerId|,,Limits the search to an object with exactly the same value in this field.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = omitMpaaRating|,,Offers with these mpaa ratings should not be returned.  This can be used to hide "adult" programs
   field = omitTvRating|,,Offers with these TV Ratings should not be returned.  This can be used to hide "adult" programs
   field = orCredit|,2,Put this credit in an OR with other orCredits.  Currently not supported in contentSearch or collectionSearch
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = originalAirYear|,,Limits the search to an object with exactly the same value in this field.
   field = partnerCollectionId|,,Limits the search to an object with exactly the same value in this field.
   field = partnerContentId|,,Limits the search to an object with exactly the same value in this field.
   field = partnerId|,,Limits the search to an object with exactly the same value in this field.
   field = partnerOfferId|,,The partner's own offer Id.
   field = preview|,,A boolean indicating whether this offer search is for a preview offer.
   field = providerId|,2,Limits the search to an object with exactly the same value in this field.
   field = receivedChannelsOnly|5,,Search offers on channels marked as "received" only. When set false, matching offers on all channels in the lineup will be returned, no matter if the channel is marked as received or not. Default value is true.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = resolveCount|,,If a format of (string)idSequence is specified, the count of objectIds that should be resolved into objects. Ignored unless format = (string)idSequence.
   field = resolveLevelOfDetail|,,If a format of (string)idSequence is specified, the levelOfDetail at which the objects should be resolved.  Ignored unless resolveCount > 0 and format = (string)idSequence.
   field = resolveOffset|,,If a format of (string)idSequence is specified, the offset into the objectId list that should be resolved into objects. Ignored unless resolveCount > 0 and format = (string)idSequence.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = searchOnlyHistoricalOffers|,,True to search only historical offers.  False (default) to search only current and future offers. This flag is only applicable when searching broadcast offers.
   field = searchable|,,Limits the search to an object with exactly the same value in this field.
   field = seasonNumber|,,Limits the search to an object with exactly the same value in this field.
   field = shortTitle|5,,Limits the search to an object with exactly the same value in this field.
   field = skipPartnerExclusion|,,Skip partnerExclusion check of offers even if they are passed in request. Used only internally for some special cases. For example, when body excludes a partner from the screen, but later schedules a download from that partner's web site. 
   field = startTime|,,Limits the search to an object with exactly the same value in this field.
   field = strippedSubtitlePrefix|,,Perform a prefix search against the strippedSubtitle field (the field stripped of leading articles and symbols).
   field = strippedTitlePrefix|,,Perform a prefix search against the strippedTitle field (the field stripped of leading articles and symbols).
   field = subscriptionId|,,Limit the offers to be those that come from the specified subscription.
   field = subtitle|,,Limits the search to an object with exactly the same value in this field.
   field = subtitleKeyword|,,Currently not supported in contentSearch or collectionSearch
   field = title|,,Limits the search to an object with exactly the same value in this field.
   field = transportSubset|,,Search a subset of the dictionary that defines the transport.  Only offers whose transport dictionaries contain all of the things in this dictionary will be returned.  If multiple transports are specified, they will be ORd together.
   field = unreceivedChannelsOnly|,,if TRUE, constrain the result set to unreceived channels for the bodyId. if FALSE, search for both received channels and unreceived channels.
   field = url|,,Limits the search to an object with exactly the same value in this field.
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   field = useBodyLineupSearch|,,This field is for testing only.  It tells the mind which offerSearch implementation to use.  When unset (which is the normal case), the mind will decide which implementation to call.  When set, the mind will obey what you say to do, even if it doesn't make sense!
   field = useDefaultTransportType|,8,mind9 and forward will require a transportType. previous versions don't, so we'll use this to allow them to continue not requiring one, while allowing a way for us to start requiring one with mind9
   field = useLineup|,,forces query to use headend and lineup instead of custom channel list
   field = vodOfferIdFormat|,,Controls the format of the offerId field for VOD offers
   fieldProject = advancedKeyword|0|0|0|partner-schedule
   fieldProject = assetId|0|0|0|hme-cds,partner-cds
   fieldProject = bodyId|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = categoryId|0|0|0|partner-schedule
   fieldProject = channel|0|0|0|partner-schedule,partner-subscribe
   fieldProject = collectionId|0|0|0|partner-schedule
   fieldProject = contentId|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = count|0|0|0|all
   fieldProject = credit|0|0|0|partner-schedule
   fieldProject = creditKeyword|0|0|0|partner-schedule
   fieldProject = creditKeywordRole|0|0|0|partner-schedule
   fieldProject = descriptionKeyword|0|0|0|partner-schedule
   fieldProject = descriptionLanguage|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = episodeNum|0|3|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = episodic|0|0|0|partner-cds
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = hdtv|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = includeCreditsInKeywordSearch|0|0|0|partner-schedule
   fieldProject = keyword|0|0|0|partner-schedule
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = lineup|0|0|0|partner-schedule
   fieldProject = maxAvailableStartTime|0|0|0|hme-cds
   fieldProject = maxEndTime|0|0|0|partner-schedule,partner-subscribe
   fieldProject = maxStartTime|0|0|0|partner-schedule,partner-subscribe
   fieldProject = minAvailableEndTime|0|0|0|hme-cds
   fieldProject = minEndTime|0|0|0|partner-schedule,partner-subscribe
   fieldProject = minStartTime|0|0|0|partner-schedule,partner-subscribe
   fieldProject = movieYear|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = namespace|0|0|0|partner-schedule,partner-cds,partner-subscribe
   fieldProject = offerId|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = offset|0|0|0|all
   fieldProject = omitMpaaRating|0|0|0|partner-schedule,partner-subscribe
   fieldProject = omitTvRating|0|0|0|partner-schedule,partner-subscribe
   fieldProject = orderBy|0|0|0|all
   fieldProject = partnerAssetId|0|0|0|hme-cds,partner-cds
   fieldProject = partnerCollectionId|0|0|0|partner-cds
   fieldProject = partnerContentId|0|0|0|partner-cds
   fieldProject = partnerId|0|0|0|hme-cds,partner-cds
   fieldProject = partnerOfferId|0|0|0|hme-cds,partner-cds
   fieldProject = responseTemplate|0|0|0|all
   fieldProject = searchable|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = seasonNumber|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = startTime|0|0|0|partner-schedule,partner-subscribe
   fieldProject = strippedSubtitlePrefix|0|0|0|partner-cds
   fieldProject = strippedTitlePrefix|0|0|0|partner-cds
   fieldProject = subtitle|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = subtitleKeyword|0|0|0|partner-schedule
   fieldProject = title|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = titleKeyword|0|0|0|partner-schedule,partner-cds,partner-subscribe
   fieldProject = titlePrefix|0|0|0|partner-schedule,partner-cds,partner-subscribe
   fieldProject = transportType|0|0|0|hme-cds,partner-cds
   project = offerSearch|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe

********** operation = offerStore (NO)
 field = advisory|1|struct:advisory,0,,high,,,2,,,0
 field = assetForAssetId|2|struct:asset,0,1,low,,,7,,,1
 field = assetTagForAssetId|95|struct:assetTag,0,1,low,,,7,,,1
 field = audioDuration|3|int,0,1,low,,,2,0,,0
 field = audioLanguage|80|string,0,,low,,,7,,26,0
 field = audioLanguageFriendlyName|81|string,0,,high,,,7,,,0
 field = autoOverriddenCollectionId|93|idLong:collection,0,1,low,,,8,,,0
 field = autoOverriddenContentId|85|idLong:content,0,1,low,,,8,,,0
 field = availableCorrelatedCollectionForCollectionId|111|struct:collection,0,,low,,,7,,,1
 field = availableEndTime|4|dateTime,0,1,medium,,,,,,0
 field = availableStartTime|5|dateTime,0,1,medium,,5,,,,0
 field = bookmarkPosition|6|int,0,1,medium,,,,0,,0
 field = broadbandOfferGroupForCollectionId|78|struct:offerGroup,0,,low,,,7,,,1
 field = broadbandOfferGroupForContentId|87|struct:offerGroup,0,,low,,,7,,,1
 field = broadcastEndPadding|120|int,0,1,medium,,,,,,0
 field = broadcastOfferGroupForCollectionId|79|struct:offerGroup,0,,low,,,7,,,1
 field = broadcastOfferGroupForContentId|88|struct:offerGroup,0,,low,,,7,,,1
 field = broadcastStartPadding|121|int,0,1,medium,,,,,,0
 field = captionLanguage|82|string,0,,low,,,7,,26,0
 field = captionLanguageFriendlyName|83|string,0,,high,,,7,,,0
 field = captioning|7|boolean,0,1,medium,,,2,,,0
 field = category|8|struct:category,0,,high,,,,,,0
 field = cc|9|boolean,0,1,high,,,,,,0
 field = cdsOfferForCollectionId|10|struct:offer,0,,low,,,7,,,1
 field = channel|11|struct:channel,0,1,low,,,,,,0
 field = checksum|96|string,0,1,low,,,,,64,0
 field = collectionDescription|112|string,0,1,medium,,,,,,0
 field = collectionId|12|idLong:collection,0,1,low,,,,,,0
 field = collectionTitle|107|string,0,1,medium,,,,,128,2
 field = collectionType|13|enum:collectionType,0,1,low,,,,,,0
 field = colorType|14|enum:colorType,0,1,medium,,,,,,0
 field = contentId|15|idLong:content,0,1,low,,,,,,0
 field = contentType|16|enum:contentType,0,1,low,video,,,,,0
 field = correlatedCollectionForCollectionId|17|struct:collection,0,,low,,,7,,,1
 field = credit|18|struct:credit,0,,high,,,,,,0
 field = currency|119|enum:currencyType,0,1,medium,,,,,,0
 field = deploymentTargetId|106|idLong:deploymentTarget,0,1,low,,,,,,0
 field = description|19|string,0,1,medium,,,,,4096,0
 field = descriptionLanguage|92|string,0,1,medium,,,,,64,0
 field = diskPartition|20|enum:diskPartition,0,1,medium,,,,,,0
 field = displayRank|21|int,0,1,medium,,,,0,,0
 field = dolbyDigital|22|boolean,0,1,medium,,,,,,0
 field = drm|23|struct:drm,0,1,medium,,,,,,0
 field = duration|24|int,0,1,low,,,2,0,,0|int,0,1,low,,3,,0,,0
 field = entitlement|108|enum:entitlement,0,1,low,,,,,,0
 field = episodeNum|25|int,0,,low,,3,,0,,0
 field = episodic|26|boolean,0,1,low,,,,,,0
 field = hasAudioDescription|98|boolean,0,1,medium,,,,,,0
 field = hasCaption|99
 field = hasSignLanguage|100|boolean,0,1,medium,,,,,,0
 field = hdtv|27|boolean,0,1,low,false,,7,,,0
 field = height|28|int,0,1,low,,,,0,,0
 field = image|70|struct:image,0,,medium,,,,,,0
 field = imageUrl|29|imageUrl,0,1,medium,,,8,,,0
 field = internalCollectionId|114|idLong:collection,0,1,high,,,,,,0
 field = internalCollectionIdOrigin|115|enum:internalIdOrigin,0,1,high,,,,,,0
 field = internalContentId|116|idLong:content,0,1,high,,,,,,0
 field = internalContentIdOrigin|117|enum:internalIdOrigin,0,1,high,,,,,,0
 field = internalRating|122|struct:internalRating,0,,low,,,,,,0
 field = isAdult|30|boolean,0,1,low,,,,,,0
 field = isBlocked|123|boolean,0,1,low,,,,,,0
 field = isCatchup|101|boolean,0,1,medium,,,,,,0
 field = isEpisode|31|boolean,0,1,low,,,,,,0
 field = isPpv|32|boolean,0,1,low,,,5,,,0
 field = isProgramBreak|102|boolean,0,1,medium,,,,,,0
 field = isThreeD|118|boolean,0,1,medium,,,,,,0
 field = live|86|enum:live,0,1,medium,,5,,,,0
 field = mixApplicationInfoForCollectionId|72|struct:mixApplicationInfo,0,,low,,,7,,,1
 field = mixApplicationInfoForContentId|73|struct:mixApplicationInfo,0,,low,,,7,,,1
 field = mixApplicationInfoForOfferId|74|struct:mixApplicationInfo,0,,low,,,7,,,1
 field = mixForParentMixId|75|struct:mix,0,1,high,,,7,,,1
 field = mixForRootMixId|76|struct:mix,0,1,high,,,7,,,1
 field = mixForSubscribableMixId|77|struct:mix,0,,high,,,7,,,1
 field = mostRecentDownloadForOfferId|91|struct:download,0,1,medium,,,7,,,1
 field = movieYear|33|int,0,1,low,,,,1000,3000,0
 field = mpaaRating|34|enum:mpaaRating,0,1,medium,,,,,,0
 field = noGiftCardPurchase|97|boolean,0,1,low,false,,,,,0
 field = offerDescription|35|string,0,1,medium,,,2,,4096,0
 field = offerId|36|idString:offer,0,1,low,,,,,,0
 field = offerUrl|37|string,0,1,medium,,,2,,128,0
 field = originalAirdate|38|date,0,1,medium,,,,,,0
 field = overriddenCollectionId|94|idLong:collection,0,1,low,,,8,,,0
 field = overriddenContentId|84|idLong:content,0,1,low,,,8,,,0
 field = partCount|103|int,0,1,medium,,,,,,0
 field = partNumber|104|int,0,1,medium,,,,,,0
 field = partnerCollectionId|39|string,0,1,low,,,,,100,0
 field = partnerContentId|40|string,0,1,low,,,,,100,0
 field = partnerId|41|idInt:partner,0,1,low,,,,,,0
 field = partnerInfo|71|struct:partnerInfo,0,1,high,,,7,,,1
 field = partnerOfferId|42|string,0,1,low,,,,,100,0
 field = partnerStationId|113
 field = popularityRank|67|int,0,1,low,,,,,,0
 field = previewAssetIdForOfferId|110|idLong:asset,0,1,low,,,7,,,1
 field = previewOfferForOfferId|109|struct:offer,0,1,low,,,7,,,1
 field = price|43|currency,0,1,medium,,,,,,0
 field = providerId|44|string,0,1,medium,,,2,,20,0
 field = purchasableFrom|45|enum:mindClient,0,,low,,,,,,0
 field = rating|46|struct:rating,0,,high,,,2,,,0|union:typedRating,0,,high,,7,,,,0
 field = recordingForContentId|69|struct:recording,0,,low,,,7,,,1
 field = recordingForOfferId|47|struct:recording,0,,low,,,7,,,1
 field = releaseDate|68|dateTime,0,1,medium,,,,,,0
 field = relevance|48|int,0,1,low,,3,,0,,0
 field = repeat|49|boolean,0,1,low,,,,,,0
 field = scheduledDownloadForContentId|89|struct:download,0,,low,,,7,,,1
 field = screenFormat|50|enum:screenFormat,0,1,medium,,,,,,0
 field = searchable|51|boolean,0,1,high,,,,,,0
 field = seasonNumber|52|int,0,1,low,,,,0,,0
 field = shortTitle|53|string,0,1,low,,5,,,128,0
 field = starRating|54|enum:starRating,0,1,high,,,,,,0
 field = startTime|55|dateTime,0,1,low,,,,,,0
 field = subscribable|56|boolean,0,1,low,,4,,,,0
 field = subscriptionForCollectionIdAndChannel|57|struct:subscription,0,,medium,,5,7,,,1
 field = subscriptionForOfferId|90|struct:subscription,0,,medium,,,7,,,1
 field = subtitle|58|string,0,1,low,,,,,255,2
 field = suggestionScore|59|int,0,1,low,,,,,,0
 field = title|60|string,0,1,low,,,,,128,2
 field = totalDuration|105|int,0,1,medium,,,,,,0
 field = transport|61|union:transport,0,,medium,,,,,,0
 field = transportType|62|enum:offerTransportType,0,1,low,,,,,,0
 field = tvAdvisory|63|enum:tvAdvisory,0,,medium,,,,,,0
 field = tvRating|64|enum:tvRating,0,1,medium,,,,,,0
 field = userContentForCollectionId|65|struct:userContent,0,1,low,,,7,,,1
 field = width|66|int,0,1,low,,,,0,,0
 isFrozen = true
 number = 429
 returnType = offer
   description = Stores a new or a modified offerobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = advisory|,2,Single catch-all advisory for offers/content/collection. We'll fill it in with as much detail as we have depending on the object type. OBSOLETE: Please do not use this. Use the tvAdvisory enum in the offer object instead. Contact us if tvAdvisory does not solve your issue.
   field = audioDuration|,2,The duration of the content.  XXX the name of this field is assymetric with the "duration" field in videoContent. The schema checking requires that they be different.  Should we change the one in videoContent?  Should we make yet another field group to hold duration?  Should we move duration up to content?  The field audioDuration was moved to the duration field in content in mind3.
   field = audioLanguage|,7,the RFC 3066 identifier for the audio language of the offer
   field = audioLanguageFriendlyName|,7,the audio language of the offer
   field = autoOverriddenCollectionId|,8,If this service has determined that this collection overrides another, this field is used to hold the original collectionId. If overriddenCollectionId is set, this field is ignored.
   field = autoOverriddenContentId|,8,If this service has determined that this content overrides another, this field is used to hold the original contentId. If overriddenContentId is set, this field is ignored.
   field = availableEndTime|,,Indicates what date the offer is no longer available for viewing.
   field = availableStartTime|5,,Indicates what date the offer becomes available for viewing.
   field = bookmarkPosition|,,An offset, in milliseconds, into the content
   field = broadbandOfferGroupForContentId|,7,XXX: This should be added to contentFields instead; however NPE would occur in MindObjectGenerator if defined that way.
   field = broadcastEndPadding|,,This field is used when we know that broadcasters end their shows late despite publishing on the hour EPG.  Note: Prior to Mind 9, this field will only be returned if includePaddingFields is set to true in the offerSearch request        
   field = broadcastOfferGroupForContentId|,7,XXX: This should be added to contentFields instead; however NPE would occur in MindObjectGenerator if defined that way.
   field = broadcastStartPadding|,,This field is used when we know that broadcasters start their shows late despite publishing on the hour EPG.  Note: Prior to Mind 9, this field will only be returned if includePaddingFields is set to true in the offerSearch request
   field = captionLanguage|,7,the RFC 3066 indentifier for the language of the captions (aka subtitles) for the offer.
   field = captionLanguageFriendlyName|,7,the language of the captions (aka subtitles) for the offer.
   field = captioning|,2,True for video content that has Closed Captioning.  The default value is false.  This field was removed in mind3 because the captioning flag belongs on the offer, not the content.
   field = category|,,Single catch-all category for offers/content/collection. We'll fill it in with as much detail as we have depending on the object type
   field = channel|,,The channel where this offer is broadcast.  For offers whose transportType is "stream" or "dod", this field should always be set.
   field = checksum|,,This field stores the checksum of all of the metadata attributes of this object.
   field = collectionDescription|,,The collection's description.
   field = collectionId|,,The globally unique ID for a collection. Collection objects retrieved from the mind will always have a collection id.  Collections that are created by other parties and are included in content or recording objects may not have collection ids.
   field = collectionTitle|,,The primary title by which the corresponding collection is known. This field may be useful when the collection's title is different than that of the content.  Otherwise, the "title" and "collectionTitle" fields will typically be the same.
   field = contentId|,,The globally unique ID for a content.
   field = description|,,A description of the content.
   field = descriptionLanguage|,,The language that the description is written in
   field = diskPartition|,,This attribute controls which disk partition on the client this offer should be stored on
   field = displayRank|,,defines an arbitrary rank for display
   field = dolbyDigital|,,True for audio content that has a Dolby Digital track.  The default value is false.
   field = duration|,2,The duration of the content (in seconds).  Moved to contentFields in mind3.|3,,The duration of the content (in seconds)
   field = entitlement|,,The user's current entitlement to this offer, it can change with purchases or other tiering adjustments.
   field = episodeNum|3,,The episode number of the content.  This field has a maxOccurs=unbounded, because sometimes episodes are split up into multiple parts, each with their own episode numbers and then re-broadcast as a single episode.  The rebroadcast will contain the episode numbers of all of the parts.
   field = episodic|,,This flag defines whether or not a series is episodic. If it is a 1 or not set it is assumed to be an episodic series. If it is a 0 then it is a non-episodic series such as a movie or special.
   field = hasAudioDescription|,,Audio description: an additional commentary describes body language, expressions and movements - allowing you to hear  what you might not be able to see, so you don't miss a  thing.
   field = height|,,Height of image, in pixels.
   field = image|,,Image metadata for this collection
   field = imageUrl|,8,Image URL associated with this collection
   field = internalCollectionId|,,Id field used internally to dedupe collections. It stores the now obsolete overriddenCollectionId or autoOverriddenCollectionId if one of them is set, or collectionId otherwise;
   field = internalCollectionIdOrigin|,,Origin of the internalCollectionId, which is used  to dedupe collections that point to the same pgd collection.
   field = internalContentId|,,Id field used internally to dedupe contents. It stores the now obsolete overriddenContentId or autoOverriddenContentId if one of them is set, or contentId otherwise;
   field = internalContentIdOrigin|,,Origin of the internalContentId, which is used  to dedupe contents that point to the same pgd content.
   field = isAdult|,,Whether or not this offer is considered adult content by the TiVo Service as defined by the following policy:  The offer is considered adult content if any of the following are true: <ul> <li>the mpaaRating attribute is nc17 <li>the mpaaRating attribute is ao <li>the vodRating attribute is x <li>the vodRating attribute is xx <li>the vodRating attribute is xxx <li>the vodRating attribute is nrAdult <li>the offer is part of the adult category </ul>
   field = isBlocked|,,Is this offer blocked via Parental Controls?
   field = isCatchup|,,The showing will be recorded and available in catch up TV.
   field = isEpisode|,,This flag is set when this program object refers to a specific "episode", a specific content stream. When set, every showing of this program has exactly the same content. Sometimes there are programs (like All My Children) where there is no info about each episode, and one content object is used for all episodes; such programs do not have this flag set.  If this flag is set, TiVo will not record this program more than once, because recording the same content twice would just waste disk space.
   field = isPpv|,5,This flag indicates that the offer is a PPV offer.  If this is set to true, the price of the PPV is specified in the price attribute.  If this is not set, this defaults to "false" If this is set to "true", and the price attribute is not set, this is a PPV, and the price is unknown.  Removed this field in mind 6.  You can now find out whether an offer isPpv by looking at the transportType.
   field = isProgramBreak|,,The program is a program break that splits another program into two parts.
   field = live|5,,Defines how live the offer is, from broadcast while  it is happening to playing something that happened in the  past. TMS definition of field: Designates whether a sports  event is being played live, same-day delay, or taped  prior to the air date.
   field = mixForParentMixId|,7,container for the parent mix, when the mixForParentMixId note is specified.
   field = mixForRootMixId|,7,container for the root mix, when the mixForRootMixId note is specified.
   field = mixForSubscribableMixId|,7,container for a subscribable mix, when the mixForSubscribableMixId note is specified.
   field = movieYear|,,The year the movie came out
   field = noGiftCardPurchase|,,if true, purchase must be made with a real customer funding source, store credit may not be used to purchase this offer.
   field = offerDescription|,2,A description of the offer.  May include details about price, availability, quality, etc.  May be different that the title of the content that is offered.
   field = offerId|,,Globally unique identifier for this offer.  This field is always set for an offer, but offer fields are included in recording, which may not have an offerId, so the minOccurs here is 0.
   field = offerUrl|,2,URL for getting the content.  Removed in mind3.  We plan on using a transport dictionary as a replacement for this field to store transport-specific stuff like channel, time, etc.
   field = originalAirdate|,,The date when the content of this offer first airs.
   field = overriddenCollectionId|,8,If this collection overrides another, use this field to hold the original collectionId. This is used when partners wish to author their own metadata for a collection object, while maintaining the link to the broadcast collection object, for searches.
   field = overriddenContentId|,8,If this content overrides another, use this field to hold the original contentId. This is used when partners wish to author their own metadata for a content object, while maintaining the link to the broadcast content object, for searches.
   field = partCount|,,Total number of parts.
   field = partNumber|,,Which part of a split program this offer belongs to.
   field = partnerCollectionId|,,The partner's own collection Id.
   field = partnerContentId|,,The partner's own content Id.
   field = partnerId|,,Id of the partner that created the object.
   field = partnerInfo|,7,a container for the partnerInfoForPartnerId annotation
   field = partnerOfferId|,,The partner's own offer Id.
   field = popularityRank|,,This field represents an arbitrary popularity rank associated with this item.  It currently only applies to historic broadcast collectionSearch and is calculated based on seasonPassRanking
   field = previewAssetIdForOfferId|,7,Holds the previewAssetIdForOfferId note.
   field = previewOfferForOfferId|,7,Holds the previewOfferForOfferId note.
   field = price|,,How much does it cost? US Dollars, for now. If price is not present, it means "don't know"  XXX x18n
   field = providerId|,2,who is providing the content?  is this a response group? (XXX should this be a dict?)
   field = purchasableFrom|,,Indicates which mind clients this offer can be purchased from
   field = rating|,2,The ratings of this collection. OBSOLETE: Please do not use this. Use the mpaaRating and starRating enums in the content object instead. Contact us if that does not solve your issue.|7,,Typed rating.
   field = recordingForContentId|,7,Holds the recordingForContentId note.
   field = recordingForOfferId|,7,Holds the recordingForOfferId note.
   field = releaseDate|,,The date that this content was released by the content owner for public consumption
   field = relevance|3,,The relevance value of this result in the offer list. The lowest number is the most relevant.  The relevance order is determined by the UE Spec and can be viewed here: https://bigbook/index/TrioKeywordSearch  CAUTION: This value is only used internally by the anchor operation. It should not be used for any other purpose. The level of detail is low, because a mobile app can use anchoring on keyword searches and the anchoring operation needs to know the relevance of the anchor.
   field = repeat|,,This flag designates whether the program has aired previously
   field = searchable|,,This flag defines whether or not a collection is searchable. If 1, a collection is searchable. If 0, a collection is not searchable. Default to 0 (not searchable).
   field = shortTitle|5,,The alternate (short) title for this collection, as defined by the EPG data provider. If this element is not present, the shortTitle can be assumed to be identical to the title.
   field = startTime|,,For offers that are broadcast television (type "stream"), this field should always be set to the startTime of the offer: the scheduler sets it when the recording is scheduled, and the body updates it based on the actual time. For CDS downloads, it is never set: the scheduler doesn't say when it should start, and the body doesn't set it based on actual times.  For VOD recordings, we haven't decided what to do yet. For manual recordings, startTime is the time the recording starts (NOT the startTime of the offer)
   field = subscribable|4,,Is this offer subscribable?
   field = subscriptionForCollectionIdAndChannel|5,7,hold the subscriptionForCollectionIdAndChannel note
   field = subtitle|,,A secondary title by which this specific content (as distinguised from the collection) is known (e.g. episode title).  May apply only to content with ambiguous primary titles.
   field = suggestionScore|,,The suggestionScore is computed based on userContent/thumbs data of similar programs determined by a TiVo-specific algorithm.  CAUTION: This value is only used internally by the anchor operation. It should not be used for any other purpose. The level of detail is low, because the mobile app will use anchoring on suggestion searches and the anchoring operation needs to know the relevance of the anchor.
   field = title|,,The primary title by which this collection is known.
   field = totalDuration|,,Total duration in seconds of both parts and the program break in between within a split program.
   field = transport|,,This dictionary contains any neccessary information to find content of this particular transportType
   field = width|,,Width of image, in pixels.
   fieldProject = availableCorrelatedCollectionForCollectionId|0|0|7|partner-schedule
   fieldProject = availableEndTime|0|0|0|hme-cds,partner-cds,partner-subscribe
   fieldProject = availableStartTime|0|5|0|hme-cds,partner-cds,partner-subscribe
   fieldProject = category|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = cc|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = channel|0|0|0|partner-schedule,partner-subscribe
   fieldProject = collectionDescription|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = collectionId|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = collectionTitle|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = contentId|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = contentType|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = correlatedCollectionForCollectionId|0|0|7|partner-schedule
   fieldProject = credit|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = description|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = descriptionLanguage|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = displayRank|0|0|0|hme-cds,partner-cds,partner-subscribe
   fieldProject = drm|0|0|0|hme-cds,partner-cds,partner-subscribe
   fieldProject = duration|0|3|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = episodeNum|0|3|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = episodic|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = hdtv|0|0|7|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = imageUrl|0|0|8|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = isEpisode|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = movieYear|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = mpaaRating|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = offerId|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = originalAirdate|0|0|0|partner-schedule,partner-subscribe
   fieldProject = overriddenCollectionId|0|0|8|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = overriddenContentId|0|0|8|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = partnerCollectionId|0|0|0|partner-cds
   fieldProject = partnerContentId|0|0|0|partner-cds
   fieldProject = partnerId|0|0|0|hme-cds,partner-cds
   fieldProject = price|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = purchasableFrom|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = releaseDate|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = repeat|0|0|0|partner-schedule,partner-subscribe
   fieldProject = screenFormat|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = searchable|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = seasonNumber|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = starRating|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = startTime|0|0|0|partner-schedule,partner-subscribe
   fieldProject = subscribable|0|4|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = subtitle|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = title|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = transport|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = transportType|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = tvAdvisory|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = tvRating|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   project = offerStore|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe

********** operation = operationCountGet (NO)
 number = 1743
 returnType = operationCountList
   description = operationCountGet pseudo-op that returns the current operations in the mind

********** operation = operationRegister (NO)
 field = operationInfo|3|struct:operationInfo,0,,low,,,,,,0
 field = operationName|1
 field = operationTag|2
 number = 1970
 returnType = success
   description = register a set of operations supported by a mindset, subsequent calls over-write previous operationRegister calls
   field = operationInfo|,,operations to register

********** operation = optInSyncEnable (NO)
 field = bodyId|1|idBody:anyBody,1,1,,,,,,,0
 isFrozen = true
 number = 1091
 returnType = success
   field = bodyId|,,Limits the search to an object with exactly the same value in this field.

********** operation = optStatusGet (YES)
 field = accountToken|1|string,0,1,low,,,,,,0
 field = aclFlag|2|string,0,1,low,,,,,,0
 field = anonId|3|string,0,1,low,,,,,,0
 field = optStatus|4|enum:optStatus,0,1,low,,,,,,0
 field = partnerId|5|string,0,1,low,,,,,,0
 field = tsn|6|string,0,1,low,,,,,,0
 fieldGroup = optStatusFields
 number = 1126
 returnType = optStatusResponse
   description = Request for the opt status. You must specify the: tsn

********** operation = optStatusStore (NO)
 field = accountToken|1|string,0,1,low,,,,,,0
 field = aclFlag|2|string,0,1,low,,,,,,0
 field = anonId|3|string,0,1,low,,,,,,0
 field = featureName|4|string,1,1,low,,,,,,0
 field = optStatus|5|enum:optStatus,0,1,low,,,,,,0
 field = partnerId|6|string,0,1,low,,,,,,0
 field = tsn|7|string,0,1,low,,,,,,0
 fieldGroup = optStatusFields
 number = 1128
 returnType = optStatusResponse
   description = Request for updating the opt status. You must specify the: tsn

********** operation = parentalControlSettingStore (NO)
 field = blockUnratedMovies|1|boolean,0,1,low,,,,,,0
 field = blockUnratedTvShows|2|boolean,0,1,low,,,,,,0
 field = bodyId|3|idBody:body,1,1,low,,,,,,0
 field = hideAdult|4|boolean,0,1,low,,,,,,0
 field = lockAllChannels|5|boolean,0,1,low,,,,,,0
 field = maxRating|6|struct:maxRating,0,,low,,,,,,0
 field = parentalControlsState|7|enum:parentalControlsState,0,1,low,,,,,,0
 field = unlockDuration|8|int,0,1,low,,,,,,0
 number = 2127
 returnType = parentalControlSetting
   description = Stores a new or a modified parentalControlSettingobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = blockUnratedMovies|,,Flag to indicate whether unrated movies should be blocked or not
   field = blockUnratedTvShows|,,Flag to indicate whether unrated TV shows should be blocked or not
   field = hideAdult|,,Flag to indicate whether adult contents should be blocked or not
   field = lockAllChannels|,,Flag to indicate whether all channels are locked or not
   field = maxRating|,,Contains the maximum limit for each applicable rating
   field = unlockDuration|,,unlock duration in seconds

********** operation = parentalControlsVodOfferViolationCheck (YES)
 field = offerId|1|string,1,1,,,,,,,0
 field = rating|2|struct:locksLimitsRating,0,1,,,,,,,0
 field = startTime|3|dateTime,0,1,,,,,,,0
 number = 1836
 returnType = checkParentalControlsLockResponse
   description = Sent to check whether a VOD offer specified by offerId violates parental controls policy or not.
   field = offerId|,,This is a VOD offerId to check whether a corresponding offer violates parental controls policy or not.
   field = rating|,,This can be set to TV and/or MPAA ratings (tvRating and mpaaRating fields) of the corresponding offer.
   field = startTime|,,This is the start time (startTime field) of the corresponding offer.

********** operation = partnerAccountInfoRemove (NO)
 field = accountToken|3|idBase64:accountToken,0,1,,,,,,,0
 field = addField|4
 field = anchor|5
 field = bodyId|1|idBody:body,0,1,,,,,,,0
 field = count|6
 field = format|7
 field = groupBy|8
 field = levelOfDetail|9
 field = note|10
 field = offset|11
 field = orderBy|12
 field = partnerId|2|idInt:partner,1,1,,,,,,,0
 field = removeField|13
 field = useAnchorOperation|14
 isFrozen = true
 number = 920
 returnType = success
   description = Return the partnerAccountInfo associated with a body, if any
   field = accountToken|,,Limits the search to an object with exactly the same value in this field.
   field = bodyId|,,Limits the search to an object with exactly the same value in this field.
   field = partnerId|,,Limits the search to an object with exactly the same value in this field.
   fieldProject = accountToken|0|0|0|partner-cds
   fieldProject = bodyId|0|0|0|partner-cds
   fieldProject = partnerId|0|0|0|partner-cds

********** operation = partnerAccountInfoSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = bodyId|3|idBody:body,1,1,,,,,,,0
 field = count|4|int,0,1,,1,,,1,,0
 field = format|5|enum:format,0,1,,,,,,,0
 field = groupBy|6|string,0,,,,,,,32,0
 field = levelOfDetail|7|enum:levelOfDetail,0,1,,,,,,,0
 field = note|8|string,0,,,,,,,,0
 field = offset|9|int,0,1,,0,,,,,0
 field = orderBy|10|string,0,,,,,,,32,0
 field = partnerId|13|idInt:partner,1,1,,,,,,,0
 field = removeField|11|string,0,,,,,2,,,0
 field = responseTemplate|14|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|12|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 isFrozen = true
 number = 922
 returnType = partnerAccountInfoList
   description = Return the partnerAccountInfo associated with a body, if any
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = bodyId|,,Limits the search to an object with exactly the same value in this field.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = partnerId|,,Limits the search to an object with exactly the same value in this field.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = bodyId|0|0|0|partner-cds
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = partnerId|0|0|0|partner-cds
   fieldProject = responseTemplate|0|0|0|all

********** operation = partnerAccountInfoStore (NO)
 field = accountToken|1|idBase64:accountToken,1,1,low,,,,,,0
 field = accountTokenExpiration|2|dateTime,1,1,low,,,,,,0
 field = bodyId|3|idBody:body,1,1,low,,,,,,0
 field = partnerAccountToken|4|string,1,1,low,,,,,100,0
 field = partnerBodyId|5|string,1,1,low,,,,,100,0
 field = partnerId|6|idInt:partner,1,1,low,,,,,,0
 isFrozen = true
 number = 921
 returnType = partnerAccountInfo
   description = Stores a new or a modified partnerAccountInfoobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = accountToken|,,The TiVo-supplied accountToken
   field = accountTokenExpiration|,,The expiration date provided for the accountToken during account linking
   field = bodyId|,,The encrypted TiVo Service Number (TSN) of the DVR for which the partnerAccountInfo is to be stored, obtained from bodyInfoSearch
   field = partnerAccountToken|,,The partner-assigned token used to identify the customer's partner account
   field = partnerBodyId|,,A partner-assigned unique ID for the body
   field = partnerId|,,The TiVo-assigned ID for the partner
   fieldProject = accountToken|0|0|0|partner-cds
   fieldProject = accountTokenExpiration|0|0|0|partner-cds
   fieldProject = bodyId|0|0|0|partner-cds
   fieldProject = partnerAccountToken|0|0|0|partner-cds
   fieldProject = partnerBodyId|0|0|0|partner-cds
   fieldProject = partnerId|0|0|0|partner-cds
   project = partnerAccountInfoStore|0|0|0|partner-cds

********** operation = partnerConfigurationGroupRemove (NO)
 field = partnerId|1|idInt:partner,1,1,,,,,,,0
 number = 2049
 returnType = success
   description = Removes a partnerConfigurationGroup object from the mind.

********** operation = partnerConfigurationGroupSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = count|3|int,0,1,,1,,,1,,0
 field = format|4|enum:format,0,1,,,,,,,0
 field = groupBy|5|string,0,,,,,,,32,0
 field = levelOfDetail|6|enum:levelOfDetail,0,1,,,,,,,0
 field = note|7|string,0,,,,,,,,0
 field = offset|8|int,0,1,,0,,,,,0
 field = orderBy|9|string,0,,,,,,,32,0
 field = partnerId|10|idInt:partner,0,1,,,,,,,0
 field = removeField|11|string,0,,,,,2,,,0
 field = responseTemplate|12|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|13|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 number = 2050
 orderBy = partnerId
 returnType = partnerConfigurationGroup
   description = partner configuration group search operation
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = partnerId|,,Limits the search to an object with exactly the same value in this field.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = partnerConfigurationGroupStore (NO)
 field = default|3|string,0,1,low,,,,,,0
 field = name|1|string,1,,low,,,,,20,0
 field = partnerId|2|idInt:partner,1,1,low,,,,,,0
 number = 2051
 returnType = partnerConfigurationGroup
   description = Stores a new or a modified partnerConfigurationGroupobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = default|,,Default configuration group name for a partner.
   field = name|,,Configuration group name(s) for a partner.

********** operation = partnerExclusionRemove (NO)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 field = partnerId|2|idInt:partner,0,1,,,,,,,0
 isFrozen = true
 number = 1292
 returnType = success
   field = bodyId|,,Limits the search to an object with exactly the same value in this field.
   field = partnerId|,,Limits the search to an object with exactly the same value in this field.

********** operation = partnerExclusionSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = bodyId|3|idBody:body,1,1,,,,,,,0
 field = count|4|int,0,1,,1,,,1,,0
 field = format|5|enum:format,0,1,,,,,,,0
 field = groupBy|6|string,0,,,,,,,32,0
 field = levelOfDetail|7|enum:levelOfDetail,0,1,,,,,,,0
 field = noLimit|8|boolean,0,1,,,,,,,0
 field = note|9|string,0,,,,,,,,0
 field = offset|10|int,0,1,,0,,,,,0
 field = orderBy|11|string,0,,,,,,,32,0
 field = partnerExclusionId|12|idInt:partnerExclusion,0,1,,,,,,,0
 field = partnerId|13|idInt:partner,0,1,,,,,,,0
 field = removeField|14|string,0,,,,,2,,,0
 field = responseTemplate|16|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|15|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 isFrozen = true
 number = 1293
 returnType = partnerExclusionList
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = bodyId|,,Limits the search to an object with exactly the same value in this field.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = noLimit|,,Do not limit this search to a given count.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = partnerExclusionId|,,Limits the search to an object with exactly the same value in this field.
   field = partnerId|,,Limits the search to an object with exactly the same value in this field.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = partnerExclusionStore (NO)
 field = bodyId|1|idBody:body,1,1,low,,,,,,0
 field = partnerExclusionId|2|idInt:partnerExclusion,0,1,low,,,,,,0
 field = partnerId|3|idInt:partner,1,1,low,,,,,,0
 isFrozen = true
 number = 1294
 returnType = partnerExclusion
   description = Stores a new or a modified partnerExclusionobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.

********** operation = partnerInfoRemove (NO)
 field = partnerId|1|idInt:partner,1,1,,,,,,,0
 isFrozen = true
 number = 987
 returnType = success
   description = Removes a partnerInfo object from the mind.

********** operation = partnerInfoSearch (YES)
 field = addField|7|string,0,,,,,2,,,0
 field = anchor|8|anchorDict,0,1,,,,,,,0
 field = bodyId|18|idBody:body,0,1,,,,,,,0
 field = count|1|int,0,1,,1,,,1,,0
 field = format|9|enum:format,0,1,,,,,,,0
 field = groupBy|10|string,0,,,,,,,32,0
 field = imageRuleset|16|struct:imageRuleset,0,,,,,,,,0
 field = levelOfDetail|2|enum:levelOfDetail,0,1,,,,,,,0
 field = name|3|string,0,1,,,,,,100,0
 field = noLimit|4|boolean,0,1,,,,,,,0
 field = note|11|string,0,,,,,,,,0
 field = offset|5|int,0,1,,0,,,,,0
 field = orderBy|12|string,0,,,,,,,32,0
 field = partnerId|6|idInt:partner,0,1,,,,,,,0
 field = partnerType|19|enum:partnerType,0,1,,,,,,,0
 field = removeField|13|string,0,,,,,2,,,0
 field = responseTemplate|17|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|14|boolean,0,1,,true,,,,,0
 field = vodLocality|15|string,0,1,,,,,,,0
 fieldGroup = imageRulesetFields
 fieldGroup = searchFields
 isFrozen = true
 number = 988
 orderBy = displayRank
 orderBy = partnerId
 returnType = partnerInfoList
   description = partner info search operation
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = bodyId|,,Limits the search to an object with exactly the same value in this field.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = imageRuleset|,,one ruleset should be specified per image desired. multiple rulesets can be specified.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = name|,,Limits the search to an object with exactly the same value in this field.
   field = noLimit|,,Do not limit this search to a given count.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = partnerId|,,Limits the search to an object with exactly the same value in this field.
   field = partnerType|,,Limits the search to an object with exactly the same value in this field.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   field = vodLocality|,,Return partner information for the partner associated with this vodLocality
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = partnerInfoStore (NO)
 field = buyInfo|23|string,0,1,low,,,,,,0
 field = buyTitle|24|string,0,1,low,,,,,,0
 field = caSigningCertFilename|19|string,0,1,high,,,,,,0
 field = caSigningKeyFilename|20|string,0,1,high,,,,,,0
 field = certificateLifetime|6|int,0,1,low,,,,0,,0
 field = certificateNumBits|7
 field = displayName|9|string,0,1,low,,,,,255,0
 field = displayRank|1|int,0,1,low,,,,,,0
 field = folderName|10|string,0,1,low,,,,,,0
 field = folderingRules|11|enum:folderingRules,0,1,low,,,,,,0
 field = iPadAllowed|17
 field = image|2|struct:image,0,,low,,,,,,0
 field = ipadAllowed|18|boolean,0,1,low,,,,,,0
 field = keySize|8|int,0,1,low,,,,0,,0
 field = logoIndex|3|int,0,1,low,,,,,,0
 field = msoData|22|struct:partnerInfoMsoData,0,,low,,,,,,0
 field = msoPriority|16|int,0,1,low,,9,,,,0
 field = name|4|string,1,1,low,,,,,100,0
 field = partnerCallbackPolicy|21|struct:partnerCallbackPolicy,0,,low,,,,,,0
 field = partnerId|5|idInt:partner,1,1,low,,,,,,0
 field = partnerType|13|enum:partnerType,0,,low,,,,,,0
 field = partnerVodLocalityForPartnerId|12|struct:partnerVodLocality,0,,low,,,7,,,1
 field = rentalInfo|25|string,0,1,low,,,,,,0
 field = rentalTitle|26|string,0,1,low,,,,,,0
 field = serviceGroup|14|string,0,,low,,,,,,0
 field = uiDestinationId|15|idLong:uiDestination,0,1,low,,,,,,0
 isFrozen = true
 number = 989
 returnType = partnerInfo
   description = Stores a new or a modified partnerInfoobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = buyInfo|,,Descriptive text that is displayed on the purchase overlay for this partner
   field = buyTitle|,,Title that is displayed on the purchase overlay for this partner
   field = caSigningCertFilename|,,This field defines the file system location of an MSO-specific signing certificate, and only is useful for an MSO partner. This is specific to an MSO partner's support of VPN service, using TiVo's GLIDE infrastructure, wherein an MSO-specific (sub-)CA signing key (corresponding to this certificate) will be used by VpnConfigInstructionsGet to sign and issue VPN client certificates. This field should refer to a file containing a single certificate.
   field = caSigningKeyFilename|,,This field defines the file system location of an MSO-specific signing private key, and only is useful for an MSO partner. This is specific to an MSO partner's support of VPN service, using TiVo's GLIDE infrastructure, wherein this MSO-specific (sub-)CA signing key will be used by VpnConfigInstructionsGet to sign and issue VPN client certificates.
   field = certificateLifetime|,,Lifetime of the certificate (in seconds)
   field = displayName|,,Human-readable, descriptive name.
   field = displayRank|,,This field defines display order for UI (e.g. Tivo Central, Bonus Features, Watch It Now, preview pane etc, except the "GET FROM" screen). UI displays partners in asc order.
   field = ipadAllowed|,,This field will be used for MSO partners to signify whether the MSO allows the iPad application to be used with their DVRs.  Eventually, this information will be obtained from the featureSearch API and this field will be lastVersioned.
   field = keySize|,,Number of bits to be used in the certificate key pair generation
   field = msoPriority|9,,This field defines display order for the "GET FROM" screen. UI displays partners in desc order.
   field = name|,,The convention is for this name to have no whitespace and be lower-cased, as this partner name may be used programmatically. For example, in the case of MSO partners, it may be used to construct a service group name prefixed with "DG_mso_".
   field = partnerCallbackPolicy|,,This field defines the partner specific callback policies for callInstructionsGet. This is applicable to an MSO partner only.
   field = rentalInfo|,,Descriptive text that is displayed on the rental overlay for this partner
   field = rentalTitle|,,Title that is displayed on the rental overlay for this partner
   field = uiDestinationId|,,This field may be used if this partnerInfo corresponds to a video provider.  This would help guide the client toward determining the proper action to take at different points in the UI.

********** operation = partnerInstructionsGet (NO)
 field = bodyId|1|idBody:body,1,1,low,,,,,,0
 field = callId|2|string,1,1,low,,,,,,0
 field = requestToken|3|anyDict,0,1,low,,,,,,0
 field = softwareVersion|4|string,1,1,low,,,,,,0
 field = userInitiated|5|boolean,1,1,low,,,,,,0
 number = 2092
 returnType = partnerInstructions
   description = This operation returns the provisioning information of partner instructions. This operation does the exact same thing as partnerInfoSearch.
   field = callId|,,A session ID.  Historically, a session of a Service call is called a "call". Using "callId" here enables more straightforward correlation to the trackerDb. Typically, the client would send Unix time, in seconds. This same value should be used as the callId for the entire session, meaning the invocation of callInstructionsGet plus each of the subsequent invocations of sub-operations, if any.
   field = requestToken|,,Typically the "resultToken" of the previous *InstructionsGet response. If this is the first call, then this field is omitted. As an anyDict field, we have extensibility here.
   field = softwareVersion|,,The currently installed software version on the body. This field is mostly intended for informational logging and potentially identifying what software features are currently available to the client.
   field = userInitiated|,,Was this invocation initiated by explicit user action, rather than programmatically, based on callbackSeconds information? This is mainly informational.

********** operation = partnerOfferEnqueueNotify (NO)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 field = partnerId|2|idInt:partner,1,1,,,,,,,0
 field = partnerOfferId|3|string,1,1,,,,,,100,0
 field = partnerTransactionId|4|long,0,1,,,,,0,,0
 isFrozen = true
 number = 924
 returnType = success
   description = Notify the Mind that a partnerOffer has been enqueued.
   field = bodyId|,,Limits the search to an object with exactly the same value in this field.
   field = partnerId|,,Limits the search to an object with exactly the same value in this field.
   field = partnerOfferId|,,Limits the search to an object with exactly the same value in this field.
   field = partnerTransactionId|,,Limits the search to an object with exactly the same value in this field.
   fieldProject = bodyId|0|0|0|partner-cds
   fieldProject = partnerId|0|0|0|hme-cds,partner-cds

********** operation = partnerSearch (NO)
 field = count|1|int,0,1,,1,,,1,,0
 field = levelOfDetail|2|enum:levelOfDetail,0,1,,,,,,,0
 field = offset|3|int,0,1,,0,,,,,0
 field = partnerId|4|idInt:partner,0,1,,,,,,,0
 field = responseTemplate|5|struct:responseTemplate,0,,,,,,,,0
 fieldGroup = searchFieldsCore
 isFrozen = true
 number = 436
 returnType = partnerList
   description = partner search operation
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = partnerId|,,Limits the search to an object with exactly the same value in this field.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   fieldProject = count|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = partnerServiceRemove (NO)
 field = headendId|1|string,1,1,,,,,,,0
 field = partnerId|2|idInt:partner,1,1,,,,,,,0
 number = 2054
 returnType = success
   description = Removes a partnerService object from the mind.

********** operation = partnerServiceSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = count|3|int,0,1,,1,,,1,,0
 field = format|4|enum:format,0,1,,,,,,,0
 field = groupBy|5|string,0,,,,,,,32,0
 field = headendId|6|string,0,1,,,,,,,0
 field = levelOfDetail|7|enum:levelOfDetail,0,1,,,,,,,0
 field = note|8|string,0,,,,,,,,0
 field = offset|9|int,0,1,,0,,,,,0
 field = orderBy|10|string,0,,,,,,,32,0
 field = partnerId|11|idInt:partner,0,1,,,,,,,0
 field = removeField|12|string,0,,,,,2,,,0
 field = responseTemplate|13|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|14|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 number = 2055
 orderBy = headendId
 orderBy = partnerId
 returnType = partnerServiceList
   description = partner service search operation
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = partnerId|,,Limits the search to an object with exactly the same value in this field.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = partnerServiceStore (NO)
 field = callbackPolicy|4|struct:partnerCallbackPolicy,0,1,low,,,,,,0
 field = headendId|1|string,1,1,low,,,,,48,0
 field = headendName|5|string,0,1,low,,,,,48,0
 field = partnerId|2|idInt:partner,1,1,low,,,,,,0
 field = serviceType|3|enum:partnerServiceType,1,,low,,,,,,0
 number = 2056
 returnType = partnerService
   description = Stores a new or a modified partnerServiceobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = callbackPolicy|,,By assigning a callback policy specific to a partner and headend, an operator could tell a subset of TCDs to, for example, call MServer more frequently than usual, in advance of a planned provisioning of configuration updates in order to deliver updates more quickly, on average.  After the upgrade window is done, the operator could have the TCDs revert to the standard, less frequent callbacks. If no callback policy is specified here, then the callback policy falls back to the appropriate default set for the partner.
   field = headendName|,,Human-readable, descriptive name for a headend.
   field = serviceType|,,A list of values of partnerServiceType (enum).

********** operation = partnerTicketRemove (NO)
 field = partnerId|1|idInt:partner,1,1,,,,,,,0
 number = 963
 returnType = success
   description = Remove the partnerTicket associated with the given partnerId
   field = partnerId|,,Limits the search to an object with exactly the same value in this field.

********** operation = partnerTicketRenew (NO)
 field = partnerId|1|idInt:partner,1,1,,,,,,,0
 number = 964
 returnType = success
   description = Renew the partnerTicket associated with the given partnerId
   field = partnerId|,,Limits the search to an object with exactly the same value in this field.

********** operation = partnerTicketSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = count|3|int,0,1,,1,,,1,,0
 field = format|4|enum:format,0,1,,,,,,,0
 field = groupBy|5|string,0,,,,,,,32,0
 field = levelOfDetail|6|enum:levelOfDetail,0,1,,,,,,,0
 field = note|7|string,0,,,,,,,,0
 field = offset|8|int,0,1,,0,,,,,0
 field = orderBy|9|string,0,,,,,,,32,0
 field = partnerId|10|idInt:partner,1,1,,,,,,,0
 field = removeField|11|string,0,,,,,2,,,0
 field = responseTemplate|13|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|12|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 number = 965
 returnType = partnerTicketList
   description = Return the partnerTicket associated with a body, if any
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = partnerId|,,Limits the search to an object with exactly the same value in this field.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = partnerTicketStore (NO)
 field = clientEncryptionKey|1|string,1,1,low,,,,,,0
 field = clientHashKey|2|string,1,1,low,,,,,,0
 field = partnerId|3|idInt:partner,1,1,low,,,,,,0
 field = serverPublicKey|4|string,1,1,low,,,,,,0
 field = ticket|5|string,1,1,low,,,,,,0
 field = ticketExpiration|6|dateTime,1,1,low,,,,,,0
 number = 966
 returnType = partnerTicket
   description = Stores a new or a modified partnerTicketobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = partnerId|,,The TiVo-assigned ID for the partner
   field = ticket|,,The ticket used to communicate with the partner

********** operation = partnerVodLocalityRemove (NO)
 field = partnerId|1|idInt:partner,1,1,,,,,,,0
 field = vodLocality|2|string,1,1,,,,,,,0
 isFrozen = true
 number = 1700
 returnType = success
   description = Removes a partnerVodLocality object from the mind.

********** operation = partnerVodLocalitySearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = count|3|int,0,1,,1,,,1,,0
 field = format|4|enum:format,0,1,,,,,,,0
 field = groupBy|5|string,0,,,,,,,32,0
 field = levelOfDetail|6|enum:levelOfDetail,0,1,,,,,,,0
 field = note|7|string,0,,,,,,,,0
 field = offset|8|int,0,1,,0,,,,,0
 field = orderBy|9|string,0,,,,,,,32,0
 field = partnerId|10|idInt:partner,1,1,,,,,,,0
 field = removeField|11|string,0,,,,,2,,,0
 field = responseTemplate|12|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|13|boolean,0,1,,true,,,,,0
 field = vodLocality|14|string,0,,,,,,,50,0
 fieldGroup = searchFields
 groupBy = vodLocality
 isFrozen = true
 number = 1701
 returnType = partnerVodLocalityList
   description = search partners for a locality
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = partnerId|,,Limits the search to an object with exactly the same value in this field.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   field = vodLocality|,,Limits the search to an object with exactly the same value in this field.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = partnerVodLocalityStore (NO)
 field = partnerId|1|idInt:partner,1,1,low,,,,,,0
 field = vodLocality|2|string,1,1,low,,,,,50,0
 isFrozen = true
 number = 1702
 returnType = partnerVodLocality
   description = Stores a new or a modified partnerVodLocalityobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = vodLocality|,,vod locality

********** operation = pcBodyEventNotify (NO)
 field = event|1|enum:pcBodyEvent,1,1,,,,,,,0
 field = pcBodyId|2|idBody:pcBody,1,1,,,,,,,0
 number = 901
 returnType = success
   description = Allows the pcBody to notify the Mind when certain events occur. The Mind handles different events differently, and each event may trigger side effects.
   field = event|,,The event that the Mind is being notified of.
   field = pcBodyId|,,The globally unique ID for this pcBody.

********** operation = pcBodyFullSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = count|3|int,0,1,,1,,,1,,0
 field = format|4|enum:format,0,1,,,,,,,0
 field = groupBy|5|string,0,,,,,,,32,0
 field = levelOfDetail|6|enum:levelOfDetail,0,1,,,,,,,0
 field = note|7|string,0,,,,,,,,0
 field = offset|8|int,0,1,,0,,,,,0
 field = orderBy|9|string,0,,,,,,,32,0
 field = pcBodyId|10|idBody:pcBody,1,1,,,,,,,0
 field = removeField|11|string,0,,,,,2,,,0
 field = responseTemplate|13|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|12|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 isFrozen = true
 number = 880
 returnType = pcBodyFullList
   description = used for moving pcBodies between clusters. 
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = pcBodyId|,,Limits the search to an object with exactly the same value in this field.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = pcBodyFullStore (NO)
 field = accountId|1|long,1,1,low,,,,0,,0
 field = pcBody|2|struct:pcBody,1,1,low,,,,,,0
 field = pcBodyId|3|idBody:pcBody,1,1,low,,,,,,0
 field = pcSubscription|4|struct:pcSubscription,0,,low,,,,,,0
 field = syncDeltaInternal|5|struct:syncDeltaInternal,0,,low,,,,,,0
 field = syncInternal|6|struct:syncInternal,0,,low,,,,,,0
 isFrozen = true
 number = 881
 returnType = pcBodyFull
   description = Stores a new or a modified pcBodyFullobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = accountId|,,The accountId for this pcBody
   field = pcBodyId|,,The pcBodyId for the pcBody

********** operation = pcBodyRemove (NO)
 field = pcBodyId|1|idBody:pcBody,1,1,,,,,,,0
 isFrozen = true
 number = 832
 returnType = success
   description = Removes a pcBody object from the mind.

********** operation = pcBodySearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = bodyId|3|idBody:body,0,1,low,,,,,,0
 field = bucketNumber|4|int,0,1,,,,,-1,4095,0
 field = count|5|int,0,1,,1,,,1,,0
 field = format|6|enum:format,0,1,,,,,,,0
 field = groupBy|7|string,0,,,,,,,32,0
 field = levelOfDetail|8|enum:levelOfDetail,0,1,,,,,,,0
 field = noLimit|15|boolean,0,1,,,,,,,0
 field = note|9|string,0,,,,,,,,0
 field = offset|10|int,0,1,,0,,,,,0
 field = orderBy|11|string,0,,,,,,,32,0
 field = pcBodyId|12|idBody:pcBody,0,1,,,,,,,0
 field = removeField|13|string,0,,,,,2,,,0
 field = responseTemplate|16|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|14|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 isFrozen = true
 number = 833
 orderBy = name
 orderBy = pcBodyId
 orderBy = updateDate
 returnType = pcBodyList
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = bodyId|,,ignored in the actual search, but optionally used for routing.
   field = bucketNumber|,,Limits the search to an object with exactly the same value in this field.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = noLimit|,,Do not limit this search to a given count.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = pcBodyId|,,Limits the search to an object with exactly the same value in this field.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = pcBodyStore (NO)
 field = bucketNumber|1|int,0,1,low,,,,-1,4095,0
 field = createDate|2|dateTime,0,1,high,,,,,,0
 field = name|3|string,1,1,low,,,,,255,0
 field = pcBodyId|4|idBody:pcBody,0,1,low,,,,,,0
 field = replaceExisting|5|boolean,0,1,low,false,,,,,0
 field = updateDate|6|dateTime,0,1,high,,,,,,0
 fieldGroup = pcBodyFields
 number = 834
 returnType = pcBody
   field = bucketNumber|,,bucketNumber for this body, this field is filled in by the mind
   field = createDate|,,When the pcBody was created
   field = pcBodyId|,,The globally unique ID for this pcBody.
   field = replaceExisting|,,replace existing pcBodies in the account with this one
   field = updateDate|,,When the pcBody was last updated

********** operation = pcSubscriptionRemove (NO)
 field = bodyId|1|idBody:pcBody,1,1,,,,,,,0
 field = destinationBodyId|2|idBody:body,1,1,,,,,,,0
 field = pcSubscriptionId|3|idInt:pcSubscription,1,1,,,,,,,0
 isFrozen = true
 number = 841
 returnType = success
   field = bodyId|,,The pcBody that will process the pcSubscription. 
   field = destinationBodyId|,,the destinationBodyId must be specified for proper routing

********** operation = pcSubscriptionSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = bodyId|3|idBody:pcBody,0,1,,,,,,,0
 field = count|4|int,0,1,,1,,,1,,0
 field = destinationBodyId|5|idBody:body,0,1,,,,,,,0
 field = format|6|enum:format,0,1,,,,,,,0
 field = groupBy|7|string,0,,,,,,,32,0
 field = levelOfDetail|8|enum:levelOfDetail,0,1,,,,,,,0
 field = noLimit|9|boolean,0,1,,,,,,,0
 field = note|10|string,0,,,,,,,,0
 field = offset|11|int,0,1,,0,,,,,0
 field = orderBy|12|string,0,,,,,,,32,0
 field = pcSubscriptionId|13|idInt:pcSubscription,0,1,,,,,,,0
 field = removeField|14|string,0,,,,,2,,,0
 field = responseTemplate|17|struct:responseTemplate,0,,,,,,,,0
 field = subscriptionId|15|idInt:subscription,0,1,,,,,,,0
 field = useAnchorOperation|16|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 isFrozen = true
 number = 842
 orderBy = destinationBodyId
 orderBy = pcSubscriptionId
 orderBy = title
 orderBy = updateDate
 returnType = pcSubscriptionList
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = bodyId|,,Limits the search to an object with exactly the same value in this field.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = destinationBodyId|,,Limits the search to an object with exactly the same value in this field.
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = noLimit|,,Do not limit this search to a given count.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = pcSubscriptionId|,,Limits the search to an object with exactly the same value in this field.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = subscriptionId|,,Limits the search to an object with exactly the same value in this field.
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = pcSubscriptionStore (NO)
 field = bodyId|1|idBody:pcBody,1,1,low,,,,,,0
 field = description|2|string,0,1,low,,,,,4096,0
 field = destinationBodyId|3|idBody:body,1,1,low,,,,,,0
 field = idSetSource|4|union:idSetSource,1,1,low,,,,,,0
 field = imageUrl|5|imageUrl,0,1,low,,,,,4096,0
 field = maxRecordings|6|int,0,1,medium,0,,,0,,0
 field = pcSubscriptionId|7|idInt:pcSubscription,0,1,low,,,,,,0
 field = subscriptionId|8|idInt:subscription,0,1,low,,,,,,0
 field = title|9|string,0,1,low,,,,,255,0
 field = tvRating|10|enum:tvRating,0,1,medium,,,,,,0
 isFrozen = true
 number = 843
 returnType = pcSubscription
   description = Stores a new or a modified pcSubscriptionobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = bodyId|,,The pcBody that will process the pcSubscription. 
   field = description|,,the description of the pcSubscription. Generally, this should be derived from the description of the content source for the pcSubscription.
   field = destinationBodyId|,,The body to which Offers scheduled for the pcSubscription should be delivered
   field = idSetSource|,,The dictionary that defines what this is a pcSubscription for.
   field = imageUrl|,,the URL for an image for the pcSubscription. Generally, this should be derived from the imageUrl of the content source for the pcSubscription.
   field = maxRecordings|,,The maximum number of recordings to keep at any one time.  If this field is missing or is set to 0, it means 'unlimited'. Any other value is the maximum number of recordings to keep for this subscription.  Negative numbers are not valid.
   field = subscriptionId|,,id of the body-based subscription for which this pcSubscription was created
   field = title|,,the title of the pcSubscription. Generally, this should be derived from the title of the content source for the pcSubscription.
   field = tvRating|,,Offers scheduled from this pcSubscription will have this tvRating.

********** operation = peerBodiesSet (NO)
 field = allowedBodyId|1|string,0,,,,,,,,0
 field = peerName|2|string,1,1,,,,,,,0
 number = 1987
 returnType = success
   description = invoked by mindset(or peer?) to set a list of bodyIds  owned by the customer associated with this peer

********** operation = peerBodyIdSet (NO)
 field = peerBodyId|1|string,1,1,,,,,,,0
 field = peerName|2|string,1,1,,,,,,,0
 number = 2014
 returnType = success
   description = Invoked by an authentication mindset to set the bodyId when the peer authenticates using bodyAuthenticate.

********** operation = peerDataSearch (NO)
 field = key|1|string,1,,,,,,,,0
 field = peerName|2|string,1,1,,,,,,,0
 number = 2113
 returnType = peerDataList
   description = for a given peer, get state associated with these keys

********** operation = peerDataStore (NO)
 field = key|1|string,1,1,low,,,,,,0
 field = peerName|2|string,1,1,low,,,,,,0
 field = value|3|string,1,1,low,,,,,,0
 number = 2114
 returnType = peerData
   description = Stores a new or a modified peerDataobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.

********** operation = peerNameSet (NO)
 field = peerName|1|string,1,1,,,,,,,0
 number = 1988
 returnType = success
   description = invoked by mindset to identify (set their name) with middlemind

********** operation = peerPartnerIdSet (NO)
 field = partnerId|1|idInt:partner,1,1,,,,,,,0
 field = peerName|2|string,1,1,,,,,,,0
 number = 1989
 returnType = success
   description = invoked by mindset to set partnerId  of the peer with middlemind

********** operation = permissionGroupRemove (NO)
 field = groupId|1|string,1,1,,,,,,,0
 field = partnerId|2|idInt:partner,1,1,,,,,,,0
 number = 441
 returnType = success
   field = groupId|,,Limits the search to an object with exactly the same value in this field.
   field = partnerId|,,Limits the search to an object with exactly the same value in this field.

********** operation = permissionGroupSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = count|3|int,0,1,,1,,,1,,0
 field = format|4|enum:format,0,1,,,,,,,0
 field = groupBy|5|string,0,,,,,,,32,0
 field = groupId|6|string,0,1,,,,,,,0
 field = levelOfDetail|7|enum:levelOfDetail,0,1,,,,,,,0
 field = noLimit|8|boolean,0,1,,,,,,,0
 field = note|9|string,0,,,,,,,,0
 field = offset|10|int,0,1,,0,,,,,0
 field = orderBy|11|string,0,,,,,,,32,0
 field = partnerId|12|idInt:partner,0,1,,,,,,,0
 field = removeField|13|string,0,,,,,2,,,0
 field = responseTemplate|15|struct:responseTemplate,0,,,,,,,,0
 field = softwareVersion|16|string,0,1,,,,,,100,0
 field = useAnchorOperation|14|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 number = 442
 returnType = permissionGroupList
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = groupId|,,Limits the search to an object with exactly the same value in this field.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = noLimit|,,Do not limit this search to a given count.  This is a special field that is only allowed on certain operations. This is one of those operations...
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = partnerId|,,Limits the search to an object with exactly the same value in this field.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = softwareVersion|,,(optional) Software version a body is running. used to give out a customized group for this version.
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = permissionGroupStore (NO)
 field = groupId|1|string,0,1,low,,,,,,0
 field = partnerId|2|idInt:partner,0,1,low,,,,,,0
 number = 443
 returnType = permissionGroup
   description = Stores a new or a modified permissionGroupobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = groupId|,,groupId
   field = partnerId|,,The partner who is being allowed access.  This field is required -- there is no way to grant access to everybody.

********** operation = permissionRemove (NO)
 field = permissionId|1|idLong:permission,1,1,,,,,,,0
 number = 445
 returnType = success
   description = Removes a permission object from the mind.

********** operation = permissionSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = bodyAuthType|3|enum:authType,0,1,,,,,,,0
 field = bodyGroup|4|string,0,1,,,,,,32,0
 field = count|5|int,0,1,,1,,,1,,0
 field = format|6|enum:format,0,1,,,,,,,0
 field = groupBy|7|string,0,,,,,,,32,0
 field = groupId|8|string,0,1,,,,,,30,0
 field = levelOfDetail|9|enum:levelOfDetail,0,1,,,,,,,0
 field = noLimit|10|boolean,0,1,,,,,,,0
 field = note|11|string,0,,,,,,,,0
 field = offset|12|int,0,1,,0,,,,,0
 field = operation|13|string,0,1,,,,,,100,0
 field = orderBy|14|string,0,,,,,,,32,0
 field = partnerId|19|idInt:partner,0,1,,,,,,,0
 field = permissionId|15|idLong:permission,0,1,,,,,,,0
 field = permissionType|20|enum:permissionType,0,1,,,9,,,,0
 field = removeField|16|string,0,,,,,2,,,0
 field = responseTemplate|18|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|17|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 number = 446
 returnType = permissionList
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = bodyAuthType|,,Limits the search to an object with exactly the same value in this field.
   field = bodyGroup|,,Limits the search to an object with exactly the same value in this field.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = groupId|,,Limits the search to an object with exactly the same value in this field.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = noLimit|,,Do not limit this search to a given count.  This is a special field that is only allowed on certain operations. This is one of those operations...
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = operation|,,Limits the search to an object with exactly the same value in this field.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = partnerId|,,Limits the search to an object with exactly the same value in this field.
   field = permissionId|,,Limits the search to an object with exactly the same value in this field.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = permissionStore (NO)
 field = bodyAuthType|1|enum:authType,0,,low,,,,,,0
 field = bodyGroup|2|string,0,,low,,,,,32,0
 field = groupId|3|string,0,1,low,,,,,30,0
 field = operation|4|string,1,1,low,,,,,100,0
 field = partnerId|5|idInt:partner,0,1,low,,,8,,,0
 field = permissionId|6|idLong:permission,0,1,low,,,,,,0
 field = permissionType|7|enum:permissionType,0,1,low,mindOperation,9,,,,0
 number = 447
 returnType = permission
   description = Stores a new or a modified permissionobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = bodyAuthType|,,The means that may be used to determine whether the requester has access to the body.  When not present, means that no body authentication is required.
   field = bodyGroup|,,The groups of bodies that this authorization applies to.  When none are listed, it means that the permission applies to all bodies.
   field = groupId|,,groupId
   field = operation|,,The name of the operation that is being allowed
   field = partnerId|,8,The partner who is being allowed access.  This field is required -- there is no way to grant access to everybody.

********** operation = personCreate (NO)
 field = first|1|string,0,1,low,,,,,100,0
 field = forceNewPerson|2|boolean,0,1,,false,,,,,0
 field = image|7|struct:image,0,,,,,,,,0
 field = imageUrl|3|imageUrl,0,1,,,,8,,,0
 field = last|4|string,0,1,low,,,,,100,0
 field = middle|5|string,0,1,low,,,,,100,0
 field = partnerId|6|idInt:partner,1,1,,,,,,,0
 fieldGroup = nameFields
 isFrozen = true
 number = 825
 returnType = person
   description = Create a new person or return an existing person
   field = first|,,First name
   field = forceNewPerson|,,If set to true, this will cause a new person to be created regardless of whether a person exists with the same name
   field = image|,,Image metadata for this person
   field = last|,,Last name
   field = middle|,,Middle name
   fieldProject = first|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = last|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = middle|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe

********** operation = personRemove (NO)
 field = personId|1|idLong:person,1,1,,,,,,,0
 isFrozen = true
 number = 826
 returnType = success
   description = Removes a person object from the mind.

********** operation = personSearch (YES)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = bodyId|3|idBody:body,0,1,,,,,,,0
 field = count|4|int,0,1,,1,,,1,,0
 field = fallbackImageObjectType|30|enum:fallbackImageObjectType,0,1,,,,,,,0
 field = first|5|string,0,1,,,,,,100,0
 field = format|6|enum:format,0,1,,,,,,,0
 field = fullName|23|string,0,1,,,,,,100,0
 field = groupBy|7|string,0,,,,,,,32,0
 field = imageRuleset|28|struct:imageRuleset,0,,,,,,,,0
 field = last|8|string,0,1,,,,,,100,0
 field = lastAndOnly|27|string,0,1,,,,,,100,0
 field = levelOfDetail|9|enum:levelOfDetail,0,1,,,,,,,0
 field = lineup|10|struct:lineup,0,,,,,,,,0
 field = maxCreateDate|25|dateTime,0,1,,,,,,,0
 field = maxUpdateDate|24|dateTime,0,1,,,,,,,0
 field = middle|11|string,0,1,,,,,,100,0
 field = minCreateDate|26|dateTime,0,1,,,,,,,0
 field = minUpdateDate|12|dateTime,0,1,,,,,,,0
 field = name|13|string,0,1,,,,,,100,0
 field = nameId|14|idLong:name,0,1,,,,,,32,0
 field = namespace|15|enum:namespace,0,1,,,,,,,0
 field = note|16|string,0,,,,,,,,0
 field = offset|17|int,0,1,,0,,,,,0
 field = orderBy|18|string,0,,,,,,,32,0
 field = partnerId|22|idInt:partner,0,1,,,,,,,0
 field = personId|19|idLong:person,0,,,,,,,,0
 field = removeField|20|string,0,,,,,2,,,0
 field = responseTemplate|29|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|21|boolean,0,1,,true,,,,,0
 fieldGroup = imageRulesetFields
 fieldGroup = searchFields
 isFrozen = true
 number = 450
 orderBy = first
 orderBy = last
 orderBy = relevance
 returnType = personList
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = bodyId|,,limits the person search to people that appear in cast/credits of upcoming showings for the given body id
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = fallbackImageObjectType|,,If set, this object type will be used to replace the content object's image in the contentSummaryForPersonId note if the content object's image is not available based on the input ruleset
   field = first|,,Limits the search to an object with exactly the same value in this field.
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = fullName|,,limits the person search to people whose full name matches this attribute
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = imageRuleset|,,one ruleset should be specified per image desired. multiple rulesets can be specified.
   field = last|,,Limits the search to an object with exactly the same value in this field.
   field = lastAndOnly|,,limits the person search to people whose last name matches this attribute or first name matches and the last name is null
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = lineup|,,limits the person search to people that appear in cast/credits of upcoming showings for the given headned/lineup(s)
   field = middle|,,Limits the search to an object with exactly the same value in this field.
   field = name|,,limits the person search to people whose first or last name match this attribute
   field = nameId|,,Limits the search to an object with exactly the same value in this field.
   field = namespace|,,Which namespace to search in
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = personId|,,Limits the search to an object with exactly the same value in this field.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = first|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = last|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = middle|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = personStore (NO)
 field = biographyUrl|10|url,0,1,low,,,,,,0
 field = birthDate|5|date,0,1,high,,,,,,0
 field = birthPlace|6|string,0,1,high,,,,,64,0
 field = deathDate|7|date,0,1,high,,,,,,0
 field = image|4|struct:image,0,,low,,,,,,0
 field = imageUrl|1|imageUrl,0,1,low,,,8,,,0
 field = partnerId|3|idInt:partner,0,1,,,,,,,0
 field = personId|2|idLong:person,0,1,,,,,,,0
 field = profession|8|string,0,1,high,,,,,255,0
 field = sex|9|enum:sex,0,1,high,,,,,,0
 fieldGroup = personFields
 isFrozen = true
 number = 827
 returnType = person
   field = biographyUrl|,,This field is created on-the-fly field by combining personId and a dynvar. Client is supposed to lookup biography via biographyUrl.
   field = birthDate|,,Birth date for this person
   field = birthPlace|,,Birth place for this person
   field = deathDate|,,Death date for this person
   field = profession|,,Person's profession
   field = sex|,,Sex of a person. Currently values are male or female.

********** operation = personTableSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = bodyId|3|idBody:body,0,1,,,,,,,0
 field = categoryId|4|idLong:category,0,,,,,,,,0
 field = count|5|int,0,1,,1,,,1,,0
 field = encodingType|30|enum:encodingType,0,,high,,,,,,0
 field = excludeNameId|6|idLong:name,0,,,,,,,,0
 field = excludePartnerId|7|idInt:partner,0,,,,,,,,0
 field = format|8|enum:format,0,1,,,,,,,0
 field = groupBy|9|string,0,,,,,,,32,0
 field = hdtv|10|boolean,0,1,,,,,,,0
 field = imageRuleset|35|struct:imageRuleset,0,,,,,,,,0
 field = includeBroadband|11|boolean,0,1,,true,,,,,0
 field = includeBroadcast|12|boolean,0,1,,true,,,,,0
 field = includeFree|13|boolean,0,1,,true,,,,,0
 field = includePaid|14|boolean,0,1,,true,,,,,0
 field = includeVod|34|boolean,0,1,,true,,,,,0
 field = keyword|15|string,0,1,,,,,,100,0
 field = lastNamePrefix|16|string,0,1,,,,,,100,0
 field = levelOfDetail|17|enum:levelOfDetail,0,1,,,,,,,0
 field = lineup|18|struct:lineup,0,,,,,,,,0
 field = maxStartTime|19|dateTime,0,1,,,,,,,0
 field = minEndTime|20|dateTime,0,1,,,,,,,0
 field = nameId|21|idLong:name,0,,low,,,,,,0
 field = namespace|31|enum:namespace,0,1,,,,,,,0
 field = noLineupFilter|33|boolean,0,1,,false,,,,,0
 field = note|22|string,0,,,,,,,,0
 field = offset|23|int,0,1,,0,,,,,0
 field = orderBy|24|string,0,,,,,,,32,0
 field = partnerId|25|idInt:partner,0,1,,,,,,,0
 field = personId|29|idLong:person,0,,,,,,,,0
 field = removeField|26|string,0,,,,,2,,,0
 field = responseTemplate|36|struct:responseTemplate,0,,,,,,,,0
 field = searchable|32|boolean,0,1,,,,,,,0
 field = useAnchorOperation|27|boolean,0,1,,true,,,,,0
 field = useLineup|28|boolean,0,1,,,,,,,0
 fieldGroup = filterFields
 fieldGroup = imageRulesetFields
 fieldGroup = searchFields
 number = 451
 orderBy = first
 orderBy = last
 orderBy = middle
 orderBy = nameId
 orderBy = relevance
 returnType = personList
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = bodyId|,,Restricts the search to collections showing in the next 14 days that are available on this body.  For bodies that sync with the mind, availability is based on the list of channels that the body has sent up.  Only channels that have isReceived=true are used.  For bodies that have not synced with the mind, availability is based on the lineup retrieved from the BSM, and all channels are used.
   field = categoryId|,,Take a categoryId and will be passed to CollectionSearch.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = imageRuleset|,,one ruleset should be specified per image desired. multiple rulesets can be specified.
   field = includeBroadband|,,Include broadband collections
   field = includeBroadcast|,,Include broadcast collections
   field = includeFree|,,Include free collections. These would be the pgd collections and cds offers that has a price of 0.
   field = includePaid|,,Include paid collections. These would be cds offers with price greater than 0.
   field = includeVod|,,Include vod collections
   field = keyword|,,Performs a prefix keyword search on each of actor's name against the personTableToken
   field = lastNamePrefix|,,Performs a prefix search on personTable.lastName
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = lineup|,,Restricts the search to collections showing in the next 14 days on a channel in the named lineup.
   field = maxStartTime|,,Return collections that show before maxStartTime in the next 14 days of PGD data.
   field = minEndTime|,,Returns collections that show after minEndTime in the next 14 days of PGD data.
   field = nameId|,,Restricts the names that are returned to the names passed in from this list. That way we can apply filters on a smaller set of names instead of the entire table.
   field = namespace|,,Which namespace to search in
   field = noLineupFilter|,,If set to TRUE, has the effect that all tags are returned if they match the passed-in keyword/prefix. All other filters are ignored.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = personId|,,Limits the search to an object with exactly the same value in this field.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   field = useLineup|,,forces query to use headend and lineup instead of custom channel list.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = namespace|0|0|0|partner-schedule,partner-cds,partner-subscribe
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = pgdUpdate (NO)
   description = Allows for an PGD to be updated possibly on an emergency basis.
   field = requestId|,,uniqueId associated with this pgdUpdate request

********** operation = phoneHomeRequest (YES)
   description = Forces a body to make a service call of the specified call type.
   field = callType|,,If specified, this is the requested type of call to be made. If no call type is specified, a daily call is assumed, in order to support backwards compatibility.

********** operation = phoneHomeSend (NO)
 field = bodyId|1|idBody:anyBody,1,1,,,,,,,0
 number = 1795
 returnType = success
   description = Used internally in the service to send a Phone Home request to a body.  It may wind up using XMPP (xmppAction) or make a direct localmind call to phoneHomeRequest depending on the body's capabilities.

********** operation = ping (NO)
 field = note|1|string,0,,,,,,,,0
 field = response|2|knownDict,1,1,,,,,,,0
 number = 452
 returnType = knownDict
   description = Returns the value of the field 'response'.
   field = note|,,A request for the results to be annotated.

********** operation = playerCreate (NO)
 field = contentDetectionEnabled|1|boolean,0,1,low,,,,,,0
 field = error|2
 field = mediaTime|3|long,0,1,low,,,,,,0
 field = playerId|4|idInt:player,0,1,low,,,,,,0
 field = speed|5|float,0,1,low,,,,,,0
 field = state|6|enum:playerState,0,1,low,,,,,,0
 field = url|7|string,1,1,low,,,,,,0
 field = videoWindow|8|struct:videoWindow,0,1,low,,,,,,0
 fieldGroup = playerFields
 number = 1404
 returnType = player
   field = contentDetectionEnabled|,,Requests (or reports) if content detection is enabled.
   field = mediaTime|,,The current or desired media time in milliseconds since the beginning of the asset.
   field = playerId|,,This field is only here for compatability with a previous version where the field was required.  It should not be here at all.  Once the clients have been changed to not set the field, we can remove it.
   field = speed|,,The current or desired playback speed.  A value of 1.0 indicates normal play.  Values greater than 1.0 are the rate of fast-forward. Values less than 1.0 are the rate of reverse play.
   field = state|,,The current or desired state of the player.
   field = url|,,The url for the media that should be played (or is playing)
   field = videoWindow|,,The area on the screen where the video appears.

********** operation = playerGet (NO)
 field = playerId|1|idInt:player,1,1,,,,,,,0
 field = updateInterval|2|int,0,1,low,,,,,,0
 number = 1407
 returnType = player
   description = This is used to get the current status of the player specified by playerId. If a value is specified for the updateInterval then we will attempt to send these status updates at the requested interval.  Regardless of the update interval, a playerStatus will be sent any time the player's state changes.
   field = updateInterval|,,Sets the time interval (in milliseconds) for receiving status updates from the player.

********** operation = playerSearch (NO)
 field = playerId|1|idInt:player,0,,,,,,,,0
 field = url|2|string,0,,,,,,,,0
 number = 1952
 returnType = playerList
   description = Returns players that match the given criteria.  If no fields are specified, all known players are returned.
   field = playerId|,,Limits the search to an object with exactly the same value in this field.
   field = url|,,Limits the search to an object with exactly the same value in this field.

********** operation = playerUpdate (NO)
 field = contentDetectionEnabled|1|boolean,0,1,low,,,,,,0
 field = error|2
 field = mediaTime|3|long,0,1,low,,,,,,0
 field = playerId|4|idInt:player,1,1,low,,,,,,0
 field = relativeMediaTime|5|long,0,1,low,,,,,,0
 field = speed|6|float,0,1,low,,,,,,0
 field = state|7|enum:playerState,0,1,low,,,,,,0
 field = url|8|string,0,1,low,,,,,,0
 field = videoWindow|9|struct:videoWindow,0,1,low,,,,,,0
 fieldGroup = playerFields
 number = 1408
 returnType = player
   description = Updates the player specified by the playerId (in playerFields) with the requested values, as specified in playerFields
   field = contentDetectionEnabled|,,Requests (or reports) if content detection is enabled.
   field = mediaTime|,,The current or desired media time in milliseconds since the beginning of the asset.
   field = relativeMediaTime|,,Used to set the media time relative to the current position. It is an error to specify both a mediaTime and a relativeMediaTime.
   field = speed|,,The current or desired playback speed.  A value of 1.0 indicates normal play.  Values greater than 1.0 are the rate of fast-forward. Values less than 1.0 are the rate of reverse play.
   field = state|,,The current or desired state of the player.
   field = url|,,The url for the media that should be played (or is playing)
   field = videoWindow|,,The area on the screen where the video appears.

********** operation = predictiveThumbsRemove (NO)
 field = bodyId|1|idBody:body,1,1,low,,,,,,0
 field = collectionId|2|idLong:collection,0,1,,,,,,,0
 isFrozen = true
 number = 1232
 returnType = success
   field = bodyId|,,Limits the search to an object with exactly the same value in this field.
   field = collectionId|,,Limits the search to an object with exactly the same value in this field.
   fieldProject = collectionId|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe

********** operation = predictiveThumbsSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = bodyId|3|idBody:body,1,1,low,,,,,,0
 field = count|4|int,0,1,,1,,,1,,0
 field = format|5|enum:format,0,1,,,,,,,0
 field = groupBy|6|string,0,,,,,,,32,0
 field = levelOfDetail|7|enum:levelOfDetail,0,1,,,,,,,0
 field = note|8|string,0,,,,,,,,0
 field = offset|9|int,0,1,,0,,,,,0
 field = orderBy|10|string,0,,,,,,,32,0
 field = removeField|11|string,0,,,,,2,,,0
 field = responseTemplate|13|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|12|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 isFrozen = true
 number = 455
 returnType = predictiveThumbsList
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = bodyId|,,Limits the search to an object with exactly the same value in this field.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = predictiveThumbsStore (NO)
 field = bodyId|1|idBody:body,1,1,low,,,,,,0
 field = collectionId|2|idLong:collection,1,1,low,,,,,,0
 field = suggestionScore|3|int,1,1,low,,,,,,0
 isFrozen = true
 number = 456
 returnType = predictiveThumbs
   description = Stores a new or a modified predictiveThumbsobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.

********** operation = presenceGoodbye (NO)
 field = source|1|enum:presenceSource,0,1,,,,,,,0
 number = 1578
 returnType = success
   description = Indicates that the user has gone away.
   field = source|,,The source of the presence information.

********** operation = presenceHello (NO)
 field = intervalSinceEvent|1|int,0,1,,,,,,,0
 field = onlineDuration|2|int,0,1,,,,,,,0
 field = source|3|enum:presenceSource,0,1,,,,,,,0
 number = 1579
 returnType = presenceHelloAcknowledgment
   description = Indicates that the user has somehow asserted her presence, for example, by using the remote control or turning on her television.
   field = intervalSinceEvent|,,The interval, in seconds, from the last activity that triggered the assertion of presence (e.g. a remote key press).  For example, suppose that a remote key press asserts presence for 20 seconds.  We start offline.  The user presses the remote each second through second 10 and stops.  On the first keypress, we send our first presenceHello(remote, 0, 20).  Now we know that we do not have to reassert presence for the next 20 seconds.  At second 19, we see that the last remote press was 9 seconds ago at second 10, so we send a presenceHello(remote, 9, 20). This asserts presence for only 11 more seconds.  If not set, the interval will be assumed to be 0.
   field = onlineDuration|,,The duration, in seconds, for which the triggering event implies presence.  For example, a remote button press might imply that the user will be present for the next five minutes.  If not set, a default duration will be used.
   field = source|,,The source of the presence information.  If not set, default policies will apply.

********** operation = presenceStatusSearch (NO)
 field = bodyId|1|idBody:body,0,1,,,,,,,0
 field = state|2|enum:presenceState,0,1,,,,,,,0
 field = userId|3|idLong:user,0,1,,,,,,,0
 number = 1583
 returnType = presenceStatusList
   description = Gets the current presence status of users or bodies.
   field = bodyId|,,Limits the search to an object with exactly the same value in this field.
   field = state|,,Limits the search to an object with exactly the same value in this field.
   field = userId|,,Limits the search to an object with exactly the same value in this field.

********** operation = promotionalItemRemove (NO)
 field = promotionalItemId|1|idLong:promotionalItem,1,1,,,,,,,0
 isFrozen = true
 number = 1030
 returnType = success
   description = Removes a promotionalItem object from the mind.

********** operation = promotionalItemSearch (NO)
 field = addField|4|string,0,,,,,2,,,0
 field = anchor|5|anchorDict,0,1,,,,,,,0
 field = authoredId|1|string,0,1,,,,,,100,0
 field = count|6|int,0,1,,1,,,1,,0
 field = edition|2|int,0,1,,,,,0,65535,0
 field = format|7|enum:format,0,1,,,,,,,0
 field = groupBy|8|string,0,,,,,,,32,0
 field = levelOfDetail|9|enum:levelOfDetail,0,1,,,,,,,0
 field = maxAvailableStartTime|15|dateTime,0,1,,,,,,,0
 field = maxCreateDate|18|dateTime,0,1,,,,,,,0
 field = maxUpdateDate|19|dateTime,0,1,,,,,,,0
 field = minAvailableEndTime|16|dateTime,0,1,,,,,,,0
 field = minCreateDate|20|dateTime,0,1,,,,,,,0
 field = minUpdateDate|21|dateTime,0,1,,,,,,,0
 field = note|10|string,0,,,,,,,,0
 field = offset|11|int,0,1,,0,,,,,0
 field = orderBy|12|string,0,,,,,,,32,0
 field = promotionalItemId|3|idLong:promotionalItem,0,1,,,,,,,0
 field = removeField|13|string,0,,,,,2,,,0
 field = responseTemplate|17|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|14|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 number = 1031
 orderBy = authoredId
 orderBy = edition
 orderBy = promotionalItemId
 returnType = promotionalItemList
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = authoredId|,,Limits the search to an object with exactly the same value in this field.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = edition|,,Limits the search to an object with exactly the same value in this field.
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = promotionalItemId|,,Limits the search to an object with exactly the same value in this field.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = promotionalItemStore (NO)
 field = authoredId|1|string,1,1,low,,,,,100,0
 field = availableEndTime|2|dateTime,1,1,low,,,,,,0
 field = availableStartTime|3|dateTime,1,1,low,,,,,,0
 field = collectionType|16|enum:collectionType,0,1,low,,9,,,,0
 field = displayRank|4|int,0,1,low,,,,0,65535,0
 field = edition|5|int,1,1,low,,,,0,65535,0
 field = filter|12|struct:promotionalItemFilter,0,,low,,,,,,0
 field = filterContainer|6
 field = flyout|7|union:uiFlyout,1,1,low,,,,,,0
 field = image|8|struct:image,1,,low,,,,,,0
 field = promotionalItemId|9|idLong:promotionalItem,0,1,low,,,,,,0
 field = promotionalItemType|13|enum:promotionalItemType,1,1,low,,,,,,0
 field = reason|15|string,0,1,low,,,,,100,0
 field = serviceGroup|10|string,0,,low,,,,,,0
 field = target|11|union:uiAction,1,1,low,,,,,,0
 field = tvRating|14|enum:tvRating,0,1,low,,,,,,0
 isFrozen = true
 number = 1032
 returnType = promotionalItem
   description = Stores a new or a modified promotionalItemobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = authoredId|,,An external ID to identify this promotional item.
   field = availableEndTime|,,End date/time for when this PI is no longer active.
   field = availableStartTime|,,Start date/time for when this PI becomes active.
   field = collectionType|9,,The collectionType associated with the underlying content/collection of the promotionalItem (if present).
   field = edition|,,An external revision number associated with the authoredId
   field = filter|,,Any number of filters to be applied to the PI. If multiple filters are present, they are ORed together: if any filter on an item matches the context, the item is eligible for view. 
   field = flyout|,,Associated flyout data.
   field = image|,,Associated graphic.
   field = promotionalItemId|,,Unique Mind identifier.
   field = promotionalItemType|,,A type associated with the PI. Allows the Mind to make decisions based on intended use.
   field = serviceGroup|,,Any number of Service Groups which must match for this PI to be considered valid for a specific body.
   field = target|,,An action for this promotional item.
   field = tvRating|,,if specified, the tvRating of the promotionalItem  (NOT the item being promoted, but the promotion itself).

********** operation = promotionalMenuItemGet (NO)
 field = displayArea|1|enum:promotionalMenuItemDisplayArea,1,1,,,,,,,0
 field = filter|2|struct:promotionalItemFilter,0,,,,,,,,0
 number = 1539
 returnType = promotionalMenuItemResult
   field = displayArea|,,Search for PMIs authored to this area.
   field = filter|,,Only return PMIs matching these filters

********** operation = queuedRequestGet (NO)
   description = Retrieve the results of an operation that was previously queued for execution.

********** operation = queuedRequestStore (NO)
 field = request|1|anyDict,1,1,,,,,,,0
 number = 812
 returnType = queuedRequest
   description = Enqueues a mind request for later execution.  Returns a queuedRequestId that can be used later to retrieve the results of the operation.
   field = request|,,The operation to perform.

********** operation = ratingAdvisoryRemove (NO)
 field = name|1|string,0,1,,,,,,,0
 field = ratingAdvisoryId|2|idInt:ratingAdvisory,0,1,,,,,,,0
 field = ratingTypeId|3|idInt:ratingType,1,1,,,,,,,0
 number = 2137
 returnType = success
   description = Remove advisory for a ratingType
   field = name|,,Advisory. One of the values defined in allAdvisories enum
   field = ratingAdvisoryId|,,ratingAdvisory Id
   field = ratingTypeId|,,ratingType Id

********** operation = ratingAdvisorySearch (NO)
 field = name|1|string,0,1,,,,,,,0
 field = noLimit|2|boolean,0,1,,,,,,,0
 field = ratingAdvisoryId|3|idInt:ratingAdvisory,0,1,,,,,,,0
 field = ratingTypeId|4|idInt:ratingType,0,1,,,,,,,0
 number = 2138
 orderBy = type
 returnType = ratingAdvisoryList
   description = Search for ratingType and corresponding advisory in service DB.
   field = name|,,Advisory. One of the values defined in allAdvisories enum
   field = noLimit|,,Do not limit this search to a given count.
   field = ratingAdvisoryId|,,The advisory Id
   field = ratingTypeId|,,The ratingType Id

********** operation = ratingAdvisoryStore (NO)
 field = ratingAdvisoryId|1|idInt:ratingAdvisory,0,1,,,,,,,0
 field = ratingTypeId|2|idInt:ratingType,1,1,,,,,,,0
 number = 2139
 returnType = ratingAdvisory
   description = Store Advisory for a rating

********** operation = ratingTypeRemove (NO)
 field = ratingTypeId|1|idInt:ratingType,1,1,,,,,,,0
 number = 2097
 returnType = success
   description = Removes a ratingType object from the mind.

********** operation = ratingTypeSearch (NO)
 field = name|1|string,0,1,,,,,,,0
 field = noLimit|2|boolean,0,1,,,,,,,0
 field = ratingTypeId|3|idInt:ratingType,0,1,,,,,,,0
 number = 2098
 orderBy = type
 returnType = ratingTypeList
   description = Search for ratingType in service DB.
   field = name|,,The ratingType name
   field = noLimit|,,Do not limit this search to a given count.

********** operation = ratingTypeStore (NO)
 field = adultLevel|1|int,1,1,low,,,,,,0
 field = name|2
 field = ratingTypeId|3|idInt:ratingType,0,1,low,,,,,,0
 number = 2099
 returnType = ratingType
   field = adultLevel|,,Level above this will be treated as adult rated.
   field = ratingTypeId|,,Unique Id for the type

********** operation = ratingValueRemove (NO)
 field = name|1|string,0,1,,,,,,,0
 field = ratingTypeId|2|idInt:ratingType,1,1,,,,,,,0
 field = ratingValueId|3|idInt:ratingValue,0,1,,,,,,,0
 number = 2102
 returnType = success
   description = Remove ratingValue. Must specify typeid and value.
   field = name|,,ratingValue name

********** operation = ratingValueSearch (NO)
 field = name|1|string,0,1,,,,,,,0
 field = noLimit|2|boolean,0,1,,,,,,,0
 field = ratingTypeId|3|idInt:ratingType,0,1,,,,,,,0
 field = ratingValueId|4|idInt:ratingValue,0,1,,,,,,,0
 number = 2103
 orderBy = level
 returnType = ratingValueList
   description = Search for rating value(s) in service DB
   field = name|,,ratingValue Name
   field = noLimit|,,Do not limit this search to a given count.

********** operation = ratingValueStore (NO)
 field = isHidden|1|boolean,0,1,,,,,,,0
 field = level|2|int,1,1,,,,,,,0
 field = name|3
 field = ratingTypeId|4|idInt:ratingType,1,1,,,,,,,0
 field = ratingValueId|5|idInt:ratingValue,0,1,,,,,,,0
 number = 2104
 returnType = ratingValue
   field = isHidden|,,If true, this rating will not be displayed in the UI with the rating list.
   field = level|,,level will be 10, 20, 30, and so on. They are ordered from least restricted to most. The gap is left to accommodate more values in between if needed.

********** operation = rebootSystem (NO)
   description = Sent to reboot the system.  Technically doesn't return anything since the system is rebooted before the success event is generated.

********** operation = recordingActionInternalSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = bodyId|3|idBody:body,1,1,,,,,,,0
 field = count|4|int,0,1,,1,,,1,,0
 field = format|5|enum:format,0,1,,,,,,,0
 field = groupBy|6|string,0,,,,,,,32,0
 field = levelOfDetail|7|enum:levelOfDetail,0,1,,,,,,,0
 field = note|8|string,0,,,,,,,,0
 field = offset|9|int,0,1,,0,,,,,0
 field = orderBy|10|string,0,,,,,,,32,0
 field = recordingId|13|idInt:recording,0,,,,,,,,0
 field = removeField|11|string,0,,,,,2,,,0
 field = responseTemplate|14|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|12|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 number = 1148
 returnType = recordingActionInternalList
   description = Retrieves the recording actions from the recording action table. All current operations that use recording actions require all of the actions to be retrieved at the same time, so this operation always returns all of the actions in  the table.
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = recordingId|,,Limits the search to an object with exactly the same value in this field.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = recordingActionInternalStore (NO)
 field = bodyId|1|idBody:body,1,1,low,,,,,,0
 field = endTime|2|dateTime,1,1,low,,,,,,0
 field = operation|3|enum:recordingOperation,1,1,low,,,,,,0
 field = recordingId|4|idInt:recording,1,1,low,,,,,,0
 field = startTime|5|dateTime,1,1,low,,,,,,0
 field = windowEndTime|6|dateTime,1,1,low,,,,,,0
 field = windowStartTime|7|dateTime,1,1,low,,,,,,0
 isFrozen = true
 number = 1149
 returnType = recordingActionInternal
   description = Stores a new or a modified recordingActionInternalobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.

********** operation = recordingFolderGenerate (NO)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 field = recordingId|2|idInt:recording,0,,,,,,,,0
 number = 464
 returnType = success
   description = Test hook to exercise the RecordingFolderGenerator class. Recording folders (and folder items) can be generated in one of two modes, batch and interactive, either of which can be invoked through this operation.  This operation provides a means for running the RFG independently to ensure that the objects used as input (recording folders and folder items, recordings and subscriptions) can be reliably pre-set before the testing.  Test setup is expected to be done before invoking this operation through various *Store operations, and the result of Recording Folder generation verified through *Search operations.  In batch operation, a RFG method is invoked (in non-test situations, this occurs automatically after the Scheduler has run) that causes the recording folder (items) to be reviewed and regenerated for all of the recordings for a given body. recordingFolderGenerate invokes the RFG object in this way when the operation is invoked without any recordingId fields.  In interactive operation, a RFG method is invoked (in non-test situations, this occurs within the "subscribe" operation if/when new recording objects have been generated) to review/verify folder(Item)s for only a specific set of the recordings for a given body.  recordingFolderGenerate invokes the RFG object in this way when the operation is invoked with one or more recordingId fields, and recordingFolder(Item)s are (re)generated only for the recordings specified.
   field = recordingId|,,If one or more recordingId's are supplied, recordingFolder(Item) objects will be generated/revised/removed only for those recordings.

********** operation = recordingFolderItemEmpty (YES)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 field = recordingFolderItemId|2|idInt:recordingFolderItem,1,,,,,,,,0
 number = 1717
 returnType = success
   description = Removes all the recordings in a folder.
   field = recordingFolderItemId|,,The id of the folder whose contents should be emptied.

********** operation = recordingFolderItemRemove (NO)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 field = recordingFolderItemId|2|idInt:recordingFolderItem,1,1,,,,,,,0
 isFrozen = true
 number = 467
 returnType = success
   description = Removes a recordingFolderItem object from the mind.

********** operation = recordingFolderItemSearch (YES)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = bodyId|3|idBody:body,1,1,,,,,,,0
 field = count|4|int,0,1,,1,,,1,,0
 field = excludeObjectIdAndType|18|long,0,,,,,,,,0
 field = flatten|23|boolean,0,1,,,,,,,0
 field = format|5|enum:format,0,1,,,,,,,0
 field = groupBy|6|string,0,,,,,,,32,0
 field = levelOfDetail|7|enum:levelOfDetail,0,1,,,,,,,0
 field = maxStartTime|8|dateTime,0,1,,,,,,,0
 field = note|9|string,0,,,,,,,,0
 field = objectIdAndType|19|long,0,,,,,,,,0
 field = offset|10|int,0,1,,0,,,,,0
 field = orderBy|11|string,0,,,,,,,32,0
 field = parentRecordingFolderItemId|12|idInt:recordingFolderItem,0,1,,,,,,,0
 field = playingOnly|25|boolean,0,1,,,,,,,0
 field = recordingFolderItemId|13|idInt:recordingFolderItem,0,1,,,,,,,0
 field = removeField|14|string,0,,,,,2,,,0
 field = resolveCount|20|int,0,1,,0,,,,,0
 field = resolveLevelOfDetail|21|enum:levelOfDetail,0,1,,low,,,,,0
 field = resolveOffset|22|int,0,1,,0,,,,,0
 field = responseTemplate|24|struct:responseTemplate,0,,,,,,,,0
 field = state|15|enum:recordingBodyState,0,,,,,,,,0
 field = topLevelOnly|16|boolean,0,1,,,,,,,0
 field = useAnchorOperation|17|boolean,0,1,,true,,,,,0
 fieldGroup = resolveSearchFields
 fieldGroup = searchFields
 number = 468
 orderBy = isInProgress
 orderBy = isSuggestion
 orderBy = startTime
 orderBy = title
 returnType = recordingFolderItemList
   description = Returns folderItems associated with a given folder id. Specify toplevel for items with no parent. Note: isInProgress and isSuggestion ordering are only supported on the client at this time...
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = bodyId|,,Limits the search to an object with exactly the same value in this field.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = excludeObjectIdAndType|,,An objectIdAndType from an idSequence obtained in a previous search operation, to be excluded from the result set.
   field = flatten|,,If true, a flat (non-grouped) list of all recordings will be returned.
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = maxStartTime|,,Earliest time when folder should be displayed. Modified when contents are removed.
   field = note|,,A request for the results to be annotated.
   field = objectIdAndType|,,Limits the search to an object with exactly the same value in this field.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = parentRecordingFolderItemId|,,Limits the search to an object with exactly the same value in this field.
   field = playingOnly|,,Restricts the search to the recording currently playing. Does not apply to resolve query.
   field = recordingFolderItemId|,,Limits the search to an object with exactly the same value in this field.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = resolveCount|,,If a format of (string)idSequence is specified, the count of objectIds that should be resolved into objects. Ignored unless format = (string)idSequence.
   field = resolveLevelOfDetail|,,If a format of (string)idSequence is specified, the levelOfDetail at which the objects should be resolved.  Ignored unless resolveCount > 0 and format = (string)idSequence.
   field = resolveOffset|,,If a format of (string)idSequence is specified, the offset into the objectId list that should be resolved into objects. Ignored unless resolveCount > 0 and format = (string)idSequence.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = topLevelOnly|,,Restricts the search to the toplevel folder. Only this or the parentRecordingFolderItemId field  should be set at the same time.
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = recordingFolderItemStore (NO)
 field = bodyId|1|idBody:body,1,1,low,,,,,,0
 field = childRecordingId|2|idInt:recording,0,1,low,,,,,,0
 field = collectionId|14|idLong:collection,0,1,low,,,,,,0
 field = collectionType|15|enum:collectionType,0,1,low,,,7,,,0
 field = contentId|18|idLong:content,0,1,low,,,,,,0
 field = folderInProgress|3|boolean,0,1,low,,,,,,0
 field = folderItemCount|4|int,0,1,low,,,,0,,0
 field = folderTransportType|11|enum:offerTransportType,0,,low,,,,,,0
 field = folderType|5|enum:folderType,0,1,low,,,,,,0
 field = newItems|12|int,0,1,low,,,,,,0
 field = parentRecordingFolderItemId|6|idInt:recordingFolderItem,0,1,medium,,,,,,0
 field = partnerId|16|idInt:partner,0,1,low,,,,,,0
 field = recordingFolderItemId|7|idInt:recordingFolderItem,0,1,low,,,,,,0
 field = recordingForChildRecordingId|8|struct:recording,0,1,low,,,7,,,1
 field = recordingStatusType|13|enum:recordingStatusType,0,1,low,,,,,,0
 field = startTime|9|dateTime,0,1,low,,,,,,0
 field = title|10|string,1,1,low,,,,,128,0
 field = transportType|17|enum:offerTransportType,0,1,low,,,,,,0
 isFrozen = true
 number = 469
 returnType = recordingFolderItem
   description = Stores a new or a modified recordingFolderItemobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = bodyId|,,Body the items belong to.
   field = childRecordingId|,,Id of recording specified by this item.
   field = collectionId|,,The globally unique ID for a collection.
   field = collectionType|,7,The type of the collection. One of: movie, series, song, special, webVideo, or other choices added in the future.
   field = contentId|,,ContentId for item
   field = folderInProgress|,,Are any of the contents currently recording?  This value is not in the Mind.  This will only be set when the recordingFolderItem is a folder.
   field = folderItemCount|,,Number of items contained in the folder.  This value is not in the Mind.  This will only be set when the recordingFolderItem is a folder.
   field = folderTransportType|,,If folderInProgress is true, this vector will contain the offerTransportType(s) of the child recording(s) in progress.
   field = folderType|,,The type of this folder.  This will contain enough information that will allow the UI display the correct icon.  This value will be filled in from the mind.  This will only be set when the recordingFolderItem is a folder.
   field = newItems|,,Specifies the number of children that are new (non-repeat).  If the item represents a single recording and that recording is new, the value will be 1.
   field = parentRecordingFolderItemId|,,Id of the folder containing this item. Missing for "top" folder. 
   field = recordingFolderItemId|,,Unique ID body of this item.
   field = recordingStatusType|,,Indicates what type of status icon the UI should use when displaying this item in a list.
   field = startTime|,,Start time of this item.  This value is not in the  Mind.
   field = title|,,Title for this recordingFolderItem.
   field = transportType|,,One of: cds, dod, mrv, partnerStream, ppv, stream, ttcb, vod, web, or other choices added in the future. 

********** operation = recordingRemove (NO)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 field = recordingId|2|idInt:recording,1,1,,,,,,,0
 field = recordingIdInBody|3|localId,0,1,,,,2,,,0
 isFrozen = true
 number = 471
 returnType = success
   description = Removes a recording object from the mind.
   project = recordingRemove|0|0|0|partner-subscribe

********** operation = recordingSearch (YES)
 field = addField|1|string,0,,,,,2,,,0
 field = advancedKeyword|2|boolean,0,1,,,,,,,0
 field = anchor|3|anchorDict,0,1,,,,,,,0
 field = assetId|4|idLong:asset,0,1,,,,,,,0
 field = bodyId|5|idBody:body,0,1,,,,,,,0
 field = categoryId|6|idLong:category,0,,,,,,,,0
 field = channel|7|struct:channel,0,1,,,,,,,0
 field = collectionId|8|idLong:collection,0,,,,,,,,0
 field = collectionType|72|enum:collectionType,0,,,,,,,,0
 field = contentId|9|idLong:content,0,,,,,,,,0
 field = correlatedCollectionId|10|idLong:collection,0,1,,,,,,,0
 field = count|11|int,0,1,,1,,,1,,0
 field = credit|12|struct:credit,0,,,,,,,,0
 field = creditKeyword|13|string,0,1,,,,,,100,0
 field = creditKeywordRole|87|enum:role,0,1,,,,,,,0
 field = descriptionKeyword|14|string,0,1,,,,,,100,0
 field = descriptionLanguage|84|string,0,1,,,,,,64,0
 field = descriptionPrefix|107|string,0,1,,,,,,100,0
 field = desiredState|15|enum:recordingMindState,0,,,,,,,,0
 field = ei|16|boolean,0,1,,,,,,,0
 field = episodeNum|75|int,0,1,,,3,,0,,0
 field = episodic|71|boolean,0,1,,,,,,,0
 field = excludeCollectionId|74|idLong:collection,0,,,,,,,,0
 field = excludeContentId|90|idLong:content,0,,,,,,,,0
 field = excludeObjectIdAndType|97|long,0,,,,,,,,0
 field = excludeSubscriptionType|17|enum:subscriptionType,0,1,,,,,,,0
 field = fallbackImageObjectType|106|enum:fallbackImageObjectType,0,1,,,,,,,0
 field = format|18|enum:format,0,1,,,,,,,0
 field = groupBy|19|string,0,,,,,,,32,0
 field = hasCorrelatedCollections|78|boolean,0,1,,,,,,,0
 field = hdtv|20|boolean,0,1,,,,,,,0
 field = idSetSource|94|union:idSetSource,0,1,,,3,,,,0
 field = imageRuleset|109|struct:imageRuleset,0,,,,,,,,0
 field = includeCreditsInKeywordSearch|86|boolean,0,1,,false,,,,,0
 field = includeMissingDependentObjects|88|boolean,0,1,,false,,,,,0
 field = includeOverridingCollections|85|boolean,0,1,,false,,,,,0
 field = includeOverridingContent|76|boolean,0,1,,false,,,,,0
 field = includePurchasableFrom|103|enum:mindClient,0,,,,,,,,0
 field = isAdult|21|boolean,0,1,,,,,,,0
 field = isSuggested|22|boolean,0,1,,,,,,,0
 field = keyword|23|string,0,1,,,,,,100,0
 field = levelOfDetail|24|enum:levelOfDetail,0,1,,,,,,,0
 field = lineup|25|struct:lineup,0,,,,,,,,0
 field = maxAvailableStartTime|26|dateTime,0,1,,,,,,,0
 field = maxCreateDate|79|dateTime,0,1,,,,,,,0
 field = maxEndTime|27|dateTime,0,1,,,,,,,0
 field = maxMpaaRating|81|enum:mpaaRating,0,1,,,,,,,0
 field = maxPrice|28|currency,0,1,,,,,,,0
 field = maxStartTime|29|dateTime,0,1,,,,,,,0
 field = maxStartTimeOffset|95|int,0,1,,,,,,,0
 field = maxTvRating|82|enum:tvRating,0,1,,,,,,,0
 field = maxUpdateDate|77|dateTime,0,1,,,,,,,0
 field = mimeSubtype|30|string,0,1,,,,,,128,0
 field = mimeTopLevelType|31|string,0,1,,,,,,128,0
 field = minAvailableEndTime|32|dateTime,0,1,,,,,,,0
 field = minCreateDate|80|dateTime,0,1,,,,,,,0
 field = minEndTime|33|dateTime,0,1,,,,,,,0
 field = minEndTimeOffset|96|int,0,1,,,,,,,0
 field = minPrice|34|currency,0,1,,,,,,,0
 field = minStarRating|92
 field = minStartTime|35|dateTime,0,1,,,,,,,0
 field = minUpdateDate|36|dateTime,0,1,,,,,,,0
 field = movieYear|73|int,0,1,,,,,1000,3000,0
 field = namespace|37|enum:namespace,0,1,,,,,,,0
 field = notCategoryId|105|idLong:category,0,,,,,,,,0
 field = note|38|string,0,,,,,,,,0
 field = objectIdAndType|98|long,0,,,,,,,,0
 field = offerId|39|idString:offer,0,,,,,,,,0
 field = offset|40|int,0,1,,0,,,,,0
 field = omitMpaaRating|41|enum:mpaaRating,0,,,,,,,,0
 field = omitState|42|enum:recordingBodyState,0,,,,,,,,0
 field = omitTvRating|43|enum:tvRating,0,,,,,,,,0
 field = orCredit|44|struct:credit,0,,,,,2,,,0
 field = orderBy|45|string,0,,,,,,,32,0
 field = partnerAssetId|91|string,0,1,,,,,,,0
 field = partnerCollectionId|46|string,0,1,,,,,,100,0
 field = partnerContentId|47|string,0,1,,,,,,100,0
 field = partnerId|48|idInt:partner,0,1,,,,,,,0
 field = partnerOfferId|49|string,0,,,,,,,100,0
 field = preview|108|boolean,0,1,,,,,,,0
 field = providerId|50|string,0,1,,,,2,,20,0
 field = recordingId|51|idInt:recording,0,1,,,,,,,0
 field = removeField|52|string,0,,,,,2,,,0
 field = repeat|83|boolean,0,1,,,,,,,0
 field = resolveCount|99|int,0,1,,0,,,,,0
 field = resolveLevelOfDetail|100|enum:levelOfDetail,0,1,,low,,,,,0
 field = resolveOffset|101|int,0,1,,0,,,,,0
 field = responseTemplate|93|struct:responseTemplate,0,,,,,,,,0
 field = searchable|53|boolean,0,1,high,,,,,,0
 field = seasonNumber|54|int,0,1,,,,,0,,0
 field = shortTitle|55|string,0,1,,,5,,,128,0
 field = skipPartnerExclusion|102|boolean,0,1,,,,,,,0
 field = startTime|56|dateTime,0,1,,,,,,,0
 field = state|57|enum:recordingBodyState,0,,,,,,,,0
 field = subscriptionId|58|idInt:subscription,0,1,,,,,,,0
 field = subscriptionType|59|enum:subscriptionType,0,1,,,,,,,0
 field = subtitle|104|string,0,1,,,,,,255,0
 field = subtitleKeyword|60|string,0,1,,,,,,100,0
 field = subtitlePrefix|61|string,0,1,,,,,,100,0
 field = title|62|string,0,1,,,,,,128,0
 field = titleKeyword|63|string,0,1,,,,,,128,0
 field = titlePrefix|64|string,0,1,,,,,,128,0
 field = transportSubset|65|anyDict,0,,,,,,,,0
 field = transportType|66|enum:offerTransportType,0,,,,,,,,0
 field = unreceivedChannelsOnly|89|boolean,0,1,,false,,,,,0
 field = url|67|url,0,1,high,,,,,,0
 field = useAnchorOperation|68|boolean,0,1,,true,,,,,0
 field = useDefaultTransportType|69|boolean,0,1,,true,,8,,,0
 field = useLineup|70|boolean,0,1,,,,,,,0
 fieldGroup = resolveSearchFields
 fieldGroup = searchFields
 fieldGroup = contentSearchFields
 fieldGroup = collectionSearchFields
 fieldGroup = offerSearchFields
 fieldGroup = imageRulesetFields
 groupBy = collectionId
 isFrozen = true
 number = 472
 orderBy = deletionTime
 orderBy = isInProgress
 orderBy = isSuggestion
 orderBy = startTime
 orderBy = subtitle
 orderBy = title
 returnType = recordingGroupList
   description = Note: isInProgress and isSuggestion ordering are only supported on the client at this time...
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = advancedKeyword|,,When searching with option=advanced, a boolean mode search is done where words starting with   are ANDed together, words starting with - are NOTd, words with * are substring matched, and words enclosed in "" are looked at as a phrase.  Currently not supported in contentSearch or collectionSearch
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = bodyId|,,Restricts the search to offers (or offered content) that is available on this body.  For bodies that sync with the mind, availability is based on the list of channels that the body has sent up.  Only channels that have isReceived=true are used.  For bodies that have not synced with the mind, availability is based on the lineup retrieved from the BSM, and all channels are used.  BodyId is also required to use the isSchedulable filter.
   field = categoryId|,,If multiple categoryIds are specified, they will be ANDed together in the query
   field = channel|,,Limits the search to an object with exactly the same value in this field.
   field = collectionType|,,Limits the search to an object with exactly the same value in this field.
   field = contentId|,,Limits the search to an object with exactly the same value in this field.
   field = correlatedCollectionId|,,Restricts the search to the collection ids correlated to this collection id.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = credit|,,Currently not supported in contentSearch. If multiple credits provided, they will be ORd
   field = creditKeyword|,,Currently not supported in contentSearch or collectionSearch
   field = creditKeywordRole|,,Only applies if a creditKeyword is passed in
   field = descriptionKeyword|,,Currently not supported in contentSearch or collectionSearch
   field = descriptionLanguage|,,Limits the search to an object with exactly the same value in this field.
   field = desiredState|,,OR
   field = ei|,,Only offers of EI (Educational and Informational) content are returned if this value is set to "true".  If this is set to "false", only non-EI content will be returned. If this is not set, both EI and non-EI content will be returned.
   field = episodeNum|3,,Limits the search to an object with exactly the same value in this field.
   field = episodic|,,constrains the result to only episodic collections if set to true and only non-episodic collections if set to false.
   field = excludeObjectIdAndType|,,An objectIdAndType from an idSequence obtained in a previous search operation, to be excluded from the result set.
   field = excludeSubscriptionType|,,Search for recordings excluding those of the specified type. Refer to subscriptionType above for definition of subscriptionType. Should not be used with subscriptionType at the same time. Mainly used to exclude suggestions.
   field = fallbackImageObjectType|,,If set, this object type will be used to replace the main object's image if the main object's image is not available based on the input ruleset
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = hasCorrelatedCollections|,,if TRUE, constrains the result set to only those that have correlation data available. FALSE is not supported.
   field = hdtv|,,Limits the search to an object with exactly the same value in this field.
   field = imageRuleset|,,one ruleset should be specified per image desired. multiple rulesets can be specified.
   field = includeCreditsInKeywordSearch|,,If set to true, the keyword filter will include credits in the search in addition title, subtitle and description
   field = includeMissingDependentObjects|,,allows one to specify, if offer search, should return offers that are missing depedent objects(like asset,content,collection etc.)
   field = includeOverridingCollections|,,When partners wish to author their own metadata for a collection object, while maintaining the link to the broadcast collection object, they store the original collectionId in the overriddenCollectionId field of the collection object. Passing true for this flag, along with a collectionId, will result in both the collectionId and the overriddenCollectionId fields to be searched. The result is that both the collection corresponding to the collectionId and any collections overriding that collection will be returned. Passing true for this flag without passing a collectionId is illegal.
   field = includeOverridingContent|,,When partners wish to author their own metadata for a content object, while maintaining the link to the broadcast content object, they store the original contentId in the overriddenContentId field of the content object. Passing true for this flag, along with a contentId, will result in both the contentId and the overriddenContentId fields to be searched. The result is that both the content corresponding to the contentId and any contents overriding that content will be returned. Passing true for this flag without passing a contentId is illegal.
   field = includePurchasableFrom|,,For CDS offers, filter by purchasableFrom field If this field is null, then do not apply filter 
   field = isAdult|,,Limits the search to an object with exactly the same value in this field.
   field = isSuggested|,,Restricts the search result to offers that are suggested based on predictive thumbs
   field = keyword|,,The keyword field is used to search through title, subtitle and description to find program matches.  The results are ordered in a way that makes sense.  Wildcards and double-quotes are supported.  Currently not supported in contentSearch or collectionSearch
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = lineup|,,Restricts the search to offers from the named lineup.
   field = maxAvailableStartTime|,,Returns offers whose availableStartTime is less than or equal to maxAvailableStartTime
   field = maxEndTime|,,Returns offers whose endTime is less than or equal to maxEndTime
   field = maxMpaaRating|,,filter out results whose mpaaRatings or tvRatings are "worse" than this mpaaRating.
   field = maxStartTime|,,Returns offers whose startTime is less than or equal to maxStartTime
   field = maxStartTimeOffset|,,maxStartTime N seconds in the future. Useful in storing as searchRequest
   field = maxTvRating|,,filter out results whose mpaaRatings or tvRatings are "worse" than this tvRating.
   field = mimeSubtype|,,not implemented
   field = mimeTopLevelType|,,not implemented
   field = minAvailableEndTime|,,Returns offers whose availableEndTime is greater than or equal to minAvailableEndTime
   field = minEndTime|,,Returns offers whose endTime is greater than or equal to minEndTime
   field = minEndTimeOffset|,,minEndTime N seconds in the future. Useful in storing as searchRequest
   field = minStartTime|,,Returns offers whose startTime is greater than or equal to minStartTime
   field = movieYear|,,Limits the search to an object with exactly the same value in this field.
   field = namespace|,,Which namespace to search in
   field = notCategoryId|,,Filter out results that contain any of the notCategoryIds present in the request.
   field = note|,,A request for the results to be annotated.
   field = objectIdAndType|,,Limits the search to an object with exactly the same value in this field.
   field = offerId|,,Limits the search to an object with exactly the same value in this field.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = omitMpaaRating|,,Offers with these mpaa ratings should not be returned.  This can be used to hide "adult" programs
   field = omitState|,,states that shouldn't be included, shouldn't be used with "state" at the same time
   field = omitTvRating|,,Offers with these TV Ratings should not be returned.  This can be used to hide "adult" programs
   field = orCredit|,2,Put this credit in an OR with other orCredits.  Currently not supported in contentSearch or collectionSearch
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = partnerCollectionId|,,Limits the search to an object with exactly the same value in this field.
   field = partnerContentId|,,Limits the search to an object with exactly the same value in this field.
   field = partnerId|,,Limits the search to an object with exactly the same value in this field.
   field = partnerOfferId|,,The partner's own offer Id.
   field = preview|,,A boolean indicating whether this offer search is for a preview offer.
   field = providerId|,2,Limits the search to an object with exactly the same value in this field.
   field = recordingId|,,Limits the search to an object with exactly the same value in this field.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = resolveCount|,,If a format of (string)idSequence is specified, the count of objectIds that should be resolved into objects. Ignored unless format = (string)idSequence.
   field = resolveLevelOfDetail|,,If a format of (string)idSequence is specified, the levelOfDetail at which the objects should be resolved.  Ignored unless resolveCount > 0 and format = (string)idSequence.
   field = resolveOffset|,,If a format of (string)idSequence is specified, the offset into the objectId list that should be resolved into objects. Ignored unless resolveCount > 0 and format = (string)idSequence.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = searchable|,,Limits the search to an object with exactly the same value in this field.
   field = seasonNumber|,,Limits the search to an object with exactly the same value in this field.
   field = shortTitle|5,,Limits the search to an object with exactly the same value in this field.
   field = skipPartnerExclusion|,,Skip partnerExclusion check of offers even if they are passed in request. Used only internally for some special cases. For example, when body excludes a partner from the screen, but later schedules a download from that partner's web site. 
   field = startTime|,,Limits the search to an object with exactly the same value in this field.
   field = state|,,OR
   field = subscriptionType|,,Search for recordings of the specified subscription type. If a recording is associated with multiple subscriptions, its subscription type is determined by the first one in the subscriptionIdentifier list, i.e. the one directly triggered the recording. This is mainly used for searching for suggestions.
   field = subtitle|,,Limits the search to an object with exactly the same value in this field.
   field = subtitleKeyword|,,Currently not supported in contentSearch or collectionSearch
   field = title|,,Limits the search to an object with exactly the same value in this field.
   field = transportSubset|,,Search a subset of the dictionary that defines the transport.  Only offers whose transport dictionaries contain all of the things in this dictionary will be returned.  If multiple transports are specified, they will be ORd together.
   field = unreceivedChannelsOnly|,,if TRUE, constrain the result set to unreceived channels for the bodyId. if FALSE, search for both received channels and unreceived channels.
   field = url|,,Limits the search to an object with exactly the same value in this field.
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   field = useDefaultTransportType|,8,mind9 and forward will require a transportType. previous versions don't, so we'll use this to allow them to continue not requiring one, while allowing a way for us to start requiring one with mind9
   field = useLineup|,,forces query to use headend and lineup instead of custom channel list
   fieldProject = advancedKeyword|0|0|0|partner-schedule
   fieldProject = assetId|0|0|0|hme-cds,partner-cds
   fieldProject = bodyId|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = categoryId|0|0|0|partner-schedule
   fieldProject = channel|0|0|0|partner-schedule,partner-subscribe
   fieldProject = collectionId|0|0|0|partner-schedule
   fieldProject = contentId|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = count|0|0|0|all
   fieldProject = credit|0|0|0|partner-schedule
   fieldProject = creditKeyword|0|0|0|partner-schedule
   fieldProject = creditKeywordRole|0|0|0|partner-schedule
   fieldProject = descriptionKeyword|0|0|0|partner-schedule
   fieldProject = descriptionLanguage|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = desiredState|0|0|0|partner-subscribe
   fieldProject = episodeNum|0|3|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = episodic|0|0|0|partner-cds
   fieldProject = excludeSubscriptionType|0|0|0|partner-subscribe
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = hdtv|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = includeCreditsInKeywordSearch|0|0|0|partner-schedule
   fieldProject = keyword|0|0|0|partner-schedule
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = lineup|0|0|0|partner-schedule
   fieldProject = maxAvailableStartTime|0|0|0|hme-cds
   fieldProject = maxEndTime|0|0|0|partner-schedule,partner-subscribe
   fieldProject = maxStartTime|0|0|0|partner-schedule,partner-subscribe
   fieldProject = minAvailableEndTime|0|0|0|hme-cds
   fieldProject = minEndTime|0|0|0|partner-schedule,partner-subscribe
   fieldProject = minStartTime|0|0|0|partner-schedule,partner-subscribe
   fieldProject = movieYear|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = namespace|0|0|0|partner-schedule,partner-cds,partner-subscribe
   fieldProject = offerId|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = offset|0|0|0|all
   fieldProject = omitMpaaRating|0|0|0|partner-schedule,partner-subscribe
   fieldProject = omitState|0|0|0|partner-subscribe
   fieldProject = omitTvRating|0|0|0|partner-schedule,partner-subscribe
   fieldProject = orderBy|0|0|0|all
   fieldProject = partnerAssetId|0|0|0|hme-cds,partner-cds
   fieldProject = partnerCollectionId|0|0|0|partner-cds
   fieldProject = partnerContentId|0|0|0|partner-cds
   fieldProject = partnerId|0|0|0|hme-cds,partner-cds
   fieldProject = partnerOfferId|0|0|0|hme-cds,partner-cds
   fieldProject = recordingId|0|0|0|partner-subscribe
   fieldProject = responseTemplate|0|0|0|all
   fieldProject = searchable|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = seasonNumber|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = startTime|0|0|0|partner-schedule,partner-subscribe
   fieldProject = state|0|0|0|partner-subscribe
   fieldProject = subscriptionId|0|0|0|partner-subscribe
   fieldProject = subscriptionType|0|0|0|partner-subscribe
   fieldProject = subtitle|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = subtitleKeyword|0|0|0|partner-schedule
   fieldProject = title|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = titleKeyword|0|0|0|partner-schedule,partner-cds,partner-subscribe
   fieldProject = titlePrefix|0|0|0|partner-schedule,partner-cds,partner-subscribe
   fieldProject = transportType|0|0|0|hme-cds,partner-cds
   project = recordingSearch|0|0|0|partner-subscribe

********** operation = recordingStateEventRegister (NO)
 number = 476
 returnType = recordingStateEvent
   description = Registers for recordingStateEvent events, which report when recordings begin or end on the foreground or background tuner. After sending this action, a recordingStateEvent event will be received immediately to describe the current state of recording on the foreground tuner, and an additional event will be received immediately to describe the current state of recording on the background tuner, and additionally a recordingStateEvent event will be received whenever the recording state changes on either tuner.

********** operation = recordingStore (NO)
 field = actualEndTime|1|dateTime,0,1,medium,,4,,,,0
 field = actualStartTime|2|dateTime,0,1,medium,,4,,,,0
 field = advisory|3|struct:advisory,0,,high,,,2,,,0
 field = assetForAssetId|4|struct:asset,0,1,low,,,7,,,1
 field = assetTagForAssetId|132|struct:assetTag,0,1,low,,,7,,,1
 field = audioDuration|5|int,0,1,low,,,2,0,,0
 field = audioLanguage|115|string,0,,low,,,7,,26,0
 field = audioLanguageFriendlyName|116|string,0,,high,,,7,,,0
 field = autoOverriddenCollectionId|130|idLong:collection,0,1,low,,,8,,,0
 field = autoOverriddenContentId|120|idLong:content,0,1,low,,,8,,,0
 field = availableCorrelatedCollectionForCollectionId|150|struct:collection,0,,low,,,7,,,1
 field = availableEndTime|6|dateTime,0,1,medium,,,7,,,0
 field = availableStartTime|7|dateTime,0,1,medium,,5,7,,,0
 field = bodyData|8|string,0,1,low,,5,,,255,0
 field = bodyId|9|idBody:body,1,1,low,,,,,,0
 field = bookmarkPosition|10|int,0,1,medium,,,,0,,0
 field = broadbandOfferGroupForCollectionId|113|struct:offerGroup,0,,low,,,7,,,1
 field = broadbandOfferGroupForContentId|124|struct:offerGroup,0,,low,,,7,,,1
 field = broadcastOfferGroupForCollectionId|114|struct:offerGroup,0,,low,,,7,,,1
 field = broadcastOfferGroupForContentId|125|struct:offerGroup,0,,low,,,7,,,1
 field = cancellationReason|11|enum:cancellationReason,0,1,medium,,3,,,,0
 field = cancellationTime|12|dateTime,0,1,medium,,3,,,,0
 field = captionLanguage|117|string,0,,low,,,7,,26,0
 field = captionLanguageFriendlyName|118|string,0,,high,,,7,,,0
 field = captioning|13|boolean,0,1,medium,,,2,,,0
 field = category|14|struct:category,0,,high,,,7,,,0
 field = cc|15|boolean,0,1,high,,,7,,,0
 field = cdsOfferForCollectionId|16|struct:offer,0,,low,,,7,,,1
 field = channel|17|struct:channel,0,1,low,,,,,,0
 field = checksum|134|string,0,1,low,,,7,,64,0
 field = collectionDescription|151|string,0,1,medium,,,,,,0
 field = collectionId|18|idLong:collection,0,1,low,,,,,,0
 field = collectionTitle|146|string,0,1,medium,,,,,128,2
 field = collectionType|19|enum:collectionType,0,1,low,,,7,,,0
 field = colorType|20|enum:colorType,0,1,medium,,,7,,,0
 field = conflictRecordingId|21|idInt:recording,0,,medium,,5,,,,0
 field = contentForContentId|121|struct:content,0,1,low,,,7,,,1
 field = contentId|22|idLong:content,0,1,low,,,,,,0
 field = contentType|23|enum:contentType,0,1,low,video,,,,,0
 field = correlatedCollectionForCollectionId|24|struct:collection,0,,low,,,7,,,1
 field = credit|25|struct:credit,0,,high,,,7,,,0
 field = currency|158|enum:currencyType,0,1,medium,,,,,,0
 field = debugDetails|26|string,0,1,high,,,7,,255,0
 field = deletionPolicy|27|enum:deletionPolicy,0,1,low,,,,,,0
 field = deletionReason|28|enum:deletionReason,0,1,medium,,,,,,0
 field = deletionTime|29|dateTime,0,1,medium,,3,,,,0
 field = deploymentTargetId|145|idLong:deploymentTarget,0,1,low,,,,,,0
 field = description|30|string,0,1,medium,,,,,4096,0
 field = descriptionLanguage|129|string,0,1,medium,,,7,,64,0
 field = desiredDeletion|136|dateTime,0,1,low,,,,,,0
 field = desiredState|31|enum:recordingMindState,0,1,low,,,,,,0
 field = diskPartition|32|enum:diskPartition,0,1,medium,,,,,,0
 field = displayRank|33|int,0,1,medium,,,,0,,0
 field = dolbyDigital|34|boolean,0,1,medium,,,7,,,0
 field = drm|35|struct:drm,0,1,medium,,,7,,,0
 field = duration|36|int,0,1,low,,,2,0,,0|int,0,1,low,,3,,0,,0
 field = endTimeClippingRecordingId|102|idInt:recording,0,1,medium,,5,,,,0
 field = endTimePadding|37|int,0,1,medium,,,3,,,0
 field = entitlement|147|enum:entitlement,0,1,low,,,,,,0
 field = episodeNum|38|int,0,,low,,3,,0,,0
 field = episodic|39|boolean,0,1,low,,,,,,0
 field = expectedDeletion|40|dateTime,0,1,low,,,,,,0
 field = hasAudioDescription|137|boolean,0,1,medium,,,,,,0
 field = hasCaption|138
 field = hasSignLanguage|139|boolean,0,1,medium,,,,,,0
 field = hdtv|41|boolean,0,1,low,false,,,,,0
 field = height|42|int,0,1,low,,,7,0,,0
 field = image|105|struct:image,0,,medium,,,,,,0
 field = imageUrl|43|imageUrl,0,1,medium,,,8,,,0
 field = internalCollectionId|153|idLong:collection,0,1,high,,,,,,0
 field = internalCollectionIdOrigin|154|enum:internalIdOrigin,0,1,high,,,,,,0
 field = internalContentId|155|idLong:content,0,1,high,,,,,,0
 field = internalContentIdOrigin|156|enum:internalIdOrigin,0,1,high,,,,,,0
 field = internalRating|159|struct:internalRating,0,,low,,,,,,0
 field = isAdult|44|boolean,0,1,low,,,,,,0
 field = isBlocked|160|boolean,0,1,low,,,,,,0
 field = isCatchup|140|boolean,0,1,medium,,,,,,0
 field = isEpisode|45|boolean,0,1,low,,,,,,0
 field = isPpv|46|boolean,0,1,low,,,5,,,0
 field = isProgramBreak|141|boolean,0,1,medium,,,,,,0
 field = isThreeD|157|boolean,0,1,medium,,,,,,0
 field = live|122|enum:live,0,1,medium,,5,7,,,0
 field = mimeType|47|string,0,1,low,video/mpg2,,,,20,0
 field = mixApplicationInfoForCollectionId|107|struct:mixApplicationInfo,0,,low,,,7,,,1
 field = mixApplicationInfoForContentId|108|struct:mixApplicationInfo,0,,low,,,7,,,1
 field = mixApplicationInfoForOfferId|109|struct:mixApplicationInfo,0,,low,,,7,,,1
 field = mixForParentMixId|110|struct:mix,0,1,high,,,7,,,1
 field = mixForRootMixId|111|struct:mix,0,1,high,,,7,,,1
 field = mixForSubscribableMixId|112|struct:mix,0,,high,,,7,,,1
 field = mostRecentDownloadForOfferId|128|struct:download,0,1,medium,,,7,,,1
 field = movieYear|48|int,0,1,low,,,,1000,3000,0
 field = mpaaRating|49|enum:mpaaRating,0,1,medium,,,,,,0
 field = noGiftCardPurchase|135|boolean,0,1,low,false,,7,,,0
 field = offerDescription|50|string,0,1,medium,,,2,,4096,0
 field = offerId|51|idString:offer,0,1,low,,,,,,0
 field = offerUrl|52|string,0,1,medium,,,2,,128,0
 field = originalAirdate|53|date,0,1,medium,,,,,,0
 field = overriddenCollectionId|131|idLong:collection,0,1,low,,,8,,,0
 field = overriddenContentId|119|idLong:content,0,1,low,,,8,,,0
 field = partCount|142|int,0,1,medium,,,,,,0
 field = partNumber|143|int,0,1,medium,,,,,,0
 field = partnerCollectionId|54|string,0,1,low,,,7,,100,0
 field = partnerContentId|55|string,0,1,low,,,7,,100,0
 field = partnerId|56|idInt:partner,0,1,low,,,7,,,0
 field = partnerInfo|106|struct:partnerInfo,0,1,high,,,7,,,1
 field = partnerOfferId|57|string,0,1,low,,,7,,100,0
 field = partnerStationId|152
 field = popularityRank|100|int,0,1,low,,,7,,,0
 field = previewAssetIdForOfferId|149|idLong:asset,0,1,low,,,7,,,1
 field = previewOfferForOfferId|148|struct:offer,0,1,low,,,7,,,1
 field = price|58|currency,0,1,medium,,,,,,0
 field = providerId|59|string,0,1,medium,,,2,,20,0
 field = purchasableFrom|60|enum:mindClient,0,,low,,,7,,,0
 field = quality|123|enum:recordingQualityLevel,0,1,high,,,,,,0
 field = rating|61|struct:rating,0,,high,,,2,,,0|union:typedRating,0,,high,,7,7,,,0
 field = recordedContentId|133|long,0,1,high,,,,,,0
 field = recordingForContentId|104|struct:recording,0,,low,,,7,,,1
 field = recordingForOfferId|62|struct:recording,0,,low,,,7,,,1
 field = recordingId|63|idInt:recording,0,1,low,,,,,,0
 field = recordingIdInBody|64|localId,0,1,high,,,2,,,0
 field = recordingInConflict|65|struct:recording,0,,medium,,,7,,,1
 field = recordingStartTime|66|dateTime,0,1,medium,,,3,,,0
 field = recordingStopTime|67|dateTime,0,1,medium,,,3,,,0
 field = releaseDate|101|dateTime,0,1,medium,,,7,,,0
 field = relevance|68|int,0,1,low,,3,7,0,,0
 field = repeat|69|boolean,0,1,low,,,7,,,0
 field = requestedEndPadding|70|int,0,1,low,,4,,,,0
 field = requestedEndTime|71|dateTime,0,1,low,,4,,,,0
 field = requestedStartPadding|72|int,0,1,low,,4,,,,0
 field = requestedStartTime|73|dateTime,0,1,low,,4,,,,0
 field = scheduledDownloadForContentId|126|struct:download,0,,low,,,7,,,1
 field = scheduledEndTime|74|dateTime,0,1,low,,4,,,,0
 field = scheduledStartTime|75|dateTime,0,1,low,,4,,,,0
 field = screenFormat|76|enum:screenFormat,0,1,medium,,,7,,,0
 field = searchable|77|boolean,0,1,high,,,,,,0
 field = seasonNumber|78|int,0,1,low,,,,0,,0
 field = shortTitle|79|string,0,1,low,,5,,,128,0
 field = size|80|int,0,1,medium,,,,0,,0
 field = starRating|81|enum:starRating,0,1,high,,,,,,0
 field = startTime|82|dateTime,0,1,low,,,,,,0
 field = startTimeClippingRecordingId|103|idInt:recording,0,1,medium,,5,,,,0
 field = startTimePadding|83|int,0,1,medium,,,3,,,0
 field = state|84|enum:recordingBodyState,0,1,low,,,,,,0
 field = subscribable|85|boolean,0,1,low,,4,7,,,0
 field = subscriptionForCollectionIdAndChannel|86|struct:subscription,0,,medium,,5,7,,,1
 field = subscriptionForOfferId|127|struct:subscription,0,,medium,,,7,,,1
 field = subscriptionId|87|idInt:subscription,0,,high,,,4,,,0
 field = subscriptionIdentifier|88|struct:subscriptionIdentifier,0,,low,,5,,,,0
 field = subscriptionType|89|enum:subscriptionType,0,1,low,,3,4,,,0
 field = subtitle|90|string,0,1,low,,,,,255,2
 field = suggestionScore|91|int,0,1,low,,,7,,,0
 field = title|92|string,0,1,low,,,,,128,2
 field = totalDuration|144|int,0,1,medium,,,,,,0
 field = transport|93|union:transport,0,,medium,,,,,,0
 field = transportType|94|enum:offerTransportType,0,1,low,,,,,,0
 field = tvAdvisory|95|enum:tvAdvisory,0,,medium,,,7,,,0
 field = tvRating|96|enum:tvRating,0,1,medium,,,,,,0
 field = userContentForCollectionId|97|struct:userContent,0,1,low,,,7,,,1
 field = watchedTime|98|int,0,1,medium,,3,,0,,0
 field = width|99|int,0,1,low,,,7,0,,0
 isFrozen = true
 number = 477
 returnType = recording
   description = Stores a new or a modified recordingobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = actualEndTime|4,,Time that this recording ended.  Only used for recordings in the inProgress state and on.  Once a recording ends, the planned end time doesn't matter and the actualEndTime field contains the time that the recording actually ended.  This field is only set by the body.
   field = actualStartTime|4,,Time that this recording started.  Only used for recordings in the inProgress state and on.  Once a recording starts, the planned start time doesn't matter and the actualStartTime field contains the time that the recording actually started.  This field is only set by the body.
   field = advisory|,2,Single catch-all advisory for offers/content/collection. We'll fill it in with as much detail as we have depending on the object type. OBSOLETE: Please do not use this. Use the tvAdvisory enum in the offer object instead. Contact us if tvAdvisory does not solve your issue.
   field = audioDuration|,2,The duration of the content.  XXX the name of this field is assymetric with the "duration" field in videoContent. The schema checking requires that they be different.  Should we change the one in videoContent?  Should we make yet another field group to hold duration?  Should we move duration up to content?  The field audioDuration was moved to the duration field in content in mind3.
   field = audioLanguage|,7,the RFC 3066 identifier for the audio language of the offer
   field = audioLanguageFriendlyName|,7,the audio language of the offer
   field = autoOverriddenCollectionId|,8,If this service has determined that this collection overrides another, this field is used to hold the original collectionId. If overriddenCollectionId is set, this field is ignored.
   field = autoOverriddenContentId|,8,If this service has determined that this content overrides another, this field is used to hold the original contentId. If overriddenContentId is set, this field is ignored.
   field = availableEndTime|,7,Indicates what date the offer is no longer available for viewing.
   field = availableStartTime|5,7,Indicates what date the offer becomes available for viewing.
   field = bodyData|5,,This field is set by the body only. An optional field exclusively owned by the body. Body may use it to store some information that is used on the body only, e.g. an ID used by lower layer, up to 255 bytes.
   field = bodyId|,,The body where this recording object exists.
   field = bookmarkPosition|,,An offset, in milliseconds, into the content
   field = broadbandOfferGroupForContentId|,7,XXX: This should be added to contentFields instead; however NPE would occur in MindObjectGenerator if defined that way.
   field = broadcastOfferGroupForContentId|,7,XXX: This should be added to contentFields instead; however NPE would occur in MindObjectGenerator if defined that way.
   field = cancellationTime|3,,time when the recording was cancelled
   field = captionLanguage|,7,the RFC 3066 indentifier for the language of the captions (aka subtitles) for the offer.
   field = captionLanguageFriendlyName|,7,the language of the captions (aka subtitles) for the offer.
   field = captioning|,2,True for video content that has Closed Captioning.  The default value is false.  This field was removed in mind3 because the captioning flag belongs on the offer, not the content.
   field = category|,7,Single catch-all category for offers/content/collection. We'll fill it in with as much detail as we have depending on the object type
   field = channel|,,The channel where this offer is broadcast.  For offers whose transportType is "stream" or "dod", this field should always be set.
   field = checksum|,7,This field stores the checksum of all of the metadata attributes of this object.
   field = collectionDescription|,,The collection's description.
   field = collectionId|,,The globally unique ID for a collection. Collection objects retrieved from the mind will always have a collection id.  Collections that are created by other parties and are included in content or recording objects may not have collection ids.
   field = collectionTitle|,,The primary title by which the corresponding collection is known. This field may be useful when the collection's title is different than that of the content.  Otherwise, the "title" and "collectionTitle" fields will typically be the same.
   field = conflictRecordingId|5,,ID of the recording that caused this recording to be cancelled or deleted
   field = contentId|,,The globally unique ID for a content.
   field = debugDetails|,7,Debugging information about interesting and unexpected things that have happened to this recording.  The string is a human-readable string of unspecified format.  This string is set when: <ul> <li> The mind schedules a recording, but the body is unable to comply. </ul>
   field = deletionPolicy|,,The deletion policy for this recordings.  If this is set to whenSpaceNeeded, the recording can be deleted when space is needed. If this is set to neverDelete, the body should attempt to not delete this recording.  If this is not set, the default value of whenSpaceNeeded should be used.  In the case it's set to specificDate, the date the user chose will be specified in the desiredDeletion field.  This recording may be required to be deleted prior to the date specified here for drm requirements.  This will be specified in the drm attribute.
   field = deletionTime|3,,time when the recording was removed
   field = description|,,A description of the content.
   field = descriptionLanguage|,7,The language that the description is written in
   field = desiredDeletion|,,When did the user request that this content should be considered for deletion.  If the deletionPolicy is specificDate, this field should be present.  This is not to be confused with the expectedDeletion field, which specifies when the scheduler will actually delete the recording.
   field = desiredState|,,The desired state of this recording, according to the Mind. The body uses this when determining the setting of the state (recordingBodyState) of this recording.  See <a href="https://bigbook.tivo.com/index/TrioSeries2"> Scheduling and Recording </a> for more information.
   field = diskPartition|,,This attribute controls which disk partition on the client this offer should be stored on
   field = displayRank|,,defines an arbitrary rank for display
   field = dolbyDigital|,7,True for audio content that has a Dolby Digital track.  The default value is false.
   field = duration|,2,The duration of the content (in seconds).  Moved to contentFields in mind3.|3,,The duration of the content (in seconds)
   field = endTimeClippingRecordingId|5,,ID of the recording that caused this recording to be clipped at the end
   field = endTimePadding|,3,Number of seconds after the end time of the showing to continue recording.  This allows the viewer to compensate when stations don't keep exact time.  If negative, it makes the recording end early.  If missing, acts as though it were 0.  This field is owned by the scheduler, which may be in the mind or in the body.  XXX Do we need this field?  The information is in the subscription, and will be copied here from there.  The recordingStartTime and recordingEndTime are what the body uses during recording.
   field = entitlement|,,The user's current entitlement to this offer, it can change with purchases or other tiering adjustments.
   field = episodeNum|3,,The episode number of the content.  This field has a maxOccurs=unbounded, because sometimes episodes are split up into multiple parts, each with their own episode numbers and then re-broadcast as a single episode.  The rebroadcast will contain the episode numbers of all of the parts.
   field = episodic|,,This flag defines whether or not a series is episodic. If it is a 1 or not set it is assumed to be an episodic series. If it is a 0 then it is a non-episodic series such as a movie or special.
   field = expectedDeletion|,,When is this content expected to be deleted.  This may happen for many reasons.  If there is no expected expiration time or if we don't know what it would be, this will be missing.
   field = hasAudioDescription|,,Audio description: an additional commentary describes body language, expressions and movements - allowing you to hear  what you might not be able to see, so you don't miss a  thing.
   field = height|,7,Height of image, in pixels.
   field = image|,,Image metadata for this collection
   field = imageUrl|,8,Image URL associated with this collection
   field = internalCollectionId|,,Id field used internally to dedupe collections. It stores the now obsolete overriddenCollectionId or autoOverriddenCollectionId if one of them is set, or collectionId otherwise;
   field = internalCollectionIdOrigin|,,Origin of the internalCollectionId, which is used  to dedupe collections that point to the same pgd collection.
   field = internalContentId|,,Id field used internally to dedupe contents. It stores the now obsolete overriddenContentId or autoOverriddenContentId if one of them is set, or contentId otherwise;
   field = internalContentIdOrigin|,,Origin of the internalContentId, which is used  to dedupe contents that point to the same pgd content.
   field = isAdult|,,Whether or not this offer is considered adult content by the TiVo Service as defined by the following policy:  The offer is considered adult content if any of the following are true: <ul> <li>the mpaaRating attribute is nc17 <li>the mpaaRating attribute is ao <li>the vodRating attribute is x <li>the vodRating attribute is xx <li>the vodRating attribute is xxx <li>the vodRating attribute is nrAdult <li>the offer is part of the adult category </ul>
   field = isBlocked|,,Is this offer blocked via Parental Controls?
   field = isCatchup|,,The showing will be recorded and available in catch up TV.
   field = isEpisode|,,This flag is set when this program object refers to a specific "episode", a specific content stream. When set, every showing of this program has exactly the same content. Sometimes there are programs (like All My Children) where there is no info about each episode, and one content object is used for all episodes; such programs do not have this flag set.  If this flag is set, TiVo will not record this program more than once, because recording the same content twice would just waste disk space.
   field = isPpv|,5,This flag indicates that the offer is a PPV offer.  If this is set to true, the price of the PPV is specified in the price attribute.  If this is not set, this defaults to "false" If this is set to "true", and the price attribute is not set, this is a PPV, and the price is unknown.  Removed this field in mind 6.  You can now find out whether an offer isPpv by looking at the transportType.
   field = isProgramBreak|,,The program is a program break that splits another program into two parts.
   field = live|5,7,Defines how live the offer is, from broadcast while  it is happening to playing something that happened in the  past. TMS definition of field: Designates whether a sports  event is being played live, same-day delay, or taped  prior to the air date.
   field = mimeType|,,What format the content is in.  Might be different than offer.mimeType if transcoding happened during (or after) capture.
   field = mixForParentMixId|,7,container for the parent mix, when the mixForParentMixId note is specified.
   field = mixForRootMixId|,7,container for the root mix, when the mixForRootMixId note is specified.
   field = mixForSubscribableMixId|,7,container for a subscribable mix, when the mixForSubscribableMixId note is specified.
   field = movieYear|,,The year the movie came out
   field = noGiftCardPurchase|,7,if true, purchase must be made with a real customer funding source, store credit may not be used to purchase this offer.
   field = offerDescription|,2,A description of the offer.  May include details about price, availability, quality, etc.  May be different that the title of the content that is offered.
   field = offerId|,,Globally unique identifier for this offer.  This field is always set for an offer, but offer fields are included in recording, which may not have an offerId, so the minOccurs here is 0.
   field = offerUrl|,2,URL for getting the content.  Removed in mind3.  We plan on using a transport dictionary as a replacement for this field to store transport-specific stuff like channel, time, etc.
   field = originalAirdate|,,The date when the content of this offer first airs.
   field = overriddenCollectionId|,8,If this collection overrides another, use this field to hold the original collectionId. This is used when partners wish to author their own metadata for a collection object, while maintaining the link to the broadcast collection object, for searches.
   field = overriddenContentId|,8,If this content overrides another, use this field to hold the original contentId. This is used when partners wish to author their own metadata for a content object, while maintaining the link to the broadcast content object, for searches.
   field = partCount|,,Total number of parts.
   field = partNumber|,,Which part of a split program this offer belongs to.
   field = partnerCollectionId|,7,The partner's own collection Id.
   field = partnerContentId|,7,The partner's own content Id.
   field = partnerId|,7,Id of the partner that created the object.
   field = partnerInfo|,7,a container for the partnerInfoForPartnerId annotation
   field = partnerOfferId|,7,The partner's own offer Id.
   field = popularityRank|,7,This field represents an arbitrary popularity rank associated with this item.  It currently only applies to historic broadcast collectionSearch and is calculated based on seasonPassRanking
   field = previewAssetIdForOfferId|,7,Holds the previewAssetIdForOfferId note.
   field = previewOfferForOfferId|,7,Holds the previewOfferForOfferId note.
   field = price|,,How much does it cost? US Dollars, for now. If price is not present, it means "don't know"  XXX x18n
   field = providerId|,2,who is providing the content?  is this a response group? (XXX should this be a dict?)
   field = purchasableFrom|,7,Indicates which mind clients this offer can be purchased from
   field = quality|,,The quality setting that was used for this recording
   field = rating|,2,The ratings of this collection. OBSOLETE: Please do not use this. Use the mpaaRating and starRating enums in the content object instead. Contact us if that does not solve your issue.|7,7,Typed rating.
   field = recordedContentId|,,Used internally by the server.  This is the recordedContentId that identifies the row in the trio.recordedContent table that provides the content for this recording.  Declared here so that this value can be stored in the  RecordingMindObject when a recording is constructed.
   field = recordingForContentId|,7,Holds the recordingForContentId note.
   field = recordingForOfferId|,7,Holds the recordingForOfferId note.
   field = recordingId|,,Unique ID of this recording.  Unique within one body.
   field = recordingIdInBody|,2,The ID for these recordings, unique within the one body.
   field = recordingInConflict|,7,hold the recordingInConflict note
   field = recordingStartTime|,3,Time that this recording should or did start.  For recordings that are recording standard broadcast television (type "stream"), this field should always be set: the scheduler sets it when the recording is scheduled, and the body updates it based on the actual time.  For CDS downloads, it is never set: the scheduler doesn't say when it should start, and the body doesn't set it based on actual times.  For VOD recordings, we haven't decided what to do yet.  For recordings that haven't started yet (i.e., recordings in state "scheduled"), this field is owned by the scheduler. If the body has a scheduler, the body owns the field.  If the body has no scheduler, the mind owns the field.  In these cases, the recordingStartTime is the time that the recording is planned to start.  For recordings that have started (i.e., recordings is states "inProgress", "completed", and "deleted"), this field is owned by the recording engine in the body and holds the time that the recording actually started.
   field = recordingStopTime|,3,Time that this recording should  or did stop.  For recordings that are recording standard broadcast television (type "stream"), this field should always be set: the scheduler sets it when the recording is scheduled, and the body updates it based on the actual time.  For CDS downloads, it is never set: the scheduler doesn't say when it should start, and the body doesn't set it based on actual times.  For VOD recordings, we haven't decided what to do yet.  For recordings that haven't ended yet (i.e., recordings in states "scheduled" or "inProgress"), this field is owned by the scheduler.  If the body has a scheduler, the body owns the field.  If the body has no scheduler, the mind owns the field.  In these cases, the recordingStartTime is the time that the recording is planned to start.  For recordings that have ended (i.e., recordings is states "completed", and "deleted"), this field is owned by the recording engine in the body and holds the time that the recording actually started.
   field = releaseDate|,7,The date that this content was released by the content owner for public consumption
   field = relevance|3,7,The relevance value of this result in the offer list. The lowest number is the most relevant.  The relevance order is determined by the UE Spec and can be viewed here: https://bigbook/index/TrioKeywordSearch  CAUTION: This value is only used internally by the anchor operation. It should not be used for any other purpose. The level of detail is low, because a mobile app can use anchoring on keyword searches and the anchoring operation needs to know the relevance of the anchor.
   field = repeat|,7,This flag designates whether the program has aired previously
   field = requestedEndPadding|4,,The number of seconds of padding that the user requested when setting up the recording.  May be different that the scheduled padding because of trade-offs made by the scheduler.  This field is set by the scheduler at the time the recording is created, based on the requests made by the user in the subscription. 
   field = requestedEndTime|4,,Time that the user wants the recording to stop.  May be different that the scheduler stop time because of trade-offs made by the scheduler.  This field is set by the scheduler at the time the recording is created, based on the requests made by the user in the subscription. 
   field = requestedStartPadding|4,,The number of seconds of padding that the user requested when setting up the recording.  May be different that the scheduled padding because of trade-offs made by the scheduler.  This field is set by the scheduler at the time the recording is created, based on the requests made by the user in the subscription. 
   field = requestedStartTime|4,,Time that the user wants the recording to start.  May be different that the scheduler start time because of trade-offs made by the scheduler.  This field is set by the scheduler at the time the recording is created, based on the requests made by the user in the subscription. 
   field = scheduledEndTime|4,,Time that this recording is planned to stop.  This time is normally the same as (requestedEndTime   requestedEndPadding), but may be different because of scheduling constraints.  Only used for recordings in the scheduled or inProgress state. Once a recording stops, the planned sotp time doesn't matter and the actualEndTime field contains the time that the recording actually started.  This field is only set by the scheduler.
   field = scheduledStartTime|4,,Time that this recording is planned to start.  This time is normally the same as (requestedStartTime - requestedStartPadding), but may be different because of scheduling constraints.  Only used for recordings in the scheduled state.  Once a recording starts, the planned start time doesn't matter and the actualStartTime field contains the time that the recording actually started.  This field is only set by the scheduler.
   field = searchable|,,This flag defines whether or not a collection is searchable. If 1, a collection is searchable. If 0, a collection is not searchable. Default to 0 (not searchable).
   field = shortTitle|5,,The alternate (short) title for this collection, as defined by the EPG data provider. If this element is not present, the shortTitle can be assumed to be identical to the title.
   field = size|,,Size of the recording in kbytes. Used by the scheduler to estimate the  space left on the disk. It is set to an estimated value by the mind  upon scheduling a recording, calculated by an experienced bitrate. Once the recording is complete, the body should update it with the actual size of the recording on the disk.
   field = startTime|,,For offers that are broadcast television (type "stream"), this field should always be set to the startTime of the offer: the scheduler sets it when the recording is scheduled, and the body updates it based on the actual time. For CDS downloads, it is never set: the scheduler doesn't say when it should start, and the body doesn't set it based on actual times.  For VOD recordings, we haven't decided what to do yet. For manual recordings, startTime is the time the recording starts (NOT the startTime of the offer)
   field = startTimeClippingRecordingId|5,,ID of the recording that caused this recording to be clipped at the start 
   field = startTimePadding|,3,Number of seconds before the actual start of the showing to begin recording. This allows the viewer to compensate when stations don't keep exact time.  If negative, it makes the recording start late.  If missing, acts as though it were 0.  This field is owned by the scheduler, which may be in the mind or in the body.  XXX Do we need this field?  The information is in the subscription, and will be copied here from there.  The recordingStartTime and recordingEndTime are what the body uses during recording.
   field = state|,,The state of this recording, according to the body.  XXX change name to bodyState
   field = subscribable|4,7,Is this offer subscribable?
   field = subscriptionForCollectionIdAndChannel|5,7,hold the subscriptionForCollectionIdAndChannel note
   field = subscriptionId|,4,Id of the subscription(s) that scheduled this recording.  If this is not set, this recording did not come from a subscription.  This field is owned by the scheduler, which may be in the mind or in the body.
   field = subscriptionIdentifier|5,,Information related to the subscriptions that request this recording.  This field is set by the scheduler when it creates the recording,  and kept up-to-date     by the scheduler as the list of subscriptions  changes. The subscriptions are sorted in the order of tuner priority, unless the subscription with the highest priority cannot be scheduled due to some conflicts (e.g.tuner conflict caused by padding) while a subscription with lower priority can be scheduled. In this case, the first subscription is the one directly triggers the recording, not the highest priority one.  The subscriptionType field is needed by the body for display purposes (especially when disconnected), so that it knows which recordings are suggestions, which came from season passes, etc.  If this is not set, the recording should be considered a singleOffer.
   field = subscriptionType|3,4,Type of the idSetSource of the highest priority subscription that requests this recording.  This field is set by the scheduler when it creates the recording, and kept up-to-date by the scheduler as the list of subscriptions changes.  This field is needed by the body for display purposes (especially when disconnected), so that it knows which recordings are suggestions, which came from season passes, etc.  If this is not set, the recording should be considered a singleOffer.  The firstVersion is set on this field to solve inconsistent subscription type enum
   field = subtitle|,,A secondary title by which this specific content (as distinguised from the collection) is known (e.g. episode title).  May apply only to content with ambiguous primary titles.
   field = suggestionScore|,7,The suggestionScore is computed based on userContent/thumbs data of similar programs determined by a TiVo-specific algorithm.  CAUTION: This value is only used internally by the anchor operation. It should not be used for any other purpose. The level of detail is low, because the mobile app will use anchoring on suggestion searches and the anchoring operation needs to know the relevance of the anchor.
   field = title|,,The primary title by which this collection is known.
   field = totalDuration|,,Total duration in seconds of both parts and the program break in between within a split program.
   field = transport|,,This dictionary contains any neccessary information to find content of this particular transportType
   field = watchedTime|3,,how long the recording has been watched by the user, in seconds. Used by noReRecord policy.
   field = width|,7,Width of image, in pixels.
   fieldProject = actualEndTime|0|4|0|partner-subscribe
   fieldProject = actualStartTime|0|4|0|partner-subscribe
   fieldProject = availableCorrelatedCollectionForCollectionId|0|0|7|partner-schedule
   fieldProject = availableEndTime|0|0|7|hme-cds,partner-cds,partner-subscribe
   fieldProject = availableStartTime|0|5|7|hme-cds,partner-cds,partner-subscribe
   fieldProject = bodyData|0|5|0|partner-subscribe
   fieldProject = bodyId|0|0|0|partner-subscribe
   fieldProject = cancellationReason|0|3|0|partner-subscribe
   fieldProject = cancellationTime|0|3|0|partner-subscribe
   fieldProject = category|0|0|7|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = cc|0|0|7|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = channel|0|0|0|partner-schedule,partner-subscribe
   fieldProject = collectionDescription|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = collectionId|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = collectionTitle|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = conflictRecordingId|0|5|0|partner-subscribe
   fieldProject = contentId|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = contentType|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = correlatedCollectionForCollectionId|0|0|7|partner-schedule
   fieldProject = credit|0|0|7|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = debugDetails|0|0|7|partner-subscribe
   fieldProject = deletionPolicy|0|0|0|partner-subscribe
   fieldProject = deletionReason|0|0|0|partner-subscribe
   fieldProject = deletionTime|0|3|0|partner-subscribe
   fieldProject = description|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = descriptionLanguage|0|0|7|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = desiredDeletion|0|0|0|partner-subscribe
   fieldProject = desiredState|0|0|0|partner-subscribe
   fieldProject = displayRank|0|0|0|hme-cds,partner-cds,partner-subscribe
   fieldProject = drm|0|0|7|hme-cds,partner-cds,partner-subscribe
   fieldProject = duration|0|3|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = endTimeClippingRecordingId|0|5|0|partner-subscribe
   fieldProject = episodeNum|0|3|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = episodic|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = expectedDeletion|0|0|0|partner-subscribe
   fieldProject = hdtv|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = imageUrl|0|0|8|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = isEpisode|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = mimeType|0|0|0|partner-subscribe
   fieldProject = movieYear|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = mpaaRating|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = offerId|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = originalAirdate|0|0|0|partner-schedule,partner-subscribe
   fieldProject = overriddenCollectionId|0|0|8|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = overriddenContentId|0|0|8|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = partnerCollectionId|0|0|7|partner-cds
   fieldProject = partnerContentId|0|0|7|partner-cds
   fieldProject = partnerId|0|0|7|hme-cds,partner-cds
   fieldProject = price|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = purchasableFrom|0|0|7|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = recordingId|0|0|0|partner-subscribe
   fieldProject = recordingInConflict|0|0|7|partner-subscribe
   fieldProject = releaseDate|0|0|7|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = repeat|0|0|7|partner-schedule,partner-subscribe
   fieldProject = requestedEndPadding|0|4|0|partner-subscribe
   fieldProject = requestedEndTime|0|4|0|partner-subscribe
   fieldProject = requestedStartPadding|0|4|0|partner-subscribe
   fieldProject = requestedStartTime|0|4|0|partner-subscribe
   fieldProject = scheduledEndTime|0|4|0|partner-subscribe
   fieldProject = scheduledStartTime|0|4|0|partner-subscribe
   fieldProject = screenFormat|0|0|7|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = searchable|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = seasonNumber|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = size|0|0|0|partner-subscribe
   fieldProject = starRating|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = startTime|0|0|0|partner-schedule,partner-subscribe
   fieldProject = startTimeClippingRecordingId|0|5|0|partner-subscribe
   fieldProject = state|0|0|0|partner-subscribe
   fieldProject = subscribable|0|4|7|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = subscriptionId|0|0|4|partner-subscribe
   fieldProject = subscriptionIdentifier|0|5|0|partner-subscribe
   fieldProject = subscriptionType|0|3|4|partner-subscribe
   fieldProject = subtitle|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = title|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = transport|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = transportType|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = tvAdvisory|0|0|7|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = tvRating|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = watchedTime|0|3|0|partner-subscribe
   project = recordingStore|0|0|0|partner-subscribe

********** operation = recordingUpdate (YES)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 field = bookmarkPosition|2|int,0,1,,,,,,,0
 field = recordingId|3|idInt:recording,1,,,,,,,,0
 field = state|4|enum:recordingBodyState,0,1,,,,,,,0
 number = 1648
 returnType = success
   description = Updates various aspects of a recording object.  This differs from recordingStore in that recordingStore will accept an entire object and (theoretically) store it in a database.  On the other hand, this operation will merely update select attributes that are provided and may not involve direct database interaction at all.  This is only implemented in the body.
   field = bookmarkPosition|,,If specified, the recording's bookmark will be updated to match the  specified value.  The value is an offset into the content in milliseconds.  If the specified value is zero, the bookmark will be removed.
   field = recordingId|,,ID of the recording to be modified
   field = state|,,If specified, the recording's state will be updated to match the  specified value.

********** operation = refresh (NO)
 field = refreshOption|1|enum:refreshOption,0,,,,,,,,0
 isFrozen = true
 number = 478
 returnType = success
   description = Used to flush the cache, reload the categories, and run the scheduler for all bodies when new data is available
   field = refreshOption|,,Describes which options to refresh

********** operation = refreshCache (NO)
 number = 479
 returnType = success
   description = Reload the cache from the database. for objects that are retrieved at init time

********** operation = refreshPermissions (NO)
 isFrozen = true
 number = 480
 returnType = success
   description = Reload the permissions tables from the database.

********** operation = relatedContentRemove (NO)
 field = relatedContentId|1|idInt:relatedContent,1,1,,,,,,,0
 number = 1195
 returnType = success
   description = Removes a relatedContent object from the mind.

********** operation = relatedContentSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = contentUrl|3|string,0,1,,,,,,255,0
 field = count|4|int,0,1,,1,,,1,,0
 field = format|5|enum:format,0,1,,,,,,,0
 field = groupBy|6|string,0,,,,,,,32,0
 field = levelOfDetail|7|enum:levelOfDetail,0,1,,,,,,,0
 field = note|8|string,0,,,,,,,,0
 field = offset|9|int,0,1,,0,,,,,0
 field = orderBy|10|string,0,,,,,,,32,0
 field = relatedContentId|11|idInt:relatedContent,0,1,,,,,,,0
 field = removeField|12|string,0,,,,,2,,,0
 field = responseTemplate|14|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|13|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 number = 1196
 returnType = relatedContentList
   description = map content to relatedContent (in theory, should be bidirectional, which the user is responsible for)
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = contentUrl|,,Limits the search to an object with exactly the same value in this field.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = relatedContentId|,,Limits the search to an object with exactly the same value in this field.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = relatedContentStore (NO)
 field = contentUrl|1|string,1,1,low,,,,,255,0
 field = relatedContentId|2|idInt:relatedContent,0,1,low,,,,,,0
 field = relatedContentUrl|3|string,1,1,low,,,,,255,0
 number = 1197
 returnType = relatedContent
   description = Stores a new or a modified relatedContentobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = contentUrl|,,some content
   field = relatedContentUrl|,,content that is somehow related to "some content"

********** operation = relevantItemSearch (NO)
 field = bodyId|1|idBody:body,0,1,,,,,,,0
 field = categoryId|4|idLong:category,0,,,,,,,,0
 field = count|5|int,0,1,,1,,,1,,0
 field = excludePartnerId|6|idInt:partner,0,,,,,,,,0
 field = fallbackImageObjectType|34|enum:fallbackImageObjectType,0,1,,,,,,,0
 field = format|7|enum:format,0,1,,,,,,,0
 field = groupBy|8|string,0,,,,,,,32,0
 field = hdtv|9|boolean,0,1,,,,,,,0
 field = imageRuleset|32|struct:imageRuleset,0,,,,,,,,0
 field = includeBroadband|10|boolean,0,1,,true,,,,,0
 field = includeBroadcast|11|boolean,0,1,,true,,,,,0
 field = includeEmptyTags|12|boolean,0,1,,true,,,,,0
 field = includeFree|13|boolean,0,1,,true,,,,,0
 field = includePaid|14|boolean,0,1,,true,,,,,0
 field = includePersonSearch|15|boolean,0,1,,false,,,,,0
 field = includeRelevantItemType|29|enum:unifiedItemType,0,,,,,,,,0
 field = includeRelevantItems|16
 field = includeUnifiedItemType|17|enum:unifiedItemType,0,,,,,,,,0
 field = includeVod|31|boolean,0,1,,true,,,,,0
 field = keyword|2|string,0,1,,,,,,,0
 field = levelOfDetail|18|enum:levelOfDetail,0,1,,,,,,,0
 field = lineup|19|struct:lineup,0,,,,,,,,0
 field = maxStartTime|20|dateTime,0,1,,,,,,,0
 field = mergeOverridingCollections|30|boolean,0,1,,false,,,,,0
 field = mergeOverridingContent|35|boolean,0,1,,false,,,,,0
 field = minEndTime|21|dateTime,0,1,,,,,,,0
 field = noLineupFilterForType|28|enum:unifiedItemType,0,,,,,,,,0
 field = note|22|string,0,,,,,,,,0
 field = numRelevantItems|27|int,0,1,,0,,,,,0
 field = offset|23|int,0,1,,0,,,,,0
 field = orderBy|24|string,0,,,,,,,32,0
 field = partnerId|25|idInt:partner,0,1,,,,,,,0
 field = responseTemplate|33|struct:responseTemplate,0,,,,,,,,0
 field = searchable|26|boolean,0,1,high,,,,,,0
 field = useLineup|3|boolean,0,1,,,,,,,0
 fieldGroup = unifiedItemSearchFields
 isFrozen = true
 number = 979
 returnType = unifiedItemList
   field = bodyId|,,Restricts the search to collections showing in the next 14 days that are available on this body.  For bodies that sync with the mind, availability is based on the list of channels that the body has sent up.  Only channels that have isReceived=true are used.  For bodies that have not synced with the mind, availability is based on the lineup retrieved from the BSM, and all channels are used.
   field = categoryId|,,Take a categoryId and will be passed to CollectionSearch.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = fallbackImageObjectType|,,If set, this object type will be used to replace the main object's image if the main object's image is not available based on the input ruleset
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = imageRuleset|,,one ruleset should be specified per image desired. multiple rulesets can be specified.
   field = includeBroadband|,,Include broadband collections
   field = includeBroadcast|,,Include broadcast collections
   field = includeEmptyTags|,,Include empty tags. Defaults to true for old behavior.
   field = includeFree|,,Include free collections. These would be the pgd collections and cds offers that has a price of 0.
   field = includePaid|,,Include paid collections. These would be cds offers with price greater than 0.
   field = includePersonSearch|,,Allow unifiedItemSearch to call PersonTableSearch and  return the results merged with other results.
   field = includeRelevantItemType|,,If present, the unifiedItemSearch will return only the types of object specified in the relevantItemSearch portion of the search. If not present, unifiedItemSearch will return the default set of objects as defined in the given Mind version.
   field = includeUnifiedItemType|,,If present, the unifiedItemSearch will return only the types of object specified.  If not present, unifiedItemSearch will return the default set of objects as defined in the given Mind version.
   field = includeVod|,,Include vod collections
   field = keyword|,,Search tags based on prefix, collections based on title substring, with a logical ordering.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = lineup|,,Restricts the search to collections showing in the next 14 days on a channel in the named lineup.
   field = maxStartTime|,,Return tags and collections, where collections are filtered to only those that show before maxStartTime in the next 14 days of PGD data.
   field = mergeOverridingCollections|,,Limits the search to an object with exactly the same value in this field.
   field = mergeOverridingContent|,,Limits the search to an object with exactly the same value in this field.
   field = minEndTime|,,Return tags and collections, where collections are filtered to only those that show after minEndTime in the next 14 days of PGD data.
   field = noLineupFilterForType|,,For any type specified with this field, unifiedItemSearch will NOT filter that type's results by the body's lineup. This has the side-effect of also not respecting any filtering, other than keyword, for that type.
   field = note|,,A request for the results to be annotated.
   field = numRelevantItems|,,Allow unifiedItemSearch to call RelevantItemSearch, and populate up to this many items at the top of the result list with those instead.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = searchable|,,If true, return only collections with searchable=true. If false, return only collections with searchable=false.
   field = useLineup|,,forces query to use headend and lineup instead of custom channel list.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all
   fieldProject = searchable|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe

********** operation = revalidateBodyIdInAnonymizer (NO)
 field = bodyId|1|string,1,1,,,,,,,0
 number = 1309
 returnType = success
   description = Create a new anonId for an invalidated body ID in the anonymizer.

********** operation = revokedOfferRemove (NO)
 field = offerId|1|idString:offer,1,1,,,,,,,0
 isFrozen = true
 number = 865
 returnType = success
   description = Removes a revokedOffer object from the mind.

********** operation = revokedOfferSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = count|3|int,0,1,,1,,,1,,0
 field = format|4|enum:format,0,1,,,,,,,0
 field = groupBy|5|string,0,,,,,,,32,0
 field = levelOfDetail|6|enum:levelOfDetail,0,1,,,,,,,0
 field = noLimit|7|boolean,0,1,,,,,,,0
 field = note|8|string,0,,,,,,,,0
 field = offerId|9|idString:offer,0,1,,,,,,,0
 field = offset|10|int,0,1,,0,,,,,0
 field = orderBy|11|string,0,,,,,,,32,0
 field = removeField|12|string,0,,,,,2,,,0
 field = responseTemplate|15|struct:responseTemplate,0,,,,,,,,0
 field = updateDate|13|dateTime,0,1,medium,,,,,,0
 field = useAnchorOperation|14|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 number = 866
 returnType = revokedOfferList
   description = Get revokedOffer for a cluster
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = noLimit|,,Do not limit this search to a given count.
   field = note|,,A request for the results to be annotated.
   field = offerId|,,Limits the search to an object with exactly the same value in this field.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = revokedOfferStore (NO)
 field = bodyCount|1|int,0,1,low,,,7,,,0
 field = offerId|2|idString:offer,1,1,low,,,,,,0
 isFrozen = true
 number = 867
 returnType = revokedOffer
   description = Stores a new or a modified revokedOfferobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.

********** operation = revokedSubscriptionCleanup (NO)
 field = isProcessed|1|boolean,1,1,low,,,,,,0
 field = maxUpdateDate|2|dateTime,1,1,,,,,,,0
 number = 2001
 returnType = success
   field = maxUpdateDate|,,Everything cleaned up must be older than this date.

********** operation = revokedSubscriptionRemove (NO)
 field = revokedSubscriptionId|1|idInt:revokedSubscription,1,1,,,,,,,0
 isFrozen = true
 number = 2003
 returnType = success
   description = Removes a revokedSubscription object from the mind.

********** operation = revokedSubscriptionSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = count|3|int,0,1,,1,,,1,,0
 field = createDate|4|dateTime,0,1,high,,,,,,0
 field = format|5|enum:format,0,1,,,,,,,0
 field = groupBy|6|string,0,,,,,,,32,0
 field = idSetSource|7|union:idSetSource,1,1,low,,,,,,0
 field = isProcessed|8|boolean,0,1,low,false,,,,,0
 field = levelOfDetail|9|enum:levelOfDetail,0,1,,,,,,,0
 field = note|10|string,0,,,,,,,,0
 field = offset|11|int,0,1,,0,,,,,0
 field = orderBy|12|string,0,,,,,,,32,0
 field = removeField|13|string,0,,,,,2,,,0
 field = responseTemplate|14|struct:responseTemplate,0,,,,,,,,0
 field = revokedSubscriptionId|15|idInt:revokedSubscription,0,1,low,,,,,,0
 field = updateDate|16|dateTime,0,1,medium,,,,,,0
 field = useAnchorOperation|17|boolean,0,1,,true,,,,,0
 fieldGroup = revokedSubscriptionFields
 fieldGroup = searchFields
 isFrozen = true
 number = 2004
 orderBy = revokedSubscriptionId
 returnType = revokedSubscriptionList
   description = Retrieves row(s) from revokedSubscription table.
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = idSetSource|,,The dictionary that defines what candidates are for revoking.
   field = isProcessed|,,whether processed by RevokedSubscriptionJob (Quartz)
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = revokedSubscriptionId|,,Auto-incremented/generated Id.
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = revokedSubscriptionStore (NO)
 field = idSetSource|1|union:idSetSource,1,1,low,,,,,,0
 field = isProcessed|2|boolean,0,1,low,false,,,,,0
 field = revokedSubscriptionId|3|idInt:revokedSubscription,0,1,low,,,,,,0
 isFrozen = true
 number = 2005
 returnType = revokedSubscription
   description = Stores a new or a modified revokedSubscriptionobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = idSetSource|,,The dictionary that defines what candidates are for revoking.
   field = isProcessed|,,whether processed by RevokedSubscriptionJob (Quartz)
   field = revokedSubscriptionId|,,Auto-incremented/generated Id.

********** operation = rssFeedInternalCleanup (NO)
 field = maxUpdateDate|1|dateTime,1,1,low,,,,,,0
 isFrozen = true
 number = 1250
 returnType = success
   description = RSS feed internal cleanup performed by appserver

********** operation = rssFeedInternalRefresh (NO)
 field = rssFeed|1|struct:rssFeed,1,,,,,,,,0
 isFrozen = true
 number = 1251
 returnType = success
   description = RSS feed internal refresh performed by appserver

********** operation = rssFeedInternalSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = count|3|int,0,1,,1,,,1,,0
 field = format|4|enum:format,0,1,,,,,,,0
 field = groupBy|5|string,0,,,,,,,32,0
 field = levelOfDetail|6|enum:levelOfDetail,0,1,,,,,,,0
 field = minPopularityScore|7|int,1,1,low,,,,,,0
 field = note|8|string,0,,,,,,,,0
 field = offset|9|int,0,1,,0,,,,,0
 field = orderBy|10|string,0,,,,,,,32,0
 field = removeField|11|string,0,,,,,2,,,0
 field = responseTemplate|13|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|12|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 isFrozen = true
 number = 1252
 returnType = rssFeedList
   description = RSS feed internal search performed by appserver
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = minPopularityScore|,,Mininum popularity score (currently as body count) above which (inclusive) rssFeed records will be returned
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = rssFeedSearch (NO)
 field = addField|5|string,0,,,,,2,,,0
 field = anchor|6|anchorDict,0,1,,,,,,,0
 field = count|7|int,0,1,,1,,,1,,0
 field = format|8|enum:format,0,1,,,,,,,0
 field = groupBy|9|string,0,,,,,,,32,0
 field = levelOfDetail|10|enum:levelOfDetail,0,1,,,,,,,0
 field = note|11|string,0,,,,,,,,0
 field = offset|12|int,0,1,,0,,,,,0
 field = orderBy|13|string,0,,,,,,,32,0
 field = removeField|14|string,0,,,,,2,,,0
 field = responseTemplate|16|struct:responseTemplate,0,,,,,,,,0
 field = strippedUrlPrefix|1|string,0,1,low,,,,,,0
 field = title|2|string,0,1,,,,,1,128,0
 field = updateDate|3
 field = url|4|url,0,1,,,,,1,4096,0
 field = useAnchorOperation|15|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 isFrozen = true
 number = 1254
 orderBy = popularityScore
 orderBy = title
 orderBy = url
 returnType = rssFeedList
   description = External RSS feed search performed by tivo clients
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = title|,,Limits the search to an object with exactly the same value in this field.
   field = url|,,Limits the search to an object with exactly the same value in this field.
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = schedule (NO)
 field = bodyId|1|idBody:body,0,1,,,,,,,0
 isFrozen = true
 number = 482
 returnType = success
   description = A request to the mind to schedule, either for one body, or for all bodies associated with one user.

********** operation = scheduleItemCleanup (NO)
 field = bodyId|1|idBody:body,0,1,low,,,,,,0
 field = maxUpdateDate|2|dateTime,1,1,,,,,,,0
 number = 1775
 returnType = success
   field = maxUpdateDate|,,everything cleaned up must be older than this date.
   project = scheduleItemCleanup|0|0|0|partner-schedule

********** operation = scheduleItemCreate (NO)
 field = accountToken|1|idBase64:accountToken,1,1,low,,,,,,0
 field = bodyId|2|idBody:body,1,1,low,,,,,,0
 field = channelNumber|3|channelNumber,0,1,low,,,,,,0
 field = contentId|4|idLong:content,1,1,low,,,,,,0
 field = duration|5|int,0,1,low,,,,0,864000,0
 field = email|6|string,0,1,low,,,,,100,0
 field = name|15|string,1,1,low,,,,,,0
 field = namespace|7|enum:scheduleItemNamespace,0,1,low,,,,,,0
 field = partnerContentIdForContentId|14|string,0,1,low,,,,,,1
 field = partnerStationIdForStationId|16|string,0,1,low,,,,,,1
 field = programTitle|8|string,0,1,low,,,,,100,0
 field = scheduleItemId|9|idInt:scheduleItem,0,1,low,,,,,,0
 field = scheduleItemType|10|enum:captureRequestType,0,1,low,,,,,,0
 field = showStart|11|dateTime,0,1,low,,,,,,0
 field = stationId|12|idLong:station,0,1,low,,,,,,0
 field = subscription|13|struct:subscription,1,1,,,,,,,0
 fieldGroup = scheduleItemFields
 number = 1794
 returnType = scheduleItem
   field = duration|,,If namespace is tvguide, then duration is required. Duration of the program in seconds.
   field = name|,,Unique external identifier used by consumer of scheduleItemSearch to determine if two capture requests are identical.
   field = namespace|,,Unless explicitly specified, default namespace is tribune
   field = partnerContentIdForContentId|,,For Tribune content, this is the TMS contentId
   field = partnerStationIdForStationId|,,TMS stationId
   field = programTitle|,,If namespace is tvguide, then programTitle is required.
   field = showStart|,,If namespace is tvguide, then showStart is required. Air datetime of the program in GMT.
   field = subscription|,,Limits the search to an object with exactly the same value in this field.
   fieldProject = accountToken|0|0|0|partner-schedule
   fieldProject = channelNumber|0|0|0|partner-schedule
   fieldProject = contentId|0|0|0|partner-schedule
   fieldProject = email|0|0|0|partner-schedule
   fieldProject = scheduleItemId|0|0|0|partner-schedule
   fieldProject = scheduleItemType|0|0|0|partner-schedule
   fieldProject = showStart|0|0|0|partner-schedule
   fieldProject = stationId|0|0|0|partner-schedule
   project = scheduleItemCreate|0|0|0|partner-schedule

********** operation = scheduleItemRemove (NO)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 field = scheduleItemId|2|idInt:scheduleItem,0,1,,,,,,,0
 number = 1777
 returnType = success
   field = scheduleItemId|,,Limits the search to an object with exactly the same value in this field.
   fieldProject = scheduleItemId|0|0|0|partner-schedule

********** operation = scheduleItemSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = bodyId|3|idBody:body,1,1,,,,,,,0
 field = count|4|int,0,1,,1,,,1,,0
 field = format|5|enum:format,0,1,,,,,,,0
 field = groupBy|6|string,0,,,,,,,32,0
 field = levelOfDetail|7|enum:levelOfDetail,0,1,,,,,,,0
 field = note|8|string,0,,,,,,,,0
 field = offset|9|int,0,1,,0,,,,,0
 field = orderBy|10|string,0,,,,,,,32,0
 field = partnerContentIdForContentId|15|string,1,1,,,,,,,1
 field = partnerStationIdForStationId|16|string,1,1,,,,,,,1
 field = removeField|11|string,0,,,,,2,,,0
 field = responseTemplate|12|struct:responseTemplate,0,,,,,,,,0
 field = scheduleItemId|13|idInt:scheduleItem,0,1,,,,,,,0
 field = useAnchorOperation|14|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 number = 1778
 returnType = scheduleItemList
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = scheduleItemId|,,Limits the search to an object with exactly the same value in this field.
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all
   fieldProject = scheduleItemId|0|0|0|partner-schedule
   project = scheduleItemSearch|0|0|0|partner-schedule

********** operation = scheduleItemStore (NO)
 field = accountToken|1|idBase64:accountToken,1,1,low,,,,,,0
 field = bodyId|2|idBody:body,1,1,low,,,,,,0
 field = channelNumber|3|channelNumber,0,1,low,,,,,,0
 field = contentId|4|idLong:content,1,1,low,,,,,,0
 field = duration|5|int,0,1,low,,,,0,864000,0
 field = email|6|string,0,1,low,,,,,100,0
 field = endTimePadding|7
 field = keepTime|8
 field = maxRecordings|9
 field = name|22|string,1,1,low,,,,,,0
 field = namespace|10|enum:scheduleItemNamespace,0,1,low,,,,,,0
 field = partnerContentIdForContentId|21|string,0,1,low,,,7,,,1
 field = partnerStationIdForStationId|23|string,0,1,low,,,7,,,1
 field = programTitle|11|string,0,1,low,,,,,100,0
 field = recordingPriority|12
 field = recordingQualityLevel|13
 field = scheduleItemId|14|idInt:scheduleItem,0,1,low,,,,,,0
 field = scheduleItemType|15|enum:captureRequestType,0,1,low,,,,,,0
 field = showStart|16|dateTime,0,1,low,,,,,,0
 field = showStatus|17
 field = startTimePadding|18
 field = stationId|19|idLong:station,0,1,low,,,,,,0
 field = subscription|20|struct:subscription,1,1,low,,,,,,0
 number = 1779
 returnType = scheduleItem
   description = Stores a new or a modified scheduleItemobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = duration|,,If namespace is tvguide, then duration is required. Duration of the program in seconds.
   field = name|,,Unique external identifier used by consumer of scheduleItemSearch to determine if two capture requests are identical.
   field = namespace|,,Unless explicitly specified, default namespace is tribune
   field = partnerContentIdForContentId|,7,For Tribune content, this is the TMS contentId
   field = partnerStationIdForStationId|,7,TMS stationId
   field = programTitle|,,If namespace is tvguide, then programTitle is required.
   field = showStart|,,If namespace is tvguide, then showStart is required. Air datetime of the program in GMT.
   fieldProject = accountToken|0|0|0|partner-schedule
   fieldProject = channelNumber|0|0|0|partner-schedule
   fieldProject = contentId|0|0|0|partner-schedule
   fieldProject = email|0|0|0|partner-schedule
   fieldProject = scheduleItemId|0|0|0|partner-schedule
   fieldProject = scheduleItemType|0|0|0|partner-schedule
   fieldProject = showStart|0|0|0|partner-schedule
   fieldProject = stationId|0|0|0|partner-schedule
   project = scheduleItemStore|0|0|0|partner-schedule

********** operation = scheduledContentCountInternalSearch (NO)
 field = addField|1
 field = anchor|2
 field = count|3|int,0,1,,1,,,1,,0
 field = format|4
 field = groupBy|5
 field = levelOfDetail|6|enum:levelOfDetail,0,1,,,,,,,0
 field = noLimit|7
 field = note|8
 field = observesDaylightSaving|9|boolean,1,1,,,,,,,0
 field = offset|10|int,0,1,,0,,,,,0
 field = orderBy|11
 field = removeField|12
 field = responseTemplate|17|struct:responseTemplate,0,,,,,,,,0
 field = secondsFromGmt|13|int,1,1,,,,,-86400,86400,0
 field = startTime|14|dateTime,1,1,,,,,,,0
 field = startTimeWindowInSeconds|15|int,0,1,low,600,,,0,1800,0
 field = useAnchorOperation|16
 fieldGroup = searchFieldsCore
 number = 1212
 orderBy = bodyCount
 orderBy = observesDaylightSaving
 orderBy = secondsFromGmt
 returnType = scheduledContentCountList
   description = Search for most recorded contentId in accountOnly database
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = observesDaylightSaving|,,Limits the search to an object with exactly the same value in this field.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = secondsFromGmt|,,Limits the search to an object with exactly the same value in this field.
   field = startTime|,,Limits the search to an object with exactly the same value in this field.
   field = startTimeWindowInSeconds|,,Start time window in seconds for which startTime is centered for search
   fieldProject = count|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = scheduledContentCountRefresh (NO)
 field = scheduledContentCount|2|struct:scheduledContentCount,1,,,,,,,,0
 field = scheduledContentCountFromAcctDb|1
 number = 1214
 returnType = success
   description = Internally refresh service database with latest results from scheduledContentCountInternalSearch

********** operation = scheduledContentCountSearch (NO)
 field = addField|1
 field = anchor|2
 field = count|3|int,0,1,,1,,,1,,0
 field = format|4
 field = groupBy|5
 field = levelOfDetail|6|enum:levelOfDetail,0,1,,,,,,,0
 field = noLimit|7|boolean,0,1,,,,,,,0
 field = note|8
 field = observesDaylightSaving|9|boolean,0,1,,,,,,,0
 field = offset|10|int,0,1,,0,,,,,0
 field = orderBy|11
 field = removeField|12
 field = responseTemplate|18|struct:responseTemplate,0,,,,,,,,0
 field = secondsFromGmt|13|int,0,1,,,,,-86400,86400,0
 field = startTime|14|dateTime,0,1,,,,,,,0
 field = startTimeLookAheadWindow|16|int,0,1,low,86400,,,0,86400,0
 field = startTimeLookBehindWindow|17|int,0,1,low,300,,,0,300,0
 field = useAnchorOperation|15
 fieldGroup = searchFieldsCore
 number = 1215
 orderBy = bodyCount
 orderBy = observesDaylightSaving
 orderBy = secondsFromGmt
 returnType = scheduledContentCountList
   description = Search for most recorded contentId in service database
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = noLimit|,,Do not limit the number of rows returned for this search. Note: this is ok for external search since the serviceDb's scheduledContentCountSearch table is very small with no sql query performance concern in sight.
   field = observesDaylightSaving|,,Limits the search to an object with exactly the same value in this field.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = secondsFromGmt|,,Limits the search to an object with exactly the same value in this field.
   field = startTime|,,Limits the search to an object with exactly the same value in this field.
   field = startTimeLookAheadWindow|,,Allows search in [startTime, startTime   this field] time window for most recorded shows, in seconds. Default to 1 day = 86400 = 24 * 3600.
   field = startTimeLookBehindWindow|,,Start time look behind window in seconds to allow shows with a very recently passed startTime to show up in search result. Note that this value should be modified with caution, in particular, it should be less than or equal to half of the value set in startTimeWindowInSeconds used in scheduledContentCountInternalSearch operation.
   fieldProject = count|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = scheduledRecordingCancel (NO)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 field = recordingId|2|idInt:recording,1,1,,,,,,,0
 isFrozen = true
 number = 967
 returnType = success
   description = A request to the mind to cancel a scheduled recording, given the recording id, and a body
   field = recordingId|,,Unique ID of this recording.  Unique within one body.

********** operation = schedulerFrameworkTriggerGet (NO)
 field = jobName|1|string,1,1,,,,,,,0
 number = 1224
 returnType = schedulerFrameworkTriggerList
   field = jobName|,,Limits the search to an object with exactly the same value in this field.

********** operation = schedulerRecordingSearch (NO)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 field = desiredState|2|enum:recordingMindState,0,,,,,,,,0
 field = maxEndTime|3|dateTime,0,1,,,,,,,0
 field = maxStartTime|4|dateTime,0,1,,,,,,,0
 field = minEndTime|5|dateTime,0,1,,,,,,,0
 field = minStartTime|6|dateTime,0,1,,,,,,,0
 field = recordingId|10|idInt:recording,0,1,,,,,,,0
 field = state|7|enum:recordingBodyState,0,,,,,,,,0
 field = subscriptionId|8|idInt:subscription,0,1,,,,,,,0
 field = transportType|9|enum:offerTransportType,0,,,,,,,,0
 number = 1150
 orderBy = startTime
 returnType = recordingList
   description = A lightweight recording search used by the scheduler.
   field = desiredState|,,OR (state)
   field = maxEndTime|,,Returns offers whose endTime is less than or equal to maxEndTime
   field = maxStartTime|,,Returns offers whose startTime is less than or equal to maxStartTime
   field = minEndTime|,,Returns offers whose endTime is greater than or equal to minEndTime
   field = minStartTime|,,Returns offers whose startTime is greater than or equal to minStartTime
   field = recordingId|,,Limits the search to an object with exactly the same value in this field.
   field = state|,,OR (with desiredState)
   fieldProject = desiredState|0|0|0|partner-subscribe
   fieldProject = maxEndTime|0|0|0|partner-schedule,partner-subscribe
   fieldProject = maxStartTime|0|0|0|partner-schedule,partner-subscribe
   fieldProject = minEndTime|0|0|0|partner-schedule,partner-subscribe
   fieldProject = minStartTime|0|0|0|partner-schedule,partner-subscribe
   fieldProject = recordingId|0|0|0|partner-subscribe
   fieldProject = state|0|0|0|partner-subscribe
   fieldProject = subscriptionId|0|0|0|partner-subscribe
   fieldProject = transportType|0|0|0|hme-cds,partner-cds

********** operation = schedulerRunRemove (NO)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 field = schedulerRunId|2|idInt:schedulerRun,1,1,,,,,,,0
 isFrozen = true
 number = 485
 returnType = success
   description = Removes a schedulerRun object from the mind.

********** operation = schedulerRunRequestRemove (NO)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 firstVersion = 5
 isFrozen = true
 number = 486
 returnType = success
   description = When the scheduler runs for a body, invoke this operation to "pop" a  potential entry for the specified body from the schedulerRunRequest queue.

********** operation = schedulerRunRequestSearch (NO)
 field = count|1|int,0,1,,1,,,0,,0
 firstVersion = 5
 isFrozen = true
 number = 487
 returnType = bodyIdSet
   description = To get a list of bodies that requested scheduler run. A background job utilizes this operation to invoke the scheduling operation for these bodies.
   field = count|,,Up to how many bodyIds should be returned, default to 1

********** operation = schedulerRunRequestStore (NO)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 firstVersion = 5
 isFrozen = true
 number = 488
 returnType = success
   description = Request that a scheduler run be performed for a body at the next  opportunity. This is useful in the case of a body that has no scheduler  and relies on the Mind to schedule for that body.  If some activity is  performed that is known to make the body's To-Do List stale (such as a  Season Pass reprioritization), then call this operation.  This operation  does not guarantee that the scheduler will run before the regular daily  scheduler run. Upon the next scheduler run for this body, this scheduler  run request will be considered fulfilled.

********** operation = schedulerRunSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = bodyId|3|idBody:body,1,1,,,,,,,0
 field = count|4|int,0,1,,1,,,1,,0
 field = format|5|enum:format,0,1,,,,,,,0
 field = groupBy|6|string,0,,,,,,,32,0
 field = levelOfDetail|7|enum:levelOfDetail,0,1,,,,,,,0
 field = note|8|string,0,,,,,,,,0
 field = offset|9|int,0,1,,0,,,,,0
 field = orderBy|10|string,0,,,,,,,32,0
 field = removeField|11|string,0,,,,,2,,,0
 field = responseTemplate|15|struct:responseTemplate,0,,,,,,,,0
 field = schedulerRunId|12|idInt:schedulerRun,0,1,,,,,,,0
 field = schedulerRunType|13|enum:schedulerRunType,0,1,,,,,,,0
 field = useAnchorOperation|14|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 isFrozen = true
 number = 489
 returnType = schedulerRunList
   description = Searches for matching schedulerRuns
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = bodyId|,,Limits the search to an object with exactly the same value in this field.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = schedulerRunId|,,Limits the search to an object with exactly the same value in this field.
   field = schedulerRunType|,,Limits the search to an object with exactly the same value in this field.
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = schedulerRunStore (NO)
 field = bodyId|1|idBody:body,1,1,low,,,,,,0
 field = candidateBodySyncId|2|int,0,1,low,,,,,,0
 field = candidateMindSyncId|3|int,0,1,low,,,,,,0
 field = channelBodySyncId|4|int,0,1,low,,,,,,0
 field = channelMindSyncId|5|int,0,1,low,,,,,,0
 field = recordingBodySyncId|6|int,0,1,low,,,,,,0
 field = recordingMindSyncId|7|int,0,1,low,,,,,,0
 field = schedulerRunBodySyncId|8|int,0,1,low,,,7,,,0
 field = schedulerRunId|9|idInt:schedulerRun,0,1,low,,,,,,0
 field = schedulerRunIdInBody|10|localId,0,1,high,,,2,,,0
 field = schedulerRunMindSyncId|11|int,0,1,low,,,7,,,0
 field = schedulerRunType|12|enum:schedulerRunType,1,1,low,,,,,,0
 field = schedulingRequestTime|13|dateTime,0,1,low,,5,,,,0
 field = subscriptionBodySyncId|14|int,0,1,low,,,,,,0
 field = subscriptionMindSyncId|15|int,0,1,low,,,,,,0
 field = tunerBodySyncId|16|int,0,1,low,,,,,,0
 field = tunerMindSyncId|17|int,0,1,low,,,,,,0
 isFrozen = true
 number = 490
 returnType = schedulerRun
   description = Stores a new or a modified schedulerRunobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = bodyId|,,The body this schedulerRun was for.
   field = schedulingRequestTime|5,,The time when the scheduling request is created. It is set by the schedulerRunRequestStore operation, and cleared by the schedulerRunRequestRemove operation. Client calls the first operation to request the scheduler to run, and this value is cleared once the scheduler runs.

********** operation = schedulerStatus (NO)
 field = status|1|anyDict,0,,low,,,,,,0
 number = 855
 returnType = schedulerStatus
   description = schedulerStatus pseudo-op and response
   field = status|,,Returned in response.  Do not pass in request.

********** operation = schemaColumnRemovalCheck (NO)
 number = 492
 returnType = success
   description = Check to make sure removing a schema column works Ok. It creates a table, caches the column check, removes the column, and does the query again.  The first query should fail, but the retried query should work.

********** operation = schemaElementGet (NO)
 field = levelOfDetail|1|enum:levelOfDetail,0,1,low,,,,,,0
 field = name|2|string,1,1,,,6,,,,0
 fieldGroup = levelOfDetailFields
 firstVersion = 6
 number = 494
 returnType = schemaElement
   description = Get the schema for an element and optionally all dependencies.
   field = levelOfDetail|,,In a result from a Search operation from the mind, this field says what level of detail the mind produced for this object. The mind will always set this field when returning the result of a search.  It will not be set inside a syncPong, and you should not set it when sending things to the mind.
   field = name|6,,
   fieldProject = levelOfDetail|0|0|0|all

********** operation = schemaNumberListGet (NO)
 field = container|1|string,0,1,,,,,,,0
 field = what|2|enum:schemaNumberType,1,1,,,,,,,0
 number = 955
 returnType = schemaNumberList
   description = Returns a list of names from the schema and the numbers assigned to them.  The order of the schemaNumbers in the returned list is not defined.
   field = container|,,The name of the structure who's elements should be returned or the name of the enum whose items should be returned.

********** operation = screenDimensionsGet (NO)
 number = 1895
 returnType = dimensions
   description = Returns the dimensions of the current display

********** operation = scrollWheelSend (NO)
 field = hScroll|1|int,1,1,,,,,-8,7,0
 field = vScroll|2|int,1,1,,,,,-8,7,0
 number = 1896
 returnType = success
   description = Indicates movement of the scroll wheel in both horizontal and vertical directions
   field = hScroll|,,The amount to scroll in the horizontal direction
   field = vScroll|,,The amount to scroll in the vertical direction

********** operation = sdvConfigInstructionsGet (NO)
 field = bodyId|1|idBody:body,1,1,low,,,,,,0
 field = callId|2|string,1,1,low,,,,,,0
 field = requestToken|3|anyDict,0,1,low,,,,,,0
 field = softwareVersion|4|string,1,1,low,,,,,,0
 field = userInitiated|5|boolean,1,1,low,,,,,,0
 number = 2075
 returnType = sdvConfigInstructions
   description = This operation will return the provisioning information of SDV (Switched Digital Video) service needed by the body.
   field = callId|,,A session ID.  Historically, a session of a Service call is called a "call". Using "callId" here enables more straightforward correlation to the trackerDb. Typically, the client would send Unix time, in seconds. This same value should be used as the callId for the entire session, meaning the invocation of callInstructionsGet plus each of the subsequent invocations of sub-operations, if any.
   field = requestToken|,,Typically the "resultToken" of the previous *InstructionsGet response. If this is the first call, then this field is omitted. As an anyDict field, we have extensibility here.
   field = softwareVersion|,,The currently installed software version on the body. This field is mostly intended for informational logging and potentially identifying what software features are currently available to the client.
   field = userInitiated|,,Was this invocation initiated by explicit user action, rather than programmatically, based on callbackSeconds information? This is mainly informational.

********** operation = searchRequestCountGet (NO)
 field = bodyId|1|idBody:anyBody,0,1,,,,,,,0
 field = lastWindowSize|2|int,0,1,,0,,,0,50,0
 field = levelOfDetail|3
 field = offset|4|int,0,1,,0,,,0,,0
 field = request|5|knownDict,1,1,,,,,,,0
 number = 1453
 returnType = searchRequestCount
   description = gets the number of results for a given search, up to 1000, starting at the offset given.  This is potentially a very expensive search, and should not be used up-front to calculate the size of a result set. Instead, it should be used only it is desitred to jump to the bottom of the search results.  The search will return the count of the result set, up to 1000. If more than 1000 values exist, isBottom will be false. If more than 1000 are required (should be pretty rare), the offset field can be used, but in general if there have more than 1000 results, the user should be prompted to filter the resultset more.
   field = bodyId|,,if the request contains a bodyId, it must also be included here.
   field = lastWindowSize|,,if non-zero, return the last window of this many items from the overall result set that has been counted.
   field = offset|,,the offset for the search. generally 0.
   field = request|,,the search request for which to count results. count/offset will be ignored, and format must be unset.

********** operation = searchRequestExecute (YES)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = bodyId|3|idBody:body,0,1,,,,,,,0
 field = computeRequestOnly|19|boolean,0,1,,false,,,,,0
 field = count|4|int,0,1,,1,,,1,,0
 field = excludeObjectIdAndType|5|long,0,,,,,,,,0
 field = format|6|enum:format,0,1,,,,,,,0
 field = getCountOnly|23|boolean,0,1,,false,,,,,0
 field = groupBy|7|string,0,,,,,,,32,0
 field = imageRuleset|21|struct:imageRuleset,0,,,,,,,,0
 field = levelOfDetail|8|enum:levelOfDetail,0,1,,,,,,,0
 field = note|9|string,0,,,,,,,,0
 field = objectIdAndType|10|long,0,,,,,,,,0
 field = offset|11|int,0,1,,0,,,,,0
 field = orderBy|12|string,0,,,,,,,32,0
 field = removeField|13|string,0,,,,,2,,,0
 field = resolveCount|14|int,0,1,,0,,,,,0
 field = resolveLevelOfDetail|15|enum:levelOfDetail,0,1,,low,,,,,0
 field = resolveOffset|16|int,0,1,,0,,,,,0
 field = responseTemplate|22|struct:responseTemplate,0,,,,,,,,0
 field = searchRequestId|17|idLong:searchRequest,1,1,,,,,,,0
 field = unifiedItemFilters|20|struct:unifiedItemFilters,0,1,,,,,,,0
 field = useAnchorOperation|18|boolean,0,1,,true,,,,,0
 fieldGroup = imageRulesetFields
 fieldGroup = resolveSearchFields
 fieldGroup = searchFields
 number = 1455
 returnType = idSequence
   description = searchRequestExecute will execute the given search, adding bodyId and searchFields as needed.  Depending on the fields filled in, searchRequestExecute can be used to do standard count/offset searching, generate idSets or idSequences, or resolve objectIdAndType values obtained from a previous call with the same searchRequestId and a format of idSequence.
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = computeRequestOnly|,,If set to true, the operation will only compute the search request that it would execute and return that.  It will not actually execute the search request
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = excludeObjectIdAndType|,,An objectIdAndType from an idSequence obtained in a previous search operation, to be excluded from the result set.
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = getCountOnly|,,If set to true, the operation will return a searchRequestCount for the searchRequest, rather than execute it.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = imageRuleset|,,one ruleset should be specified per image desired. multiple rulesets can be specified.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = objectIdAndType|,,Limits the search to an object with exactly the same value in this field.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = resolveCount|,,If a format of (string)idSequence is specified, the count of objectIds that should be resolved into objects. Ignored unless format = (string)idSequence.
   field = resolveLevelOfDetail|,,If a format of (string)idSequence is specified, the levelOfDetail at which the objects should be resolved.  Ignored unless resolveCount > 0 and format = (string)idSequence.
   field = resolveOffset|,,If a format of (string)idSequence is specified, the offset into the objectId list that should be resolved into objects. Ignored unless resolveCount > 0 and format = (string)idSequence.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = searchRequestId|,,Limits the search to an object with exactly the same value in this field.
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = searchRequestRemove (NO)
 field = searchRequestId|1|idLong:searchRequest,1,1,low,,,,,,0
 number = 1457
 returnType = success
   description = searchRequest remove by id only
   field = searchRequestId|,,Limits the search to an object with exactly the same value in this field.

********** operation = searchRequestSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = count|3|int,0,1,,1,,,1,,0
 field = format|4|enum:format,0,1,,,,,,,0
 field = groupBy|5|string,0,,,,,,,32,0
 field = hashCode|20|int,0,1,low,,,,,,0
 field = levelOfDetail|6|enum:levelOfDetail,0,1,,,,,,,0
 field = maxCreateDate|23|dateTime,0,1,,,,,,,0
 field = maxUpdateDate|24|dateTime,0,1,,,,,,,0
 field = minCreateDate|25|dateTime,0,1,,,,,,,0
 field = minUpdateDate|26|dateTime,0,1,,,,,,,0
 field = mindObjectType|7|enum:mindObjectType,0,1,low,,,,,,0
 field = mindVersion|8|int,0,1,low,,,,,,0
 field = name|9|string,0,1,low,,,,,255,0
 field = noLimit|10|boolean,0,1,,,,,,,0
 field = note|11|string,0,,,,,,,,0
 field = offset|12|int,0,1,,0,,,,,0
 field = orderBy|13|string,0,,,,,,,32,0
 field = removeField|14|string,0,,,,,2,,,0
 field = request|21|knownDict,0,1,low,,,,,,0
 field = requiresBodyId|15|boolean,0,1,low,,,,,,0
 field = responseTemplate|22|struct:responseTemplate,0,,,,,,,,0
 field = searchRequest|16
 field = searchRequestHashCode|17
 field = searchRequestId|18|idLong:searchRequest,0,,low,,,,,,0
 field = useAnchorOperation|19|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 number = 1458
 orderBy = createDate
 orderBy = mindObjectType
 orderBy = mindVersion
 orderBy = name
 orderBy = requiresBodyId
 orderBy = searchRequest
 orderBy = searchRequestId
 orderBy = updateDate
 returnType = searchRequestList
   description = searchRequest search
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = hashCode|,,Limits the search to an object with exactly the same value in this field.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = mindObjectType|,,Limits the search to an object with exactly the same value in this field.
   field = mindVersion|,,Limits the search to an object with exactly the same value in this field.
   field = name|,,Limits the search to an object with exactly the same value in this field.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = request|,,Limits the search to an object with exactly the same value in this field.
   field = requiresBodyId|,,Limits the search to an object with exactly the same value in this field.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = searchRequestId|,,Limits the search to an object with exactly the same value in this field.
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = searchRequestStore (NO)
 field = name|1|string,1,1,,,,,,255,0
 field = request|5|knownDict,1,1,,,,,,,0
 field = requiresBodyId|2|boolean,1,1,,,,,,,0
 field = searchRequest|3
 field = searchRequestId|4|idLong:searchRequest,0,1,,,,,,,0
 field = supportedOrderBy|6|struct:supportedOrderBy,0,,,,,,,,0
 number = 1459
 returnType = success
   description = searchRequest store
   field = name|,,Limits the search to an object with exactly the same value in this field.
   field = request|,,Limits the search to an object with exactly the same value in this field.
   field = requiresBodyId|,,Limits the search to an object with exactly the same value in this field.
   field = searchRequestId|,,Limits the search to an object with exactly the same value in this field.
   field = supportedOrderBy|,,Limits the search to an object with exactly the same value in this field.

********** operation = seasonOfferRemove (NO)
 field = partnerId|1|idInt:partner,0,1,,,,,,,0
 field = partnerSeasonOfferId|2|string,0,1,,,,,,100,0
 field = seasonOfferId|3|idLong:seasonOffer,0,1,,,,,,,0
 isFrozen = true
 number = 806
 returnType = success
   description = Remove a seasonOffer object.  You must specify the seasonOfferId.
   field = partnerId|,,Limits the search to an object with exactly the same value in this field.
   field = partnerSeasonOfferId|,,Limits the search to an object with exactly the same value in this field.
   field = seasonOfferId|,,Limits the search to an object with exactly the same value in this field.
   fieldProject = partnerId|0|0|0|partner-cds
   fieldProject = partnerSeasonOfferId|0|0|0|partner-cds
   fieldProject = seasonOfferId|0|0|0|partner-cds
   project = seasonOfferRemove|0|0|0|partner-cds

********** operation = seasonOfferSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = collectionId|3|idLong:collection,0,1,,,,,,,0
 field = count|4|int,0,1,,1,,,1,,0
 field = format|5|enum:format,0,1,,,,,,,0
 field = groupBy|6|string,0,,,,,,,32,0
 field = levelOfDetail|7|enum:levelOfDetail,0,1,,,,,,,0
 field = maxCreateDate|18|dateTime,0,1,,,,,,,0
 field = maxUpdateDate|17|dateTime,0,1,,,,,,,0
 field = minCreateDate|19|dateTime,0,1,,,,,,,0
 field = minUpdateDate|8|dateTime,0,1,,,,,,,0
 field = note|9|string,0,,,,,,,,0
 field = offset|10|int,0,1,,0,,,,,0
 field = orderBy|11|string,0,,,,,,,32,0
 field = partnerId|12|idInt:partner,0,1,,,,,,,0
 field = partnerSeasonOfferId|13|string,0,1,,,,,,100,0
 field = removeField|14|string,0,,,,,2,,,0
 field = responseTemplate|20|struct:responseTemplate,0,,,,,,,,0
 field = seasonOfferId|15|idLong:seasonOffer,0,1,,,,,,,0
 field = useAnchorOperation|16|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 isFrozen = true
 number = 807
 returnType = seasonOfferList
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = collectionId|,,Limits the search to an object with exactly the same value in this field.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = partnerId|,,Limits the search to an object with exactly the same value in this field.
   field = partnerSeasonOfferId|,,Limits the search to an object with exactly the same value in this field.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = seasonOfferId|,,Limits the search to an object with exactly the same value in this field.
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = collectionId|0|0|0|partner-cds
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = partnerId|0|0|0|partner-cds
   fieldProject = partnerSeasonOfferId|0|0|0|partner-cds
   fieldProject = responseTemplate|0|0|0|all
   fieldProject = seasonOfferId|0|0|0|partner-cds

********** operation = seasonOfferStore (NO)
 field = collectionId|1|idLong:collection,1,1,low,,,,,,0
 field = description|2|string,0,1,low,,,,,4096,0
 field = partnerId|3|idInt:partner,1,1,low,,,,,,0
 field = partnerSeasonOfferId|4|string,0,1,low,,,,,100,0
 field = price|5|currency,0,1,medium,,,,,,0
 field = seasonNumber|6|int,1,1,low,,,,,,0
 field = seasonOfferId|7|idLong:seasonOffer,0,1,low,,,,,,0
 field = title|8|string,0,1,low,,,,,128,0
 isFrozen = true
 number = 808
 returnType = seasonOffer
   description = Stores a new or a modified seasonOfferobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = description|,,Description of the season.  If not present, this is set to the description of the collection.
   field = partnerId|,,Id of the partner that created the seasonOffer.
   field = partnerSeasonOfferId|,,The partner's own seasonOfferId.
   field = title|,,Title of the season.  If not present, this is set to the title of the collection.
   fieldProject = collectionId|0|0|0|partner-cds
   fieldProject = description|0|0|0|partner-cds
   fieldProject = partnerId|0|0|0|partner-cds
   fieldProject = partnerSeasonOfferId|0|0|0|partner-cds
   fieldProject = price|0|0|0|partner-cds
   fieldProject = seasonNumber|0|0|0|partner-cds
   fieldProject = seasonOfferId|0|0|0|partner-cds
   fieldProject = title|0|0|0|partner-cds
   project = seasonOfferStore|0|0|0|partner-cds

********** operation = secureBlobInstructionsGet (NO)
 field = bodyId|1|idBody:body,1,1,low,,,,,,0
 field = callId|2|string,1,1,low,,,,,,0
 field = payloadId|7|string,0,,low,,,,,,0
 field = payloadIdentifier|6
 field = requestToken|3|anyDict,0,1,low,,,,,,0
 field = softwareVersion|4|string,1,1,low,,,,,,0
 field = userInitiated|5|boolean,1,1,low,,,,,,0
 number = 1751
 returnType = secureBlobInstructions
   description = This operation will return the set of secure objects/blobs that the body should be using now.  This may include certificates, keys, or other arbitrary objects needed by the body.  Any of these such objects should be returned as encrypted within the response, as it's intended that this operation is invoked over HTTP.
   field = callId|,,A session ID.  Historically, a session of a Service call is called a "call". Using "callId" here enables more straightforward correlation to the trackerDb. Typically, the client would send Unix time, in seconds. This same value should be used as the callId for the entire session, meaning the invocation of callInstructionsGet plus each of the subsequent invocations of sub-operations, if any.
   field = payloadId|,,An opaque string identifier, intended to uniquely identify the payload of an associated secure blob instance.  A client may use this field to indicate the payloadIds of all the payloads already received.  secureBlobInstructionsGet will omit any secure blob from the response that would contain a payload matching a payloadId mentioned here in this field.  The intent is to provide a way for the client to avoid having to process a secure blob unnecessarily.
   field = requestToken|,,Typically the "resultToken" of the previous *InstructionsGet response. If this is the first call, then this field is omitted. As an anyDict field, we have extensibility here.
   field = softwareVersion|,,The currently installed software version on the body. This field is mostly intended for informational logging and potentially identifying what software features are currently available to the client.
   field = userInitiated|,,Was this invocation initiated by explicit user action, rather than programmatically, based on callbackSeconds information? This is mainly informational.

********** operation = sendXmppAction (NO)
 field = bodyId|1|idBody:anyBody,1,1,,,,,,,0
 field = data|4|anyDict,0,1,,,,,,,0
 field = databaseName|2|enum:databaseName,0,,,,,,,,0
 field = xmppAction|3|enum:xmppActions,1,1,,,,,,,0
 number = 496
 returnType = success
   description = send out an xmppaction message via xmpp 
   field = data|,,extra data to include in the XMPP message.
   field = databaseName|,,db names to be syncd (if action is triosync)
   field = xmppAction|,,xmppaction to send

********** operation = serviceClusterCleanup (NO)
 field = cleanupType|1|enum:serviceClusterCleanupType,1,1,,,,,,,0
 field = database|2|enum:serviceClusterCleanupDatabase,0,,,,,,,,0
 field = excludeDatabase|3|enum:serviceClusterCleanupDatabase,0,,,,,,,,0
 field = maxUpdateDate|4|dateTime,0,1,,,,,,,0
 field = partnerId|5|idInt:partner,0,1,,,,,,,0
 number = 497
 returnType = success
   description = cleanup data in the service database. will support a variety of cleanup methods, but for now cleanup by maxUpdateDate, with an optional partnerId filter.
   field = cleanupType|,,the type of cleanup.
   field = database|,,which databases to clean up. if empty, defaults to all.
   field = excludeDatabase|,,which databases not to clean up. if empty, defaults to none.
   field = maxUpdateDate|,,everything cleaned up must be older than this date
   field = partnerId|,,a partnerId to filter what should be cleaned up

********** operation = serviceClusterDataSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = count|3|int,0,1,,1,,,1,,0
 field = excludePartnerId|4|idInt:partner,0,,,,,,,,0
 field = format|5|enum:format,0,1,,,,,,,0
 field = groupBy|6|string,0,,,,,,,32,0
 field = levelOfDetail|7|enum:levelOfDetail,0,1,,,,,,,0
 field = maxCreateDate|17|dateTime,0,1,,,,,,,0
 field = maxUpdateDate|16|dateTime,0,1,,,,,,,0
 field = minCreateDate|18|dateTime,0,1,,,,,,,0
 field = minUpdateDate|8|dateTime,0,1,,,,,,,0
 field = noLimit|20|boolean,0,1,,,,,,,0
 field = note|9|string,0,,,,,,,,0
 field = offset|10|int,0,1,,0,,,,,0
 field = orderBy|11|string,0,,,,,,,32,0
 field = partnerId|15|idInt:partner,0,1,,,,,,,0
 field = removeField|12|string,0,,,,,2,,,0
 field = resetPartnerId|14
 field = responseTemplate|19|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|13|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 isFrozen = true
 number = 500
 returnType = serviceClusterDataList
   description = Returns all authored serviceClusterData for the given criteria
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = excludePartnerId|,,Excludes all data published by this partner
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = noLimit|,,Sets the noLimit parameter for this search
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = partnerId|,,Returns all data published by this partner
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = serviceClusterDataStore (NO)
 field = asset|1|struct:asset,0,,low,,,,,,0
 field = bodyUser|12|struct:bodyUser,0,,low,,,,,,0
 field = candyBarControl|20|struct:candyBarControl,0,,low,,,,,,0
 field = category|2|struct:category,0,,low,,,,,,0
 field = collection|3|struct:collection,0,,low,,,,,,0
 field = content|4|struct:content,0,,low,,,,,,0
 field = friendComposite|13|struct:friendComposite,0,,low,,,,,,0
 field = friendSet|14|struct:friendSet,0,,low,,,,,,0
 field = mix|5|struct:mix,0,,low,,,,,,0
 field = mixMapping|6|struct:mixMapping,0,,low,,,,,,0
 field = name|7|struct:name,0,,low,,,,,,0
 field = neoUser|15|struct:neoUser,0,,low,,,,,,0
 field = objectProductOverride|11
 field = offer|8|struct:offer,0,,low,,,,,,0
 field = offerLocality|26|struct:offerLocality,0,,low,,,,,,0
 field = person|9|struct:person,0,,low,,,,,,0
 field = promotionalItem|25|struct:promotionalItem,0,,low,,,,,,0
 field = searchRequest|24|struct:searchRequest,0,,low,,,,,,0
 field = seasonOffer|10|struct:seasonOffer,0,,low,,,,,,0
 field = socialFriend|16|struct:socialFriend,0,,low,,,,,,0
 field = socialIdentity|17|struct:socialIdentity,0,,low,,,,,,0
 field = socialNetwork|18|struct:socialNetwork,0,,low,,,,,,0
 field = socialUser|19|struct:socialUser,0,,low,,,,,,0
 field = uiDestination|21|struct:uiDestination,0,,low,,,,,,0
 field = uiDestinationInstance|22|struct:uiDestinationInstance,0,,low,,,,,,0
 field = uiTransition|23|struct:uiTransition,0,,low,,,,,,0
 fieldGroup = serviceClusterDataFields
 isFrozen = true
 number = 501
 returnType = success
   description = Stores serviceClusterData in the mind

********** operation = serviceConfigurationRemove (NO)
 field = headendId|1|string,1,1,,,,,,,0
 field = partnerConfigurationGroup|2|string,1,1,,,,,,,0
 field = partnerId|3|idInt:partner,1,1,,,,,,,0
 field = serviceType|4|enum:partnerServiceType,1,1,,,,,,,0
 number = 2060
 returnType = success
   description = Removes a serviceConfiguration object from the mind.

********** operation = serviceConfigurationSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = count|3|int,0,1,,1,,,1,,0
 field = format|4|enum:format,0,1,,,,,,,0
 field = groupBy|5|string,0,,,,,,,32,0
 field = headendId|6|string,0,1,,,,,,,0
 field = includeDefault|19|boolean,0,1,,false,,,,,0
 field = isDefault|7|boolean,0,1,,,,,,,0
 field = levelOfDetail|8|enum:levelOfDetail,0,1,,,,,,,0
 field = note|9|string,0,,,,,,,,0
 field = offset|10|int,0,1,,0,,,,,0
 field = orderBy|11|string,0,,,,,,,32,0
 field = partnerConfigurationGroup|12|string,0,1,,,,,,,0
 field = partnerId|13|idInt:partner,0,1,,,,,,,0
 field = removeField|14|string,0,,,,,2,,,0
 field = responseTemplate|15|struct:responseTemplate,0,,,,,,,,0
 field = serviceType|16|enum:partnerServiceType,0,1,,,,,,,0
 field = supportedTiVoDataCenterSubclass|17|string,0,,,,,,,,0
 field = useAnchorOperation|18|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 number = 2061
 orderBy = headendId
 orderBy = partnerConfigurationGroup
 orderBy = partnerId
 orderBy = serviceType
 returnType = serviceConfigurationList
   description = partner service configuration search operation
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = includeDefault|,,If set to true, then the result list will include any serviceConfiguration marked as "isDefault=true" that still matches the other search filters besides partnerConfigurationGroup.
   field = isDefault|,,one default per partnerId/headendId/serviceType
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = partnerId|,,Limits the search to an object with exactly the same value in this field.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = serviceConfigurationStore (NO)
 field = headendId|1|string,1,1,low,,,,,48,0
 field = isDefault|2|boolean,0,1,low,false,,,,,0
 field = partnerConfigurationGroup|3|string,0,1,low,,,,,20,0
 field = partnerId|4|idInt:partner,1,1,low,,,,,,0
 field = partnerServiceConfiguration|5|union:partnerServiceConfiguration,1,1,low,,,,,,0
 field = serviceType|6|enum:partnerServiceType,1,1,low,,,,,,0
 field = supportedTiVoDataCenterSubclass|7|string,0,,low,,,,,,0
 number = 2062
 returnType = serviceConfiguration
   description = Stores a new or a modified serviceConfigurationobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = isDefault|,,Only one default is allowed for partnerId, headendId, service type, but independent of the partnerConfigurationGroup. Could have a default set with or without a partnerConfigurationGroup specified. If partnerConfigurationGroup is not specified, isDefault is set to true automatically.
   field = partnerConfigurationGroup|,,Name of partner configuration group
   field = partnerServiceConfiguration|,,One service specific configuration parameters for one service.   For IPPV Service: listOfHostAndPort, useHttps, ippvProtocalVersion;   For VPN Service:  listOfHostAndPort, protocol, gatewayIp, nonDiscoverableHost;   For SDV Service:  homeHuntFrequencies, markedFrequency,                     mcmisProtocolVersion, ccmisProtocolVersion;   For VOD Service:  vodSiteId;
   field = supportedTiVoDataCenterSubclass|,,A list of supported TiVo datacenter subclasses

********** operation = serviceGroupPartnerExclusionRemove (NO)
 field = partnerId|1|idInt:partner,0,1,,,,,,,0
 field = serviceGroup|2|string,1,1,,,,,,,0
 isFrozen = true
 number = 1786
 returnType = success
   field = partnerId|,,Limits the search to an object with exactly the same value in this field.
   field = serviceGroup|,,Limits the search to an object with exactly the same value in this field.

********** operation = serviceGroupPartnerExclusionSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = bodyId|3|idBody:body,0,1,,,,,,,0
 field = count|4|int,0,1,,1,,,1,,0
 field = format|5|enum:format,0,1,,,,,,,0
 field = groupBy|6|string,0,,,,,,,32,0
 field = levelOfDetail|7|enum:levelOfDetail,0,1,,,,,,,0
 field = noLimit|8|boolean,0,1,,,,,,,0
 field = note|9|string,0,,,,,,,,0
 field = offset|10|int,0,1,,0,,,,,0
 field = orderBy|11|string,0,,,,,,,32,0
 field = partnerId|12|idInt:partner,0,1,,,,,,,0
 field = removeField|13|string,0,,,,,2,,,0
 field = responseTemplate|14|struct:responseTemplate,0,,,,,,,,0
 field = serviceGroup|15|string,1,1,,,,,,,0
 field = serviceGroupPartnerExclusionId|16|idInt:serviceGroupPartnerExclusion,0,1,,,,,,,0
 field = useAnchorOperation|17|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 isFrozen = true
 number = 1787
 returnType = serviceGroupPartnerExclusionList
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = bodyId|,,Filter by service groups that are associated with this bodyId
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = noLimit|,,Do not limit this search to a given count.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = partnerId|,,Limits the search to an object with exactly the same value in this field.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = serviceGroup|,,Limits the search to an object with exactly the same value in this field.
   field = serviceGroupPartnerExclusionId|,,Limits the search to an object with exactly the same value in this field.
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = serviceGroupPartnerExclusionStore (NO)
 field = exception|4|string,0,1,low,,,,,64,0
 field = partnerId|1|idInt:partner,1,1,low,,,,,,0
 field = serviceGroup|2|string,1,1,low,,,,,,0
 field = serviceGroupPartnerExclusionId|3|idInt:serviceGroupPartnerExclusion,0,1,low,,,,,,0
 isFrozen = true
 number = 1788
 returnType = serviceGroupPartnerExclusion
   description = Stores a new or a modified serviceGroupPartnerExclusionobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = exception|,,exception is a serviceGroup. When exception is specified, then a body with such exception serviceGroup should not exclude partnerId.

********** operation = serviceGroupPartnerInclusionRemove (NO)
 field = partnerId|1|idInt:partner,0,1,,,,,,,0
 field = serviceGroup|2|string,1,1,,,,,,,0
 isFrozen = true
 number = 1800
 returnType = success
   field = partnerId|,,Limits the search to an object with exactly the same value in this field.
   field = serviceGroup|,,Limits the search to an object with exactly the same value in this field.

********** operation = serviceGroupPartnerInclusionSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = bodyId|3|idBody:body,0,1,,,,,,,0
 field = count|4|int,0,1,,1,,,1,,0
 field = format|5|enum:format,0,1,,,,,,,0
 field = groupBy|6|string,0,,,,,,,32,0
 field = levelOfDetail|7|enum:levelOfDetail,0,1,,,,,,,0
 field = noLimit|8|boolean,0,1,,,,,,,0
 field = note|9|string,0,,,,,,,,0
 field = offset|10|int,0,1,,0,,,,,0
 field = orderBy|11|string,0,,,,,,,32,0
 field = partnerId|12|idInt:partner,0,1,,,,,,,0
 field = removeField|13|string,0,,,,,2,,,0
 field = responseTemplate|14|struct:responseTemplate,0,,,,,,,,0
 field = serviceGroup|15|string,1,1,,,,,,,0
 field = serviceGroupPartnerInclusionId|16|idInt:serviceGroupPartnerInclusion,0,1,,,,,,,0
 field = useAnchorOperation|17|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 isFrozen = true
 number = 1801
 returnType = serviceGroupPartnerInclusionList
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = bodyId|,,Filter by service groups that are associated with this bodyId
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = noLimit|,,Do not limit this search to a given count.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = partnerId|,,Limits the search to an object with exactly the same value in this field.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = serviceGroup|,,Limits the search to an object with exactly the same value in this field.
   field = serviceGroupPartnerInclusionId|,,Limits the search to an object with exactly the same value in this field.
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = serviceGroupPartnerInclusionStore (NO)
 field = partnerId|1|idInt:partner,1,1,low,,,,,,0
 field = serviceGroup|2|string,1,1,low,,,,,,0
 field = serviceGroupPartnerInclusionId|3|idInt:serviceGroupPartnerInclusion,0,1,low,,,,,,0
 isFrozen = true
 number = 1802
 returnType = serviceGroupPartnerInclusion
   description = Stores a new or a modified serviceGroupPartnerInclusionobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.

********** operation = serviceGroupRemove (NO)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 field = group|2|struct:serviceGroup,1,1,,,,,,,0
 number = 1130
 returnType = success
   description = remove body from a group within a group type.

********** operation = serviceGroupSearch (NO)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 isFrozen = true
 number = 774
 returnType = serviceGroupList
   description = Retruns the list of service groups a body belongs to

********** operation = serviceGroupStore (NO)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 field = group|2|struct:serviceGroup,1,1,,,,,,,0
 number = 1131
 returnType = success
   description = add body to a group within a group type.

********** operation = serviceLocationInstructionsGet (NO)
 field = bodyId|1|idBody:body,1,1,low,,,,,,0
 field = callId|2|string,1,1,low,,,,,,0
 field = requestToken|3|anyDict,0,1,low,,,,,,0
 field = softwareVersion|4|string,1,1,low,,,,,,0
 field = userInitiated|5|boolean,1,1,low,,,,,,0
 number = 1843
 returnType = serviceLocationInstructions
   description = This operation tells the body the current service locations to use.  A change in the returned value of this response can be used to tell a body to switch between Staging and Production environments, for example.
   field = callId|,,A session ID.  Historically, a session of a Service call is called a "call". Using "callId" here enables more straightforward correlation to the trackerDb. Typically, the client would send Unix time, in seconds. This same value should be used as the callId for the entire session, meaning the invocation of callInstructionsGet plus each of the subsequent invocations of sub-operations, if any.
   field = requestToken|,,Typically the "resultToken" of the previous *InstructionsGet response. If this is the first call, then this field is omitted. As an anyDict field, we have extensibility here.
   field = softwareVersion|,,The currently installed software version on the body. This field is mostly intended for informational logging and potentially identifying what software features are currently available to the client.
   field = userInitiated|,,Was this invocation initiated by explicit user action, rather than programmatically, based on callbackSeconds information? This is mainly informational.

********** operation = serviceStateEventRegister (YES)
 number = 503
 returnType = serviceStateEvent
   description = Registers for serviceStateEvent events, which report when the service state of the DVR changes - either due to service being turned off, or the hard drive failing, or Emergency Alert Service interruptions occurring, or any of these conditions being reverted to normal enabled state.

********** operation = serviceTypeSearch (NO)
 field = accountId|1|idLong:accountSap,1,1,low,,,,,,0
 field = partnerId|2|idInt:partner,0,1,low,,,,,,0
 fieldGroup = serviceTypeSearchFields
 fieldGroup = headerFields
 number = 506
 returnType = serviceTypeList
   description = Get the ServiceType.
   field = accountId|,,Search service types by account id
   field = partnerId|,,Partner Id field.  determined by the client certificate

********** operation = sessionTokenGet (NO)
 field = apiKey|1|string,1,1,,,,,,,0
 field = password|2|string,1,1,,,,,,,0
 field = username|3|string,1,1,,,,,,,0
 isFrozen = true
 number = 1782
 returnType = sessionToken
   description = Get a session token which is passed as a URL parameter in subsequent requests as a method of providing authentication for that request.

********** operation = sessionTokenRemove (NO)
 field = apiKey|1
 field = password|2
 field = sessionToken|5
 field = token|4|string,1,1,low,,,,,,0
 field = username|3
 isFrozen = true
 number = 1783
 returnType = success
   description = Invalidate this session token for future requests to the mind. This is the same as logout.
   field = token|,,Our session token generated from sessionTokenGet

********** operation = setParentalControlsPinRequest (NO)
   description = Sent to set the parental controls PIN, potentially to nothing which disables parental controls, unless the temporarilyDisable field is set, in which case parental controls is only temporarily disabled.
   field = currentPin|,,This is the current value of the parental controls PIN; the PIN will only be changed in the parental controls system if this matches the current parental controls PIN.  It parental controls is currently not enabled, and thus there is no current parental controls PIN, then this value is optional and if it does have a value, it will be ignored.
   field = newPin|,,This is the value to set the parental controls PIN to.  If this value is not provided, then parental controls is disabled or temporarily disabled (depending upon the presence and value of the temporarilyDisable field).
   field = temporarilyDisable|,,If newPin is not present, indicating that parental controls is to be disabled, then if this field is present and true, then parental controls will only be temporarily disabled, not permanently disabled.

********** operation = setPurchaseControlPinRequest (NO)
   description = Sent to set the purchase control PIN, potentially to nothing which disables purchase control.  These are the legal ways to call this operation:  1) neither newPin nor useParentalControlsPin is set: disable 2) newPin is set, useParentalControlsPin is not: enable with given PIN 3) newPin is not set, useParentalControls is true:    enable using the parental controls PIN
   field = currentPin|,,This is the current value of the purchase control PIN; the PIN will only be changed in the purchase control system if this matches the current purchase control PIN.  If purchase control is currently not enabled, and thus there is no current purchase control PIN, then this value is optional and if it does have a value, it will be ignored.
   field = newPin|,,This is the value to set the purchase control PIN to.  If this value is not provided, then purchase control is disabled unless useParentalControlsPin is set to true, in which case, purchase controls will be enabled with the PIN set to the parental controls PIN

********** operation = settingsGet (YES)
 field = bodyId|1|idBody:body,0,1,,,,,,,0
 field = defaults|2|boolean,0,1,,,,,,,0
 field = settingGroup|3|enum:settingGroup,1,1,,,,,,,0
 field = userId|4|idLong:user,0,1,,,,,,,0
 number = 511
 returnType = knownDict
   description = Operation to retrieve settings for a body and or user settings dictionary.  All settings are always retrieved.  If the settingGroup is set to "audio", this dictionary should be an audioSettings;  "display", displaySettings; "parentalControls",  parentalControlsSettings; "recording", recordingSettings; "standbyMode",  standbyModeSettings; "systemInfo", systemInfoSettings; "video",  videoSettings
   field = bodyId|,,The id of the body to retrieve these settings for.
   field = defaults|,,Setting this value to true will query for the default values for the specified settings group; not setting it at all, or setting it to false, will result in a query for the current valus for the specified settings group
   field = settingGroup|,,Setting Group.
   field = userId|,,The id of the user to retrieve these settings for.

********** operation = settingsStore (NO)
   description = Operation to storesettings for a body and or user.  The settings field contains the actual settings to set as a dictionary.  Within this dictionary, any values which are not provided are left unchanged.  In other words, you only have to provide the settings that you actually want to change.  There are a couple of exceptions in the Parental Controls settings structure though, for fields which are multi-valued.  For those, a separate field is provided to indicate whether or not the value should be changed.
   field = bodyId|,,The id of the body to save these settings for.
   field = settingGroup|,,Setting Group.
   field = settings|,,settings dictionary.  If the settingGroup is set to "audio", this dictionary should be a audioSettings;  "display", displaySettings; "parentalControls", parentalControlsSettings; "recording", recordingSettings; "standbyMode", standbyModeSettings; "video", videoSettings; NOTE that "systemInfo" is not a valid  setting here as systemInfo settings are immutable and cannot be stored, only queried
   field = userId|,,The id of the user to save these settings for.

********** operation = showCardSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = collectionId|3|idLong:collection,0,1,,,,,,,0
 field = count|4|int,0,1,,1,,,1,,0
 field = format|5|enum:format,0,1,,,,,,,0
 field = groupBy|6|string,0,,,,,,,32,0
 field = levelOfDetail|7|enum:levelOfDetail,0,1,,,,,,,0
 field = note|8|string,0,,,,,,,,0
 field = offset|9|int,0,1,,0,,,,,0
 field = orderBy|10|string,0,,,,,,,32,0
 field = removeField|11|string,0,,,,,2,,,0
 field = responseTemplate|13|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|12|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 isFrozen = true
 number = 515
 returnType = showCardList
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = collectionId|,,Limits the search to an object with exactly the same value in this field.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = showIdentifierRankingRemove (NO)
 field = partnerId|1|idInt:partner,0,,,,,,,,0
 field = partnerShowIdentifierRankingId|2|string,0,,,,,,,100,0
 number = 1707
 returnType = success
   field = partnerId|,,Limits the search to an object with exactly the same value in this field.
   field = partnerShowIdentifierRankingId|,,Limits the search to an object with exactly the same value in this field.

********** operation = showIdentifierRankingSearch (NO)
 field = collectionId|1|idLong:collection,0,1,,,,,,,0
 field = collectionType|2|enum:collectionType,0,,,,,,,,0
 field = contentId|3|idLong:content,0,1,,,,,,,0
 field = count|4|int,0,1,,1,,,1,,0
 field = format|5|enum:format,0,1,,,,,,,0
 field = groupBy|6|string,0,,,,,,,32,0
 field = levelOfDetail|7|enum:levelOfDetail,0,1,,,,,,,0
 field = note|8|string,0,,,,,,,,0
 field = offerId|9|idString:offer,0,1,,,,,,,0
 field = offset|10|int,0,1,,0,,,,,0
 field = orderBy|11|string,0,,,,,,,32,0
 field = ordering|12|enum:showIdentifierRankingType,0,,,,,,,,0
 field = partnerId|13|idInt:partner,0,,,,,,,,0
 field = partnerShowIdentifierRankingId|14|string,0,,,,,,,100,0
 field = responseTemplate|15|struct:responseTemplate,0,,,,,,,,0
 field = showIdentifierRankingId|16|idInt:showIdentifierRanking,0,,,,,,,,0
 field = source|17|string,0,1,,,,,,4096,0
 field = sourcePrefix|18|string,0,1,,,,,,4096,0
 fieldGroup = searchFieldsNoAnchoring
 fieldGroup = showIdentifierSearchFields
 number = 1708
 orderBy = ordering
 orderBy = partnerId
 orderBy = partnerShowIdentifierRankingId
 orderBy = updateDate
 returnType = showIdentifierRankingList
   field = collectionId|,,Limits the search to an object with exactly the same value in this field.
   field = collectionType|,,Limits the search to an object with exactly the same value in this field.
   field = contentId|,,Limits the search to an object with exactly the same value in this field.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offerId|,,Limits the search to an object with exactly the same value in this field.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = ordering|,,Limits the search to an object with exactly the same value in this field.
   field = partnerId|,,Limits the search to an object with exactly the same value in this field.
   field = partnerShowIdentifierRankingId|,,Limits the search to an object with exactly the same value in this field.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = showIdentifierRankingId|,,Limits the search to an object with exactly the same value in this field.
   field = source|,,Limits the search to an object with exactly the same value in this field.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = showIdentifierRankingStore (NO)
   field = collectionId|,,When specified, the showIdentifiers will be built from these collectionIds
   field = collectionType|,,To which kinds of collections does this showIdentifierRanking apply?
   field = contentId|,,When specified, the showIdentifiers will be built from these contentids, with the collectionIds filled in automatically.
   field = offerId|,,When specified, the showIdentifiers will be built from these offerIds, with the corresponding contentIds and collectionIds filled in automatically.
   field = ordering|,,How are the show identifiers ranked?
   field = partnerOfferId|,,When specified, the showIdentifiers will be built from these partnerOfferIds, with the corresponding offerIds, contentIds and collectionIds filled in automatically.
   field = partnerShowIdentifierRankingId|,,The partner-assigned identifier for the ranking. when combined with the partnerId, specifies the primary key.
   field = source|,,source of the ranking. often a URL.

********** operation = showIdentifierSearch (NO)
 field = collapseBy|1|enum:showIdentifierCollapseType,0,1,,offer,,,,,0
 field = collectionType|2|enum:collectionType,0,,,,,,,,0
 field = count|3|int,0,1,,1,,,1,,0
 field = format|4
 field = groupBy|5
 field = levelOfDetail|6|enum:levelOfDetail,0,1,,,,,,,0
 field = note|7
 field = offset|8|int,0,1,,0,,,,,0
 field = orderBy|9
 field = ordering|10|enum:showIdentifierRankingType,0,,,,,,,,0
 field = partnerId|11|idInt:partner,0,,,,,,,,0
 field = partnerShowIdentifierRankingId|12|string,0,,,,,,,100,0
 field = responseTemplate|13|struct:responseTemplate,0,,,,,,,,0
 fieldGroup = searchFieldsCore
 fieldGroup = showIdentifierSearchFields
 number = 1710
 returnType = showIdentifierList
   description = collapse one or more showIdentifierRankings into a single list of showIdentifiers. The list is a total ordering, first by rank, then by showIdentifierRankingId. The rankings can be collapsed either by offer, by content, or by collection.
   field = collapseBy|,,if content, collapse same-content offers into one showIdentifier. if collection, collaps same-collection content and/or offers into one showIdentifier.
   field = collectionType|,,Limits the search to an object with exactly the same value in this field.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = ordering|,,Limits the search to an object with exactly the same value in this field.
   field = partnerId|,,Limits the search to an object with exactly the same value in this field.
   field = partnerShowIdentifierRankingId|,,Limits the search to an object with exactly the same value in this field.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   fieldProject = count|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = showcaseStateSearch (NO)
 field = showcaseIdentifier|1|string,1,,,,,,,,0
 number = 1035
 returnType = showcaseStateList
   field = showcaseIdentifier|,,Multiple will be ORd together

********** operation = showingStore (NO)
 field = contentId|1|long,0,1,,,,,,,0
 field = endTime|2|dateTime,0,1,,,,,,,0
 field = originalStartTime|3|dateTime,1,1,,,,,,,0
 field = startTime|4|dateTime,1,1,,,,,,,0
 field = stationId|5|long,1,1,,,,,,,0
 field = title|6|string,0,1,low,,,,,,0
 number = 518
 returnType = showing
   description = testPgdShowingsStore, startTime, stationId are must for store  Operation restricted to CALLSIGN "TIVOQE%"
   field = contentId|,,contentId for test showings
   field = endTime|,,endTime of showing
   field = originalStartTime|,,original startTime of showing
   field = startTime|,,new startTime of showing
   field = stationId|,,stationId for test showings
   field = title|,,Title of showing

********** operation = socialAlbumSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = count|3|int,0,1,,1,,,1,,0
 field = format|4|enum:format,0,1,,,,,,,0
 field = groupBy|5|string,0,,,,,,,32,0
 field = levelOfDetail|6|enum:levelOfDetail,0,1,,,,,,,0
 field = maxSubEventCount|15|int,0,1,,1,,,,,0
 field = note|7|string,0,,,,,,,,0
 field = offset|8|int,0,1,,0,,,,,0
 field = orderBy|9|string,0,,,,,,,32,0
 field = owner|10|idString:socialPerson,0,1,,,,,,,0
 field = removeField|11|string,0,,,,,2,,,0
 field = responseTemplate|16|struct:responseTemplate,0,,,,,,,,0
 field = socialAlbumId|12|string,0,1,,,,,,,0
 field = useAnchorOperation|13|boolean,0,1,,true,,,,,0
 field = userId|14|idLong:user,1,1,,,,,,,0
 fieldGroup = searchFields
 number = 1529
 returnType = socialAlbumList
   description = Search social albums of a given user.
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = maxSubEventCount|,,Specify the max number of subEvents - per subEvent type - to return per album.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = owner|,,Limits the search to an object with exactly the same value in this field.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = socialAlbumId|,,Limits the search to an object with exactly the same value in this field.
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   field = userId|,,The Neo user whose social networks should be used to do the search.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = socialFriendRemove (NO)
 field = socialFriendId|1|idInt:socialFriend,1,1,,,,,,,0
 isFrozen = true
 number = 1329
 returnType = success
   description = Removes a socialFriend object from the mind.

********** operation = socialFriendSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = count|3|int,0,1,,1,,,1,,0
 field = format|4|enum:format,0,1,,,,,,,0
 field = friendCompositeId|5|idInt:friendComposite,0,1,,,,,,,0
 field = groupBy|6|string,0,,,,,,,32,0
 field = levelOfDetail|7|enum:levelOfDetail,0,1,,,,,,,0
 field = neoUserId|17|idInt:neoUser,0,1,,,,,,,0
 field = note|8|string,0,,,,,,,,0
 field = offset|9|int,0,1,,0,,,,,0
 field = orderBy|10|string,0,,,,,,,32,0
 field = removeField|11|string,0,,,,,2,,,0
 field = responseTemplate|19|struct:responseTemplate,0,,,,,,,,0
 field = socialFriendId|12|idInt:socialFriend,0,1,,,,,,,0
 field = socialFriendSetId|13|idInt:socialFriendSet,0,1,,,,,,,0
 field = socialIdentityId|14|idInt:socialIdentity,0,1,,,,,,,0
 field = socialNetworkId|18|idInt:socialNetwork,0,1,,,,,,,0
 field = socialUserId|15|idInt:socialUser,0,1,,,,,,,0
 field = useAnchorOperation|16|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 number = 1330
 returnType = socialFriendList
   description = search for a socialFriend by: one of socialFriendId, socialUserId, socialIdentityId, friendCompositeId, socialFriendSetId      
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = friendCompositeId|,,Limits the search to an object with exactly the same value in this field.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = neoUserId|,,Limits the search to an object with exactly the same value in this field.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = socialFriendId|,,Limits the search to an object with exactly the same value in this field.
   field = socialFriendSetId|,,Limits the search to an object with exactly the same value in this field.
   field = socialIdentityId|,,Limits the search to an object with exactly the same value in this field.
   field = socialNetworkId|,,Limits the search to an object with exactly the same value in this field.
   field = socialUserId|,,Limits the search to an object with exactly the same value in this field.
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = socialFriendSetRemove (NO)
 field = socialFriendSetId|1|idInt:socialFriendSet,1,1,,,,,,,0
 isFrozen = true
 number = 1333
 returnType = success
   description = Removes a socialFriendSet object from the mind.

********** operation = socialFriendSetSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = count|3|int,0,1,,1,,,1,,0
 field = format|4|enum:format,0,1,,,,,,,0
 field = friendSetId|5|idInt:friendSet,0,1,,,,,,,0
 field = groupBy|6|string,0,,,,,,,32,0
 field = levelOfDetail|7|enum:levelOfDetail,0,1,,,,,,,0
 field = note|8|string,0,,,,,,,,0
 field = offset|9|int,0,1,,0,,,,,0
 field = orderBy|10|string,0,,,,,,,32,0
 field = removeField|11|string,0,,,,,2,,,0
 field = responseTemplate|15|struct:responseTemplate,0,,,,,,,,0
 field = socialFriendSetId|12|idInt:socialFriendSet,0,1,,,,,,,0
 field = socialIdentityId|13|idInt:socialIdentity,0,1,,,,,,,0
 field = useAnchorOperation|14|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 number = 1334
 returnType = socialFriendSetList
   description = search for a socialFriendSet by socialFriendSetId, friendSetId, socialFriendId, socialIdentityId
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = friendSetId|,,Limits the search to an object with exactly the same value in this field.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = socialFriendSetId|,,Limits the search to an object with exactly the same value in this field.
   field = socialIdentityId|,,Limits the search to an object with exactly the same value in this field.
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = socialFriendSetSocialFriendMappingRemove (NO)
 field = socialFriendId|1|idInt:socialFriend,1,1,,,,,,,0
 field = socialFriendSetId|2|idInt:socialFriendSet,1,1,,,,,,,0
 number = 1384
 returnType = success
   description = Removes a socialFriendSetSocialFriendMapping object from the mind.

********** operation = socialFriendSetSocialFriendMappingSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = count|3|int,0,1,,1,,,1,,0
 field = format|4|enum:format,0,1,,,,,,,0
 field = groupBy|5|string,0,,,,,,,32,0
 field = levelOfDetail|6|enum:levelOfDetail,0,1,,,,,,,0
 field = note|7|string,0,,,,,,,,0
 field = offset|8|int,0,1,,0,,,,,0
 field = orderBy|9|string,0,,,,,,,32,0
 field = removeField|10|string,0,,,,,2,,,0
 field = responseTemplate|14|struct:responseTemplate,0,,,,,,,,0
 field = socialFriendId|11|idInt:socialFriend,0,1,,,,,,,0
 field = socialFriendSetId|12|idInt:socialFriendSet,0,1,,,,,,,0
 field = useAnchorOperation|13|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 number = 1385
 returnType = socialFriendSetSocialFriendMappingList
   description = search for a socialFriendSetSocialFriendMapping by socialFriendSetId, socialFriendId
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = socialFriendId|,,Limits the search to an object with exactly the same value in this field.
   field = socialFriendSetId|,,Limits the search to an object with exactly the same value in this field.
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = socialFriendSetSocialFriendMappingStore (NO)
 field = socialFriendId|1|idInt:socialFriend,1,1,low,,,,,,0
 field = socialFriendSetId|2|idInt:socialFriendSet,1,1,low,,,,,,0
 number = 1386
 returnType = socialFriendSetSocialFriendMapping
   description = Stores a new or a modified socialFriendSetSocialFriendMappingobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = socialFriendId|,,The SocialFriend in the SocialFriendSet
   field = socialFriendSetId|,,SocialFriendSet that the SocialFriend is mapped to 

********** operation = socialFriendSetStore (NO)
 field = displayName|1|string,1,1,low,,,,,100,0
 field = friendSetId|2
 field = socialFriendForSocialFriendSetId|3|struct:socialFriend,0,,low,,,7,,,1
 field = socialFriendSetId|4|idInt:socialFriendSet,0,1,low,,,,,,0
 field = socialIdentityId|5|idInt:socialIdentity,1,1,low,,,,,,0
 isFrozen = true
 number = 1335
 returnType = socialFriendSet
   description = Stores a new or a modified socialFriendSetobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = displayName|,,A display name for this group as imported from the external network
   field = socialFriendForSocialFriendSetId|,7,Annotation (note) contains the socialFriend entries for this group
   field = socialFriendSetId|,,socialFriendSetId to create or update
   field = socialIdentityId|,,The socialIdentity that imported this socialFriendSet.

********** operation = socialFriendStore (NO)
 field = friendCompositeForFriendCompositeId|1|struct:friendComposite,0,1,low,,,7,,,1
 field = friendCompositeId|2|idInt:friendComposite,1,1,low,,,,,,0
 field = ownerSocialIdentityForSocialUserId|7|struct:socialIdentity,0,1,low,,,7,,,1
 field = socialFriendId|3|idInt:socialFriend,0,1,low,,,,,,0
 field = socialIdentityId|4|idInt:socialIdentity,1,1,low,,,,,,0
 field = socialUserForSocialUserId|5|struct:socialUser,0,1,low,,,7,,,1
 field = socialUserId|6|idInt:socialUser,1,1,low,,,,,,0
 isFrozen = true
 number = 1336
 returnType = socialFriend
   description = Stores a new or a modified socialFriendobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = friendCompositeForFriendCompositeId|,7,Annotations (notes) contains the (single) friendComposite for this socialFriend
   field = friendCompositeId|,,The friendComposite that this socialFriend belongs to
   field = ownerSocialIdentityForSocialUserId|,7,Annotations (notes) contains the "owner" friendComposite for this socialFriend
   field = socialFriendId|,,socialFriendId to create or update
   field = socialIdentityId|,,The socialIdentity which imported this socialFriend from a social network (AKA "owner" socialIdentity).
   field = socialUserForSocialUserId|,7,Annotation (note) contains the "friend" socialUser for this identity
   field = socialUserId|,,The socialUser represented by this socialFriend

********** operation = socialIdentityRemove (NO)
 field = socialIdentityId|1|idInt:socialIdentity,1,1,,,,,,,0
 isFrozen = true
 number = 1339
 returnType = success
   description = Removes a socialIdentity object from the mind.

********** operation = socialIdentitySearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = count|3|int,0,1,,1,,,1,,0
 field = format|4|enum:format,0,1,,,,,,,0
 field = groupBy|5|string,0,,,,,,,32,0
 field = levelOfDetail|6|enum:levelOfDetail,0,1,,,,,,,0
 field = maxCreateDate|18|dateTime,0,1,,,,,,,0
 field = maxUpdateDate|19|dateTime,0,1,,,,,,,0
 field = minCreateDate|20|dateTime,0,1,,,,,,,0
 field = minUpdateDate|21|dateTime,0,1,,,,,,,0
 field = neoUserId|7|idInt:neoUser,0,1,,,,,,,0
 field = networkEmail|15|string,0,1,,,,,,255,0
 field = networkUserId|16|string,0,1,,,,,,1000,0
 field = note|8|string,0,,,,,,,,0
 field = offset|9|int,0,1,,0,,,,,0
 field = orderBy|10|string,0,,,,,,,32,0
 field = removeField|11|string,0,,,,,2,,,0
 field = responseTemplate|22|struct:responseTemplate,0,,,,,,,,0
 field = socialIdentityId|12|idInt:socialIdentity,0,1,,,,,,,0
 field = socialNetworkId|17|idInt:socialNetwork,0,1,,,,,,,0
 field = socialUserId|13|idInt:socialUser,0,1,,,,,,,0
 field = useAnchorOperation|14|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 fieldGroup = serviceClusterSearchDates
 number = 1340
 returnType = socialIdentityList
   description = search for a socialIdentity by: one of socialIdentityId, neoUserId, socialUserId, networkEmail, networkUserId
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = neoUserId|,,Limits the search to an object with exactly the same value in this field.
   field = networkEmail|,,Limits the search to an object with exactly the same value in this field.
   field = networkUserId|,,Limits the search to an object with exactly the same value in this field.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = socialIdentityId|,,Limits the search to an object with exactly the same value in this field.
   field = socialNetworkId|,,Limits the search to an object with exactly the same value in this field.
   field = socialUserId|,,Limits the search to an object with exactly the same value in this field.
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = socialIdentityStore (NO)
 field = authCredentials|6|struct:authCredentials,1,1,low,,,,,,0
 field = credentials|1
 field = devNotes|8|string,0,1,low,,,,,1000,0
 field = devUserEnv|9|enum:userEnvType,0,1,low,,,,,,0
 field = neoUserId|2|idInt:neoUser,1,1,low,,,,,,0
 field = networkEmail|7|string,0,1,low,,,,,255,0
 field = socialIdentityId|3|idInt:socialIdentity,0,1,low,,,,,,0
 field = socialUserForSocialUserId|4|struct:socialUser,0,1,low,,,7,,,1
 field = socialUserId|5|idInt:socialUser,1,1,low,,,,,,0
 isFrozen = true
 number = 1341
 returnType = socialIdentity
   description = Stores a new or a modified socialIdentityobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = authCredentials|,,The credentials needed for this identity to login to the social network.
   field = devNotes|,,Internal notes to be used during development and integration
   field = devUserEnv|,,Track a user's environment and/or role during development and integration.  This will be used to track which users are field testers vs QA vs development, and possibly also to allow multiple identities for a single user.
   field = neoUserId|,,The neoUser associated with this socialIdentity
   field = networkEmail|,,The email of this account for identification purposes, such as network login.
   field = socialIdentityId|,,socialUserId to create or update
   field = socialUserForSocialUserId|,7,Annotation (note) contains the socialUser for this identity
   field = socialUserId|,,The socialUser associated with this socialIdentity

********** operation = socialNetworkRemove (NO)
 field = socialNetworkId|1|idInt:socialNetwork,1,1,,,,,,,0
 isFrozen = true
 number = 1344
 returnType = success
   description = Removes a socialNetwork object from the mind.

********** operation = socialNetworkSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = count|3|int,0,1,,1,,,1,,0
 field = format|4|enum:format,0,1,,,,,,,0
 field = groupBy|5|string,0,,,,,,,32,0
 field = levelOfDetail|6|enum:levelOfDetail,0,1,,,,,,,0
 field = maxCreateDate|15|dateTime,0,1,,,,,,,0
 field = maxUpdateDate|16|dateTime,0,1,,,,,,,0
 field = minCreateDate|17|dateTime,0,1,,,,,,,0
 field = minUpdateDate|18|dateTime,0,1,,,,,,,0
 field = note|7|string,0,,,,,,,,0
 field = offset|8|int,0,1,,0,,,,,0
 field = orderBy|9|string,0,,,,,,,32,0
 field = removeField|10|string,0,,,,,2,,,0
 field = responseTemplate|19|struct:responseTemplate,0,,,,,,,,0
 field = socialIdentityId|11|idInt:socialIdentity,0,1,,,,,,,0
 field = socialNetworkId|12|idInt:socialNetwork,0,1,,,,,,,0
 field = socialUserId|13|idInt:socialUser,0,1,,,,,,,0
 field = useAnchorOperation|14|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 fieldGroup = serviceClusterSearchDates
 number = 1345
 returnType = socialNetworkList
   description = search for a socialNetwork by: one of socialNetworkId, socialUserId, socialIdentityId
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = socialIdentityId|,,Limits the search to an object with exactly the same value in this field.
   field = socialNetworkId|,,Limits the search to an object with exactly the same value in this field.
   field = socialUserId|,,Limits the search to an object with exactly the same value in this field.
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = socialNetworkStore (NO)
 field = displayName|1|string,1,1,low,,,,,100,0
 field = domain|2|string,1,1,low,,,,,1000,0
 field = icon|3|struct:image,1,1,low,,,,,,0
 field = socialNetworkId|4|idInt:socialNetwork,0,1,low,,,,,,0
 isFrozen = true
 number = 1346
 returnType = socialNetwork
   description = Stores a new or a modified socialNetworkobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = displayName|,,User-friendly name of the network (e.g. TiVo, Facebook, MySpace)
   field = domain|,,Canonical internet domain name for the social network (e.g. com.tivo, com.facebook).
   field = icon|,,User-friendly display icon for the network
   field = socialNetworkId|,,socialNetworkId to create or update

********** operation = socialPersonSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = count|3|int,0,1,,1,,,1,,0
 field = format|4|enum:format,0,1,,,,,,,0
 field = groupBy|5|string,0,,,,,,,32,0
 field = includeFriends|6|boolean,0,1,,true,,,,,0
 field = includeMe|7|boolean,0,1,,true,,,,,0
 field = isOnline|17|boolean,0,1,,,,,,,0
 field = levelOfDetail|8|enum:levelOfDetail,0,1,,,,,,,0
 field = note|9|string,0,,,,,,,,0
 field = offset|10|int,0,1,,0,,,,,0
 field = orderBy|11|string,0,,,,,,,32,0
 field = removeField|12|string,0,,,,,2,,,0
 field = responseTemplate|18|struct:responseTemplate,0,,,,,,,,0
 field = socialNetworkId|13|idInt:socialNetwork,0,,,,,,,,0
 field = socialPersonId|14|string,0,1,,,,,,,0
 field = useAnchorOperation|15|boolean,0,1,,true,,,,,0
 field = userId|16|idLong:user,1,1,,,,,,,0
 fieldGroup = searchFields
 number = 1483
 returnType = socialPersonList
   description = Find people.
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = includeFriends|,,If false, friends of the the user will not be returned.
   field = includeMe|,,If false, the social identities of the user specified by userId will not be returned.
   field = isOnline|,,Limits the search to an object with exactly the same value in this field.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = socialNetworkId|,,Limits the search to an object with exactly the same value in this field.
   field = socialPersonId|,,Limits the search to an object with exactly the same value in this field.
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   field = userId|,,The Neo user whose social networks should be used to do the search.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = socialPhotoSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = count|3|int,0,1,,1,,,1,,0
 field = format|4|enum:format,0,1,,,,,,,0
 field = groupBy|5|string,0,,,,,,,32,0
 field = levelOfDetail|6|enum:levelOfDetail,0,1,,,,,,,0
 field = maxSubEventCount|15|int,0,1,,1,,,,,0
 field = note|7|string,0,,,,,,,,0
 field = offset|8|int,0,1,,0,,,,,0
 field = orderBy|9|string,0,,,,,,,32,0
 field = removeField|10|string,0,,,,,2,,,0
 field = responseTemplate|16|struct:responseTemplate,0,,,,,,,,0
 field = socialAlbumId|11|string,0,1,,,,,,,0
 field = socialPhotoId|12|string,0,1,,,,,,,0
 field = useAnchorOperation|13|boolean,0,1,,true,,,,,0
 field = userId|14|idLong:user,1,1,,,,,,,0
 fieldGroup = searchFields
 number = 1532
 returnType = socialPhotoList
   description = Search social photos of a given user
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = maxSubEventCount|,,Specify the max number of subEvents - per subEvent type - to return per photo.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = socialAlbumId|,,Limits the search to an object with exactly the same value in this field.
   field = socialPhotoId|,,Limits the search to an object with exactly the same value in this field.
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   field = userId|,,The Neo user whose social networks should be used to do the search.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = socialUserRemove (NO)
 field = socialUserId|1|idInt:socialUser,1,1,,,,,,,0
 isFrozen = true
 number = 1349
 returnType = success
   description = Removes a socialUser object from the mind.

********** operation = socialUserSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = count|3|int,0,1,,1,,,1,,0
 field = format|4|enum:format,0,1,,,,,,,0
 field = groupBy|5|string,0,,,,,,,32,0
 field = levelOfDetail|6|enum:levelOfDetail,0,1,,,,,,,0
 field = maxCreateDate|16|dateTime,0,1,,,,,,,0
 field = maxUpdateDate|17|dateTime,0,1,,,,,,,0
 field = minCreateDate|18|dateTime,0,1,,,,,,,0
 field = minUpdateDate|19|dateTime,0,1,,,,,,,0
 field = networkUserId|15|string,0,1,,,,,,1000,0
 field = note|7|string,0,,,,,,,,0
 field = offset|8|int,0,1,,0,,,,,0
 field = orderBy|9|string,0,,,,,,,32,0
 field = removeField|10|string,0,,,,,2,,,0
 field = responseTemplate|20|struct:responseTemplate,0,,,,,,,,0
 field = socialFriendId|11|idInt:socialFriend,0,1,,,,,,,0
 field = socialIdentityId|12|idInt:socialIdentity,0,1,,,,,,,0
 field = socialNetworkId|21|idInt:socialNetwork,0,,,,,,,,0
 field = socialUserId|13|idInt:socialUser,0,1,,,,,,,0
 field = useAnchorOperation|14|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 fieldGroup = serviceClusterSearchDates
 number = 1350
 returnType = socialUserList
   description = search for a socialUser by: one of socialUserId, socialFriendId, socialIdentityId, networkUserId
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = networkUserId|,,Limits the search to an object with exactly the same value in this field.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = socialFriendId|,,Limits the search to an object with exactly the same value in this field.
   field = socialIdentityId|,,Limits the search to an object with exactly the same value in this field.
   field = socialNetworkId|,,Limits the search to an object with exactly the same value in this field.
   field = socialUserId|,,Limits the search to an object with exactly the same value in this field.
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = socialUserStore (NO)
 field = avatar|1|struct:image,0,1,low,,,,,,0
 field = displayName|2|string,1,1,low,,,,,100,0
 field = email|3|string,0,10,low,,,,,255,0
 field = firstName|4|string,0,1,low,,,,,100,0
 field = lastName|5|string,0,1,low,,,,,100,0
 field = networkUserId|6|string,1,1,low,,,,,1000,0
 field = ownerSocialIdentityForSocialUserId|12|struct:socialIdentity,0,1,low,,,7,,,1
 field = phone|7|string,0,10,low,,,,,255,0
 field = socialNetworkForSocialNetworkId|8|struct:socialNetwork,0,1,low,,,7,,,1
 field = socialNetworkId|9|idInt:socialNetwork,1,1,low,,,,,,0
 field = socialUserId|10|idInt:socialUser,0,1,low,,,,,,0
 field = status|11|string,0,1,low,,,,,255,0
 isFrozen = true
 number = 1351
 returnType = socialUser
   description = Stores a new or a modified socialUserobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = avatar|,,The user's avatar on the social network
   field = displayName|,,A user-friendly name for this user on the social network.
   field = email|,,E-mail addresses associated with the user on the social network.
   field = firstName|,,The user's first name on the social network.
   field = lastName|,,The user's last name on the social network.
   field = networkUserId|,,An opaque identifier assigned by the social network for this user
   field = ownerSocialIdentityForSocialUserId|,7,Annotation (note) contains the socialIdentity associated with this socialUser (if there is one)
   field = phone|,,Phone numbers associated with the user on the social network.
   field = socialNetworkForSocialNetworkId|,7,Annotation (note) contains the socialNetwork for this socialUser
   field = socialNetworkId|,,The ID of the social network this social user belongs to.
   field = socialUserId|,,socialUserId to create or update
   field = status|,,(Optional) the user's current status on this network.  TBD: what is this used for?  If this is a dynamic value, it probably shouldn't be stored, or should be maintained elsewhere

********** operation = softwareInstructionsGet (NO)
 field = bodyId|1|idBody:body,1,1,low,,,,,,0
 field = installedSoftware|2|struct:software,0,,,,,,,,0
 number = 1356
 returnType = softwareInstructions
   description =  define an operation that returns a list of softwareInstructions  containing information about software that needs to be downloaded to the TCD 
   field = installedSoftware|,,a list of software currently installed

********** operation = sqlRun (NO)
 field = sql|1|string,1,,,,,,,,0
 number = 521
 returnType = success
   description = Run a set of sql commands.  There should be only one sql command per sql item.  e.g., you cannot do:  <pre>SQL COMMAND1; SQL COMMAND2</pre>  You should instead do:  <pre>SQL COMMAND1</pre> <pre>SQL COMMAND2</pre>  If you do multiple commands and *any* of the commands fail, all of the commands will be rolled back (as best we can). Apparently you can't roll back CREATE TABLE commands.  I'm not sure what other ones you can't roll back, but it's something to keep in mind.  We are currently not returning any of the results of the command, all we do is return success or error.

********** operation = stationIdMappingGet (NO)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 field = destinationIdType|2|enum:stationIdType,1,1,,,,,,,0
 field = sourceId|3|idLong:station,1,,,,,,,,0
 field = sourceIdType|4|enum:stationIdType,1,1,,,,,,,0
 number = 958
 returnType = stationIdMappingList
   description = TE Installations translate station ids been the TMS id space and the Controller Id space used by STBs. All communcation with STBs is performed in controller ID space.  In order to allow remote scheduling to be performed in TMS id space we are adding this operation to translate a list of ids between TMS and Controller spaces.  This operation is only intended for use by the Remote Scheduling Servlet, which is deployed in conjunction with the Mind servlet, so there is no need for this operation to be frozen.  Source and destination station types are passed in, along with a list of ids to translate. A list of translated values are returned. If no valid translation exists, then the destination field in the result is left blank.

********** operation = subscribableMixSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = count|3|int,0,1,,1,,,1,,0
 field = format|4|enum:format,0,1,,,,,,,0
 field = groupBy|5|string,0,,,,,,,32,0
 field = levelOfDetail|6|enum:levelOfDetail,0,1,,,,,,,0
 field = mixId|7|idLong:mix,1,1,low,,,,,,0
 field = note|8|string,0,,,,,,,,0
 field = offset|9|int,0,1,,0,,,,,0
 field = orderBy|10|string,0,,,,,,,32,0
 field = removeField|11|string,0,,,,,2,,,0
 field = responseTemplate|13|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|12|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 isFrozen = true
 number = 884
 orderBy = displayRank
 orderBy = updateDate
 returnType = idSet
   description = Search for the subscribable mix or mixes given a mixId.  This will usually just be the parent mix.  For "old-style" mixes, this may be an "uncle" mix in the case where the input mix's parent is an "archive" mix and the operation needs to traverse up a level and back down to find the "current" mix.  Keep in mind that you will only get results from this operation if you pass in a mixId of a leaf node
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = mixId|,,Limits the search to an object with exactly the same value in this field.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = mixId|0|0|0|hme-cds
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all
   project = subscribableMixSearch|0|0|0|hme-cds

********** operation = subscribe (YES)
 field = autoRecord|1|boolean,0,1,low,true,,,,,0
 field = bodyGeneratesCandidates|2|boolean,0,1,low,,,,,,0
 field = bodyId|3|idBody:body,1,1,low,,,,,,0
 field = conflictsOnly|4|boolean,0,1,,,3,,,,0
 field = createDate|33|dateTime,0,1,high,,,,,,0
 field = createdFrom|34|idInt:partner,0,1,high,,,,,,0
 field = deleteAfterRecording|5|boolean,0,1,medium,false,,2,,,0
 field = description|6|string,0,1,medium,,,,,,0
 field = editUiUrl|7|url,0,1,medium,,,2,,255,0
 field = endTimePadding|8|int,0,1,medium,,,,,,0
 field = folderingRules|9|enum:folderingRules,0,1,medium,,,,,,0
 field = hdOnly|31|boolean,0,1,low,false,3,,,,0
 field = idSetSource|10|union:idSetSource,1,1,low,,3,,,,0
 field = idSetUrl|11|string,1,1,low,,,2,,,0
 field = ignoreConflicts|12|boolean,0,1,,,,,,,0
 field = isAdult|30|boolean,0,1,low,false,,,,,0
 field = isForKids|13|boolean,0,1,low,false,,,,,0
 field = keepBehavior|14|enum:keepBehaviorType,0,1,medium,,,,,,0
 field = keepDuration|29|int,0,1,medium,,,,0,,0
 field = locatorGenerator|32|struct:locatorGenerator,0,1,low,,,,,,0
 field = logoIndex|15|int,0,1,medium,,,,0,,0
 field = maxRecordings|16|int,0,1,medium,,,,0,,0
 field = preferHd|17|boolean,0,1,low,,3,,,,0
 field = priority|18|int,0,1,medium,,,,1,5000,0
 field = recordingId|35|idInt:recording,0,1,,,,,,,0
 field = recordingQuality|19|enum:recordingQualityLevel,0,1,medium,,,,,,0
 field = showStatus|20|enum:showStatus,0,1,low,rerunsAllowed,,,,,0
 field = startTimePadding|21|int,0,1,medium,,,,,,0
 field = subscriptionId|22|idInt:subscription,0,1,low,,,,,,0
 field = subscriptionIdInBody|23|localId,0,1,high,,,2,,,0
 field = subscriptionType|24|enum:subscriptionType,0,1,low,,,2,,,0
 field = title|25|string,0,1,low,,,,,255,0
 field = uiType|26|enum:uiType,0,1,medium,,,,,,0
 field = updateDate|27|dateTime,0,1,medium,,,,,,0
 field = useOfferEndPadding|36|boolean,0,1,low,,,,,,0
 field = userId|28|idLong:user,0,1,low,,,2,,,0
 fieldGroup = subscriptionFields
 isFrozen = true
 number = 526
 returnType = subscribeResult
   description = <i>Request:</i>  The request is a new or modified subscription object. If there are no conflicts, or the "ignoreConflicts" field is set to true, the subscription is stored in the database, and the next time the scheduler runs, it will schedule things from this subscription, according to the scheduler policy.  The priority in the requested subscription says what it's priority should be relative to other subscriptions already existing for this body.  Setting the priority to 1 means that this new (or modidied) subscription should become the highest priority subscription, and that others should be changed to lower priorities.  Similarly, setting the priority to <i>n</i> means that an existing subscription at priority <i>n</i> will be changed to <i>n 1</i>, the one at <i>n 1</i> will be changed to <i>n 2</i>, etc.  Leaving the priority blank means that this new subscription should be the lowest priority subscription for this body; it will be assigned a priority just below that of the current lowest priority subscription.  <i>Actions:</i>  This pseudo-code outlines what the subscribe operation does:  <pre> if (ignoreConflicts) { create/update subscription; if (bodyHasScheduler) { run scheduler; } return subscription; } else { if (bodyHasScheduler) { return conflicts with unknownConflicts=true; } else { check for conflicts; if (conflicts) { return specific conflicts; } else { create/update subscription; if (bodyHasScheduler) { run scheduler; } return subscription; } } } </pre>  <i>Response:</i>  The response will either contain a conflicts structure, or a newly created/updated subscription object, except when conflictsOnly is  set true -- in that case, the response will be empty if no conflicts  are found.  If there are no conflicts, or the caller set ignoreConflicts to true, the newly created subscription will be returned.  Also, the scheduler will be run to update the list of recordings (in the case where the mind does scheduling for this body).  If the body does not have a scheduler, then the mind does scheduling for this body.  If there are conflicts because of the new subscription, they will be returned in the conflicts field of the response.  If the body has a scheduler, the conflicts object will have the conflictsUnknown flag set to true, and it will be treated as if there are conflicts.  The caller will have to override by setting ignoreConflicts to schedule the subscription.
   field = autoRecord|,,Is this subscription set to auto-record.  If this is set to true, the candidates of this subscription will be automatically scheduled to be recorded.  If this attribute is not set, the value will default to "true"
   field = bodyGeneratesCandidates|,,If set to true, the mind will not try to generate candidates for this subscription. It will leave it up to the body to do that. If a body has no subscriptions where bodyGeneratesCandidates is false, then it will be put into the AAA_NoVirtualChannel group and have it's polling interval set to 6 hours unless it is in a group with a higher priority sync policy. Should always be false for CDS content.
   field = bodyId|,,The ids of the body on which to store recording from this subscription.
   field = conflictsOnly|3,,Should this command only do conflict checking? If this attribute is true, the normal conflict checking will be done, but if no conflicts are found, the mind will not store the subscription and will leave the creation of the recording to the body. The default is "false", meaning that the mind will store the subscription if there are no conflicts.
   field = createDate|,,createDate for the subscription
   field = createdFrom|,,partnerId of the app which the subscription was created from
   field = deleteAfterRecording|,2,If true, this object will be deleted by the mind once one of the Recording proposed by this subscription is recorded.  This is intended to be used only when this subscription is is for a single offer.  A future implementation may wait for the user to delete the content before this subscription is deleted.  The UI could allow the user to indicate if the content recorded was the intended content.
   field = description|,,A description for display to the user.
   field = editUiUrl|,2,The location of the application that can be used to modify this subscription.  (XXX what to do if the app doesn't work.)  note that it can be a generic UI for editing the attributes that appear here, but a generic app won't be able to modify what it idSetUrl.
   field = endTimePadding|,,Number of seconds after the end time of the showing to continue recording.  This allows the viewer to compensate when stations don't keep exact time.  If negative, it makes the recording end early.  If missing, acts as though it were 0.
   field = hdOnly|3,,If true, the scheduler will only schedule HD recordings. default value is false.
   field = idSetSource|3,,The dictionary that defines what this is a subscription for.
   field = idSetUrl|,2,The URL from which to fetch the candidates for scheduling.
   field = ignoreConflicts|,,Should this command ignore conflicts.  If there are conflicts with this new/changed subsription, if this attribute is set to "true", the subscription is committed.  If this is not set, or is set to "false", the list of conflicts is returned to the caller.
   field = isAdult|,,If set to true, the content referenced by this subscription is adult.  This flag is specifically used to determine whether the subscription title was taken from an adult source.
   field = isForKids|,,If true, recordings generated from this subscription should be marked as being "for kids". This forKids-ness is used by some clients when deciding what to display to in KidZone.  When storing, defaults to false.
   field = keepBehavior|,,What rules should be used to determine how long to keep recordings this subscription generates?  If missing, defaults to "fifo". If set to duration, a keepDuration must be set.
   field = keepDuration|,,If the keepBehavior is duration, this value must be set, and specifies the duration, in seconds, the recoding should be kept after completion. Currently used only in the CDP A/ES subscribe implementation.
   field = locatorGenerator|,,describes if and how locators should be generated for the subscription. If present, locators will be generated.
   field = logoIndex|,,This field specifies where to find the logo for this subscription based on an index in a well defined logo list.
   field = maxRecordings|,,The maximum number of recordings to keep at any one time.  If this is set to 0, it means 'unlimited'.  Any other value is the maximum number of recordings to keep for this subscription. Negative numbers are not valid.  If unset, it is up to the implementation to decide what to do.  During an update request, the TCD implementation will use the previous value, other implementations might treat it as 'unlimited'.
   field = preferHd|3,,If true, the scheduler will try to schedule a recording in HD. Otherwise there is no guarantee if the scheduled recording is in HD or not. Default to false.
   field = priority|,,Priority index for this subscription relative to others. Ranges from 1 (highest priority) to 5000 (lowest).
   field = recordingId|,,If specified, the subscribe call will update a single recording's options and run the changes through the scheduler.  NOTE: This is only supported in the TCD's local mind, not the remote mind and TE.
   field = recordingQuality|,,The quality setting that should be used for recordings from this subscription -- if possible (not all devices can control the recording quality).  If missing, uses a default quality level.
   field = startTimePadding|,,Number of seconds before the actual start of the showing to begin recording. This allows the viewer to compensate when stations don't keep exact time.  If negative, it makes the recording start late.  If missing, acts as though it were 0.
   field = subscriptionType|,2,Type of this subscription.  This field is only used by the UI to identify these subscriptions.
   field = title|,,A title for displaying this content source to the user.
   field = uiType|,,Affects how a subscription is displayed in a UI.
   field = updateDate|,,updateDate for the subscription
   field = useOfferEndPadding|,,If true, and endPaddingTime is not set, the endPaddingTime will be set based on the underlying offer. If true, and endPaddingTime is set, endPaddingTime will be used directly. If false, endPaddingTime will always be used directly.
   field = userId|,2,The user who owns this subscription. XXX: should go away, but I'm leaving it in case there are subscriptions with userIds that are sync'd.
   fieldProject = bodyGeneratesCandidates|0|0|0|hme-cds,partner-subscribe
   fieldProject = bodyId|0|0|0|hme-cds,partner-subscribe
   fieldProject = createDate|0|0|0|hme-cds,partner-subscribe
   fieldProject = createdFrom|0|0|0|hme-cds,partner-subscribe
   fieldProject = description|0|0|0|hme-cds,partner-subscribe
   fieldProject = folderingRules|0|0|0|hme-cds,partner-subscribe
   fieldProject = hdOnly|0|3|0|hme-cds,partner-subscribe
   fieldProject = idSetSource|0|3|0|hme-cds,subscribe
   fieldProject = isAdult|0|0|0|hme-cds,partner-subscribe
   fieldProject = isForKids|0|0|0|hme-cds,partner-subscribe
   fieldProject = locatorGenerator|0|0|0|hme-cds,partner-subscribe
   fieldProject = logoIndex|0|0|0|hme-cds,partner-subscribe
   fieldProject = maxRecordings|0|0|0|hme-cds,partner-subscribe
   fieldProject = preferHd|0|3|0|hme-cds,partner-subscribe
   fieldProject = showStatus|0|0|0|hme-cds,partner-subscribe
   fieldProject = subscriptionId|0|0|0|hme-cds,partner-subscribe
   fieldProject = title|0|0|0|hme-cds,partner-subscribe
   fieldProject = uiType|0|0|0|hme-cds,partner-subscribe
   fieldProject = updateDate|0|0|0|hme-cds,partner-subscribe
   fieldProject = useOfferEndPadding|0|0|0|hme-cds,partner-subscribe
   project = subscribe|0|0|0|hme-cds,partner-subscribe

********** operation = subscribeFirstPass (NO)
 field = autoRecord|1|boolean,0,1,low,true,,,,,0
 field = bodyGeneratesCandidates|2|boolean,0,1,low,,,,,,0
 field = bodyId|3|idBody:body,1,1,low,,,,,,0
 field = conflictsOnly|4|boolean,0,1,,,3,,,,0
 field = createDate|32|dateTime,0,1,high,,,,,,0
 field = createdFrom|33|idInt:partner,0,1,high,,,,,,0
 field = deleteAfterRecording|5|boolean,0,1,medium,false,,2,,,0
 field = description|6|string,0,1,medium,,,,,,0
 field = editUiUrl|7|url,0,1,medium,,,2,,255,0
 field = endTimePadding|8|int,0,1,medium,,,,,,0
 field = folderingRules|9|enum:folderingRules,0,1,medium,,,,,,0
 field = hdOnly|30|boolean,0,1,low,false,3,,,,0
 field = idSetUrl|10|string,1,1,low,,,2,,,0
 field = ignoreConflicts|11|boolean,0,1,,,,,,,0
 field = isAdult|29|boolean,0,1,low,false,,,,,0
 field = isForKids|12|boolean,0,1,low,false,,,,,0
 field = keepBehavior|13|enum:keepBehaviorType,0,1,medium,,,,,,0
 field = keepDuration|28|int,0,1,medium,,,,0,,0
 field = locatorGenerator|31|struct:locatorGenerator,0,1,low,,,,,,0
 field = logoIndex|14|int,0,1,medium,,,,0,,0
 field = maxRecordings|15|int,0,1,medium,,,,0,,0
 field = preferHd|16|boolean,0,1,low,,3,,,,0
 field = priority|17|int,0,1,medium,,,,1,5000,0
 field = recordingQuality|18|enum:recordingQualityLevel,0,1,medium,,,,,,0
 field = showStatus|19|enum:showStatus,0,1,low,rerunsAllowed,,,,,0
 field = startTimePadding|20|int,0,1,medium,,,,,,0
 field = subscriptionId|21|idInt:subscription,0,1,low,,,,,,0
 field = subscriptionIdInBody|22|localId,0,1,high,,,2,,,0
 field = subscriptionType|23|enum:subscriptionType,0,1,low,,,2,,,0
 field = title|24|string,0,1,low,,,,,255,0
 field = uiType|25|enum:uiType,0,1,medium,,,,,,0
 field = updateDate|26|dateTime,0,1,medium,,,,,,0
 field = useOfferEndPadding|34|boolean,0,1,low,,,,,,0
 field = userId|27|idLong:user,0,1,low,,,2,,,0
 fieldGroup = subscriptionFields
 number = 527
 returnType = subscribeResult
   description = First pass for subscribe.  This is basically only called from subscribe and does the non-cds portion of what is described above for the subscribe operation.
   field = autoRecord|,,Is this subscription set to auto-record.  If this is set to true, the candidates of this subscription will be automatically scheduled to be recorded.  If this attribute is not set, the value will default to "true"
   field = bodyGeneratesCandidates|,,If set to true, the mind will not try to generate candidates for this subscription. It will leave it up to the body to do that. If a body has no subscriptions where bodyGeneratesCandidates is false, then it will be put into the AAA_NoVirtualChannel group and have it's polling interval set to 6 hours unless it is in a group with a higher priority sync policy. Should always be false for CDS content.
   field = bodyId|,,The ids of the body on which to store recording from this subscription.
   field = conflictsOnly|3,,Should this command only do conflict checking? If this attribute is true, the normal conflict checking will be done, but if no conflicts are found, the mind will not store the subscription and will leave the creation of the recording to the body. The default is "false", meaning that the mind will store the subscription if there are no conflicts.
   field = createDate|,,createDate for the subscription
   field = createdFrom|,,partnerId of the app which the subscription was created from
   field = deleteAfterRecording|,2,If true, this object will be deleted by the mind once one of the Recording proposed by this subscription is recorded.  This is intended to be used only when this subscription is is for a single offer.  A future implementation may wait for the user to delete the content before this subscription is deleted.  The UI could allow the user to indicate if the content recorded was the intended content.
   field = description|,,A description for display to the user.
   field = editUiUrl|,2,The location of the application that can be used to modify this subscription.  (XXX what to do if the app doesn't work.)  note that it can be a generic UI for editing the attributes that appear here, but a generic app won't be able to modify what it idSetUrl.
   field = endTimePadding|,,Number of seconds after the end time of the showing to continue recording.  This allows the viewer to compensate when stations don't keep exact time.  If negative, it makes the recording end early.  If missing, acts as though it were 0.
   field = hdOnly|3,,If true, the scheduler will only schedule HD recordings. default value is false.
   field = idSetUrl|,2,The URL from which to fetch the candidates for scheduling.
   field = ignoreConflicts|,,Should this command ignore conflicts.  If there are conflicts with this new/changed subsription, if this attribute is set to "true", the subscription is committed.  If this is not set, or is set to "false", the list of conflicts is returned to the caller.
   field = isAdult|,,If set to true, the content referenced by this subscription is adult.  This flag is specifically used to determine whether the subscription title was taken from an adult source.
   field = isForKids|,,If true, recordings generated from this subscription should be marked as being "for kids". This forKids-ness is used by some clients when deciding what to display to in KidZone.  When storing, defaults to false.
   field = keepBehavior|,,What rules should be used to determine how long to keep recordings this subscription generates?  If missing, defaults to "fifo". If set to duration, a keepDuration must be set.
   field = keepDuration|,,If the keepBehavior is duration, this value must be set, and specifies the duration, in seconds, the recoding should be kept after completion. Currently used only in the CDP A/ES subscribe implementation.
   field = locatorGenerator|,,describes if and how locators should be generated for the subscription. If present, locators will be generated.
   field = logoIndex|,,This field specifies where to find the logo for this subscription based on an index in a well defined logo list.
   field = maxRecordings|,,The maximum number of recordings to keep at any one time.  If this is set to 0, it means 'unlimited'.  Any other value is the maximum number of recordings to keep for this subscription. Negative numbers are not valid.  If unset, it is up to the implementation to decide what to do.  During an update request, the TCD implementation will use the previous value, other implementations might treat it as 'unlimited'.
   field = preferHd|3,,If true, the scheduler will try to schedule a recording in HD. Otherwise there is no guarantee if the scheduled recording is in HD or not. Default to false.
   field = priority|,,Priority index for this subscription relative to others. Ranges from 1 (highest priority) to 5000 (lowest).
   field = recordingQuality|,,The quality setting that should be used for recordings from this subscription -- if possible (not all devices can control the recording quality).  If missing, uses a default quality level.
   field = startTimePadding|,,Number of seconds before the actual start of the showing to begin recording. This allows the viewer to compensate when stations don't keep exact time.  If negative, it makes the recording start late.  If missing, acts as though it were 0.
   field = subscriptionType|,2,Type of this subscription.  This field is only used by the UI to identify these subscriptions.
   field = title|,,A title for displaying this content source to the user.
   field = uiType|,,Affects how a subscription is displayed in a UI.
   field = updateDate|,,updateDate for the subscription
   field = useOfferEndPadding|,,If true, and endPaddingTime is not set, the endPaddingTime will be set based on the underlying offer. If true, and endPaddingTime is set, endPaddingTime will be used directly. If false, endPaddingTime will always be used directly.
   field = userId|,2,The user who owns this subscription. XXX: should go away, but I'm leaving it in case there are subscriptions with userIds that are sync'd.
   fieldProject = bodyGeneratesCandidates|0|0|0|hme-cds,partner-subscribe
   fieldProject = bodyId|0|0|0|hme-cds,partner-subscribe
   fieldProject = createDate|0|0|0|hme-cds,partner-subscribe
   fieldProject = createdFrom|0|0|0|hme-cds,partner-subscribe
   fieldProject = description|0|0|0|hme-cds,partner-subscribe
   fieldProject = folderingRules|0|0|0|hme-cds,partner-subscribe
   fieldProject = hdOnly|0|3|0|hme-cds,partner-subscribe
   fieldProject = isAdult|0|0|0|hme-cds,partner-subscribe
   fieldProject = isForKids|0|0|0|hme-cds,partner-subscribe
   fieldProject = locatorGenerator|0|0|0|hme-cds,partner-subscribe
   fieldProject = logoIndex|0|0|0|hme-cds,partner-subscribe
   fieldProject = maxRecordings|0|0|0|hme-cds,partner-subscribe
   fieldProject = preferHd|0|3|0|hme-cds,partner-subscribe
   fieldProject = showStatus|0|0|0|hme-cds,partner-subscribe
   fieldProject = subscriptionId|0|0|0|hme-cds,partner-subscribe
   fieldProject = title|0|0|0|hme-cds,partner-subscribe
   fieldProject = uiType|0|0|0|hme-cds,partner-subscribe
   fieldProject = updateDate|0|0|0|hme-cds,partner-subscribe
   fieldProject = useOfferEndPadding|0|0|0|hme-cds,partner-subscribe

********** operation = subscriptionCleanup (NO)
 field = bodyId|1|idBody:body,1,1,low,,,,,,0
 field = maxUpdateDate|2|dateTime,0,1,,,,,,,0
 isFrozen = true
 number = 530
 returnType = success
   description = Cleanup crufty subscriptions for a body
   field = bodyId|,,the bodyId for which subscriptions should be cleaned up
   field = maxUpdateDate|,,everything cleaned up must be older than this date. default is 2 days ago.

********** operation = subscriptionExclusionRemove (NO)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 field = collectionId|2|idLong:collection,0,1,,,,,,,0
 field = subscriptionExclusionId|3|idInt:subscriptionExclusion,0,1,,,,,,,0
 isFrozen = true
 number = 534
 returnType = success
   field = bodyId|,,Limits the search to an object with exactly the same value in this field.
   field = collectionId|,,Limits the search to an object with exactly the same value in this field.
   field = subscriptionExclusionId|,,Limits the search to an object with exactly the same value in this field.

********** operation = subscriptionExclusionSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = bodyId|3|idBody:body,1,1,,,,,,,0
 field = collectionId|4|idLong:collection,0,1,,,,,,,0
 field = count|5|int,0,1,,1,,,1,,0
 field = format|6|enum:format,0,1,,,,,,,0
 field = groupBy|7|string,0,,,,,,,32,0
 field = levelOfDetail|8|enum:levelOfDetail,0,1,,,,,,,0
 field = note|9|string,0,,,,,,,,0
 field = offset|10|int,0,1,,0,,,,,0
 field = orderBy|11|string,0,,,,,,,32,0
 field = removeField|12|string,0,,,,,2,,,0
 field = responseTemplate|15|struct:responseTemplate,0,,,,,,,,0
 field = subscriptionExclusionId|13|idInt:subscriptionExclusion,0,1,,,,,,,0
 field = useAnchorOperation|14|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 isFrozen = true
 number = 535
 returnType = subscriptionExclusionList
   description = Search for a subscription exclusion.  You must specify: bodyId and collectionId.
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = bodyId|,,Limits the search to an object with exactly the same value in this field.
   field = collectionId|,,Limits the search to an object with exactly the same value in this field.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = subscriptionExclusionId|,,Limits the search to an object with exactly the same value in this field.
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = subscriptionExclusionStore (NO)
 field = bodyId|1|idBody:body,1,1,low,,,,,,0
 field = collectionForCollectionId|2|struct:collection,0,1,low,,,7,,,1
 field = collectionId|3|idLong:collection,1,1,low,,,,,,0
 field = subscriptionExclusionId|4|idInt:subscriptionExclusion,0,1,low,,,,,,0
 isFrozen = true
 number = 536
 returnType = subscriptionExclusion
   description = Stores a new or a modified subscriptionExclusionobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = subscriptionExclusionId|,,Globally unique id for this subscription exclusion.

********** operation = subscriptionRemove (NO)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 field = subscriptionId|2|idInt:subscription,1,1,,,,,,,0
 isFrozen = true
 number = 539
 returnType = success
   description = Removes a subscription object from the mind.
   project = subscriptionRemove|0|0|0|hme-cds,partner-subscribe

********** operation = subscriptionSearch (YES)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = autoRecord|3|boolean,0,1,,,,,,,0
 field = bodyId|4|idBody:body,1,1,,,,,,,0
 field = channel|5|struct:channel,0,1,,,5,,,,0
 field = collectionId|6|idLong:collection,0,1,,,5,,,,0
 field = count|7|int,0,1,,1,,,1,,0
 field = excludeObjectIdAndType|25|long,0,,,,,,,,0
 field = excludeSubscriptionType|30|enum:subscriptionType,0,,,,,,,,0
 field = format|8|enum:format,0,1,,,,,,,0
 field = groupBy|9|string,0,,,,,,,32,0
 field = idSetSourceSubset|10|anyDict,0,,,,3,,,,0
 field = idSetUrl|11|string,0,1,,,,2,,,0
 field = idSetUrlQueryPart|12|string,0,1,,,,2,,,0
 field = levelOfDetail|13|enum:levelOfDetail,0,1,,,,,,,0
 field = noLimit|14|boolean,0,1,,,,,,,0
 field = note|15|string,0,,,,,,,,0
 field = objectIdAndType|26|long,0,,,,,,,,0
 field = offset|16|int,0,1,,0,,,,,0
 field = orderBy|17|string,0,,,,,,,32,0
 field = removeField|18|string,0,,,,,2,,,0
 field = resolveCount|27|int,0,1,,0,,,,,0
 field = resolveLevelOfDetail|28|enum:levelOfDetail,0,1,,low,,,,,0
 field = resolveOffset|29|int,0,1,,0,,,,,0
 field = responseTemplate|24|struct:responseTemplate,0,,,,,,,,0
 field = subscriptionId|19|idInt:subscription,0,1,,,,,,,0
 field = subscriptionType|20|enum:subscriptionType,0,,,,,2,,,0
 field = uiType|21|enum:uiType,0,,,,,,,,0
 field = useAnchorOperation|22|boolean,0,1,,true,,,,,0
 field = withNoUpcomingRecordings|23|boolean,0,1,,,,,,,0
 fieldGroup = resolveSearchFields
 fieldGroup = searchFields
 isFrozen = true
 number = 540
 orderBy = priority
 orderBy = title
 orderBy = updateDate
 returnType = subscriptionList
   description = Right now, at least one of "subscriptionId", or "storeOnBodyId" must be provided so that people can't just search through the entire list.  This isn't really the right answer.  The answer should be restricted based on the querier's identity and rights.
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = autoRecord|,,Limits the search to an object with exactly the same value in this field.
   field = bodyId|,,Limits the search to an object with exactly the same value in this field.
   field = channel|5,,Only meaningful when the collectionId is specified. Will be used to filter out season passes not for the specified channel.
   field = collectionId|5,,Search for seasonPasses for the specified collectionId. When the channel is specified, only seasonPasses for that channel and/or those for all channels will be returned. This is mainly for the subscriptionForCollectionIdAndChannel annotation.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = excludeObjectIdAndType|,,An objectIdAndType from an idSequence obtained in a previous search operation, to be excluded from the result set.
   field = excludeSubscriptionType|,,The types of the subscriptions that the results should exclude. If multiple are specified, the mind will perform an AND operation. This takes higher precedence over subscriptionType if a type is specified in both places.
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = idSetSourceSubset|3,,Search a subset of the dictionary that defines the idSetSource.  Only subscriptions whose idSetSource dictionaries contain all of the things in this dictionary will be returned.  If multiple idSetSources are specified, they will be ORd together...
   field = idSetUrl|,2,Limits the search to an object with exactly the same value in this field.
   field = idSetUrlQueryPart|,2,Search a subset of the idSetUrl for a particular string.  This is primarily meant to be used for seeing if a user has a subscription to a particular id already.  Example input is "collectionId=tivo:cl.12345"
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = noLimit|,,Removes the restriction imposed by the count parameter.  When set to "true", all matching subscriptions are returned, no matter how many there are. Default: false 
   field = note|,,A request for the results to be annotated.
   field = objectIdAndType|,,Limits the search to an object with exactly the same value in this field.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = resolveCount|,,If a format of (string)idSequence is specified, the count of objectIds that should be resolved into objects. Ignored unless format = (string)idSequence.
   field = resolveLevelOfDetail|,,If a format of (string)idSequence is specified, the levelOfDetail at which the objects should be resolved.  Ignored unless resolveCount > 0 and format = (string)idSequence.
   field = resolveOffset|,,If a format of (string)idSequence is specified, the offset into the objectId list that should be resolved into objects. Ignored unless resolveCount > 0 and format = (string)idSequence.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = subscriptionId|,,Limits the search to an object with exactly the same value in this field.
   field = subscriptionType|,2,The types of the subscriptions that the results should be restricted to.  If multiple are specified, the mind will perform an OR operation.
   field = uiType|,,Only return results with a certain uiType. Multiple uiTypes are ORd together.
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   field = withNoUpcomingRecordings|,,Search only for subscriptions that currently have no upcoming or in-progress recordings (i.e. no recordings in the "scheduled" or "inProgress" state).
   fieldProject = bodyId|0|0|0|hme-cds,partner-subscribe
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = idSetSourceSubset|0|3|0|hme-cds,partner-subscribe
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = noLimit|0|0|0|hme-cds,partner-subscribe
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all
   fieldProject = subscriptionId|0|0|0|hme-cds,partner-subscribe
   fieldProject = uiType|0|0|0|hme-cds,partner-subscribe
   project = subscriptionSearch|0|0|0|hme-cds,partner-subscribe

********** operation = subscriptionStore (NO)
 field = autoRecord|1|boolean,0,1,low,true,,,,,0
 field = bodyGeneratesCandidates|2|boolean,0,1,low,,,,,,0
 field = bodyId|3|idBody:body,1,1,low,,,,,,0
 field = createDate|31|dateTime,0,1,high,,,6,,,0
 field = createdFrom|32|idInt:partner,0,1,high,,,,,,0
 field = deleteAfterRecording|4|boolean,0,1,medium,false,,2,,,0
 field = description|5|string,0,1,medium,,,,,,0
 field = editUiUrl|6|url,0,1,medium,,,2,,255,0
 field = endTimePadding|7|int,0,1,medium,,,,,,0
 field = folderingRules|8|enum:folderingRules,0,1,medium,,,,,,0
 field = hdOnly|29|boolean,0,1,low,false,3,,,,0
 field = idSetSource|9|union:idSetSource,0,1,medium,,3,,,,0
 field = idSetUrl|10|string,1,1,low,,,2,,,0
 field = isAdult|28|boolean,0,1,low,false,,,,,0
 field = isForKids|11|boolean,0,1,low,false,,,,,0
 field = keepBehavior|12|enum:keepBehaviorType,0,1,medium,,,,,,0
 field = keepDuration|27|int,0,1,medium,,,7,0,,0
 field = locatorGenerator|30|struct:locatorGenerator,0,1,low,,,,,,0
 field = logoIndex|13|int,0,1,medium,,,,0,,0
 field = maxRecordings|14|int,0,1,medium,,,,0,,0
 field = preferHd|15|boolean,0,1,low,,3,,,,0
 field = priority|16|int,0,1,medium,,,,1,5000,0
 field = recordingQuality|17|enum:recordingQualityLevel,0,1,medium,,,,,,0
 field = showStatus|18|enum:showStatus,0,1,low,rerunsAllowed,,,,,0
 field = startTimePadding|19|int,0,1,medium,,,,,,0
 field = subscriptionId|20|idInt:subscription,0,1,low,,,,,,0
 field = subscriptionIdInBody|21|localId,0,1,high,,,2,,,0
 field = subscriptionType|22|enum:subscriptionType,0,1,low,,,2,,,0
 field = title|23|string,0,1,low,,,,,255,0
 field = uiType|24|enum:uiType,0,1,medium,,,,,,0
 field = updateDate|25|dateTime,0,1,medium,,,6,,,0
 field = useOfferEndPadding|33|boolean,0,1,low,,,7,,,0
 field = userId|26|idLong:user,0,1,low,,,2,,,0
 isFrozen = true
 number = 541
 returnType = subscription
   description = Stores a new or a modified subscriptionobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = autoRecord|,,Is this subscription set to auto-record.  If this is set to true, the candidates of this subscription will be automatically scheduled to be recorded.  If this attribute is not set, the value will default to "true"
   field = bodyGeneratesCandidates|,,If set to true, the mind will not try to generate candidates for this subscription. It will leave it up to the body to do that. If a body has no subscriptions where bodyGeneratesCandidates is false, then it will be put into the AAA_NoVirtualChannel group and have it's polling interval set to 6 hours unless it is in a group with a higher priority sync policy. Should always be false for CDS content.
   field = bodyId|,,The ids of the body on which to store recording from this subscription.
   field = createDate|,6,createDate for the subscription
   field = createdFrom|,,partnerId of the app which the subscription was created from
   field = deleteAfterRecording|,2,If true, this object will be deleted by the mind once one of the Recording proposed by this subscription is recorded.  This is intended to be used only when this subscription is is for a single offer.  A future implementation may wait for the user to delete the content before this subscription is deleted.  The UI could allow the user to indicate if the content recorded was the intended content.
   field = description|,,A description for display to the user.
   field = editUiUrl|,2,The location of the application that can be used to modify this subscription.  (XXX what to do if the app doesn't work.)  note that it can be a generic UI for editing the attributes that appear here, but a generic app won't be able to modify what it idSetUrl.
   field = endTimePadding|,,Number of seconds after the end time of the showing to continue recording.  This allows the viewer to compensate when stations don't keep exact time.  If negative, it makes the recording end early.  If missing, acts as though it were 0.
   field = hdOnly|3,,If true, the scheduler will only schedule HD recordings. default value is false.
   field = idSetSource|3,,The dictionary that defines what this is a subscription for.
   field = idSetUrl|,2,The URL from which to fetch the candidates for scheduling.
   field = isAdult|,,If set to true, the content referenced by this subscription is adult.  This flag is specifically used to determine whether the subscription title was taken from an adult source.
   field = isForKids|,,If true, recordings generated from this subscription should be marked as being "for kids". This forKids-ness is used by some clients when deciding what to display to in KidZone.  When storing, defaults to false.
   field = keepBehavior|,,What rules should be used to determine how long to keep recordings this subscription generates?  If missing, defaults to "fifo". If set to duration, a keepDuration must be set.
   field = keepDuration|,7,If the keepBehavior is duration, this value must be set, and specifies the duration, in seconds, the recoding should be kept after completion. Currently used only in the CDP A/ES subscribe implementation.
   field = locatorGenerator|,,describes if and how locators should be generated for the subscription. If present, locators will be generated.
   field = logoIndex|,,This field specifies where to find the logo for this subscription based on an index in a well defined logo list.
   field = maxRecordings|,,The maximum number of recordings to keep at any one time.  If this is set to 0, it means 'unlimited'.  Any other value is the maximum number of recordings to keep for this subscription. Negative numbers are not valid.  If unset, it is up to the implementation to decide what to do.  During an update request, the TCD implementation will use the previous value, other implementations might treat it as 'unlimited'.
   field = preferHd|3,,If true, the scheduler will try to schedule a recording in HD. Otherwise there is no guarantee if the scheduled recording is in HD or not. Default to false.
   field = priority|,,Priority index for this subscription relative to others. Ranges from 1 (highest priority) to 5000 (lowest).
   field = recordingQuality|,,The quality setting that should be used for recordings from this subscription -- if possible (not all devices can control the recording quality).  If missing, uses a default quality level.
   field = startTimePadding|,,Number of seconds before the actual start of the showing to begin recording. This allows the viewer to compensate when stations don't keep exact time.  If negative, it makes the recording start late.  If missing, acts as though it were 0.
   field = subscriptionType|,2,Type of this subscription.  This field is only used by the UI to identify these subscriptions.
   field = title|,,A title for displaying this content source to the user.
   field = uiType|,,Affects how a subscription is displayed in a UI.
   field = updateDate|,6,updateDate for the subscription
   field = useOfferEndPadding|,7,If true, and endPaddingTime is not set, the endPaddingTime will be set based on the underlying offer. If true, and endPaddingTime is set, endPaddingTime will be used directly. If false, endPaddingTime will always be used directly.
   field = userId|,2,The user who owns this subscription. XXX: should go away, but I'm leaving it in case there are subscriptions with userIds that are sync'd.
   fieldProject = bodyGeneratesCandidates|0|0|0|hme-cds,partner-subscribe
   fieldProject = bodyId|0|0|0|hme-cds,partner-subscribe
   fieldProject = createDate|0|0|6|hme-cds,partner-subscribe
   fieldProject = createdFrom|0|0|0|hme-cds,partner-subscribe
   fieldProject = description|0|0|0|hme-cds,partner-subscribe
   fieldProject = folderingRules|0|0|0|hme-cds,partner-subscribe
   fieldProject = hdOnly|0|3|0|hme-cds,partner-subscribe
   fieldProject = idSetSource|0|3|0|hme-cds,subscribe
   fieldProject = isAdult|0|0|0|hme-cds,partner-subscribe
   fieldProject = isForKids|0|0|0|hme-cds,partner-subscribe
   fieldProject = locatorGenerator|0|0|0|hme-cds,partner-subscribe
   fieldProject = logoIndex|0|0|0|hme-cds,partner-subscribe
   fieldProject = maxRecordings|0|0|0|hme-cds,partner-subscribe
   fieldProject = preferHd|0|3|0|hme-cds,partner-subscribe
   fieldProject = showStatus|0|0|0|hme-cds,partner-subscribe
   fieldProject = subscriptionId|0|0|0|hme-cds,partner-subscribe
   fieldProject = title|0|0|0|hme-cds,partner-subscribe
   fieldProject = uiType|0|0|0|hme-cds,partner-subscribe
   fieldProject = updateDate|0|0|6|hme-cds,partner-subscribe
   fieldProject = useOfferEndPadding|0|0|7|hme-cds,partner-subscribe
   project = subscriptionStore|0|0|0|hme-cds,partner-subscribe

********** operation = subscriptionsReprioritize (YES)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 field = subscriptionId|2|idInt:subscription,1,,,,,,,,0
 number = 542
 returnType = success
   description = <i>Request:</i> This operation is used to reassign the values of the priority fields of all the user-prioritizable subscriptions for a body. The list of subscriptionId's included in this operation should include all defined subscriptions for the specified body that appear in the Season Pass Manager screen.  The effects of this operation on the priorities of subscription objects whose IDs are not listed as arguments is undefined.
   field = subscriptionId|,,The instances of this field are used to identify the subscription objects to be reprioritized.  They should be listed in the request in the desired new priority order, highest priority first.

********** operation = suggestionGenerate (NO)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 number = 544
 returnType = success
   description = Generates suggestions for a given body and puts them into the predictiveThumbs table in the database, to be used by offerSearch...
   field = bodyId|,,limits the suggestions generations to this body

********** operation = swInstructionsGet (NO)
 field = bodyId|1|idBody:body,1,1,low,,,,,,0
 field = callId|2|string,1,1,low,,,,,,0
 field = installedSoftware|3|struct:software,0,,low,,,,,,0
 field = requestToken|4|anyDict,0,1,low,,,,,,0
 field = softwareVersion|5|string,1,1,low,,,,,,0
 field = userInitiated|6|boolean,1,1,low,,,,,,0
 number = 1753
 returnType = swInstructions
   description = This operation pays homage to the earlier "softwareInstructionsGet" operation.  We decided to not extend softwareInstructionsGet and force ourselves into supporting backwards compatibility.  Instead, this new operation serves the same function, and fits into the "MServer" infrastructure.
   field = callId|,,A session ID.  Historically, a session of a Service call is called a "call". Using "callId" here enables more straightforward correlation to the trackerDb. Typically, the client would send Unix time, in seconds. This same value should be used as the callId for the entire session, meaning the invocation of callInstructionsGet plus each of the subsequent invocations of sub-operations, if any.
   field = installedSoftware|,,A list of software currently installed on the body.
   field = requestToken|,,Typically the "resultToken" of the previous *InstructionsGet response. If this is the first call, then this field is omitted. As an anyDict field, we have extensibility here.
   field = softwareVersion|,,The currently installed software version on the body. This field is mostly intended for informational logging and potentially identifying what software features are currently available to the client.
   field = userInitiated|,,Was this invocation initiated by explicit user action, rather than programmatically, based on callbackSeconds information? This is mainly informational.

********** operation = syncBodyPolicyCleanup (NO)
 number = 1092
 returnType = success
   description = clean up syncBodyPolicies that are no longer needed

********** operation = syncBodyPolicyRemove (NO)
 field = bodyId|1|idBody:anyBody,0,1,low,,,,,,0
 field = syncBodyPolicyId|2|idLong:syncBodyPolicy,1,1,,,,,,,0
 fieldGroup = syncBodyPolicyFields
 number = 548
 returnType = success
   field = syncBodyPolicyId|,,The id of the syncBodyPolicy to remove

********** operation = syncBodyPolicySearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = bodyId|3|idBody:anyBody,0,1,low,,,,,,0
 field = count|4|int,0,1,,1,,,1,,0
 field = databaseName|5|enum:databaseName,0,1,,,,,,,0
 field = enabled|6|boolean,0,1,,,,,,,0
 field = format|7|enum:format,0,1,,,,,,,0
 field = groupBy|8|string,0,,,,,,,32,0
 field = levelOfDetail|9|enum:levelOfDetail,0,1,,,,,,,0
 field = note|10|string,0,,,,,,,,0
 field = offset|11|int,0,1,,0,,,,,0
 field = orderBy|12|string,0,,,,,,,32,0
 field = owner|13|string,0,1,,,,,,32,0
 field = pollSeconds|14|int,0,1,,,,,0,,0
 field = removeField|15|string,0,,,,,2,,,0
 field = responseTemplate|21|struct:responseTemplate,0,,,,,,,,0
 field = sendData|16|enum:syncHasData,0,1,,,,,,,0
 field = syncBodyPolicyId|17|idLong:syncBodyPolicy,0,1,,,,,,,0
 field = syncEvenIfIsInSync|18|boolean,0,1,,,,,,,0
 field = trySlowCheck|19|boolean,0,1,,,,,,,0
 field = useAnchorOperation|20|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 fieldGroup = syncBodyPolicyFields
 fieldGroup = syncPolicySearchFields
 number = 549
 returnType = syncBodyPolicyList
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = databaseName|,,Limits the search to an object with exactly the same value in this field.
   field = enabled|,,Limits the search to an object with exactly the same value in this field.
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = owner|,,Limits the search to an object with exactly the same value in this field.
   field = pollSeconds|,,Limits the search to an object with exactly the same value in this field.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = sendData|,,Limits the search to an object with exactly the same value in this field.
   field = syncBodyPolicyId|,,Limits the search to an object with exactly the same value in this field.
   field = syncEvenIfIsInSync|,,Limits the search to an object with exactly the same value in this field.
   field = trySlowCheck|,,Limits the search to an object with exactly the same value in this field.
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = syncBodyPolicyStore (NO)
 field = bodyId|1|idBody:anyBody,0,1,low,,,,,,0
 field = databaseName|2|enum:databaseName,0,1,low,,,,,,0
 field = enabled|3|boolean,0,1,low,,,,,,0
 field = noPrivateData|10|boolean,0,1,low,,,,,,0
 field = owner|4|string,0,1,low,,,,,32,0
 field = pollSeconds|5|int,0,1,low,,,,0,,0
 field = sendData|6|enum:syncHasData,0,1,low,,,,,,0
 field = syncBodyPolicyId|7|idLong:syncBodyPolicy,0,1,,,,,,,0
 field = syncEvenIfIsInSync|8|boolean,0,1,low,,,,,,0
 field = trySlowCheck|9|boolean,0,1,low,,,,,,0
 fieldGroup = syncBodyPolicyFields
 fieldGroup = syncPolicyFields
 number = 550
 returnType = syncBodyPolicy
   field = enabled|,,If present, determines whether or not we'll sync the given database.  Otherwise, we use the default behavior.
   field = noPrivateData|,,if true, the mind will sync down all data to the body, but the body will only sync up non-private data.
   field = owner|,,Identifier indicating what entity created this entry.  This can be used to make sure different entities don't clobber/change policies someone else set up.  As a general rule, you should not change/delete a policy that does not belong to you.
   field = sendData|,,If present, determines what "sendData" we send to the body.  Note that if the hasData matches this value and the computed sendData is "none", "none" is sent instead of this value.  If not present, we use the computed value.
   field = syncBodyPolicyId|,,The id of the syncBodyPolicy to remove
   field = syncEvenIfIsInSync|,,If present, determines whether or not syncInstructionsGet will skip sync'ing databases that appear to be in sync.  (By default, syncInstructionsGet does skip them after mind2.)
   field = trySlowCheck|,,If present, determines whether or not we'll do a careful comparison when slowSync'ing and we think we're up-to-date.  Otherwise, we use the default behavior.

********** operation = syncDeltaClear (NO)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 field = databaseName|2|enum:databaseName,0,1,,,,,,,0
 number = 553
 returnType = success
   description = Clears all of the deltas for a given body and database, or all deltas for a body if no database is specified.

********** operation = syncDeltaInternalSearch (NO)
 field = backupType|1|enum:databaseName,0,1,,,,,,,0
 field = bodyId|2|idBody:anyBody,1,1,,,,,,,0
 field = databaseName|3|enum:databaseName,0,1,,,,,,,0
 field = maxMindSyncId|4|int,0,1,,,,,,,0
 field = minMindSyncId|5|int,0,1,,,,,,,0
 field = noLimit|6|boolean,0,1,,,,,,,0
 isFrozen = true
 number = 556
 orderBy = backupType
 orderBy = databaseName
 orderBy = mindSyncId
 returnType = syncDeltaInternalList
   description = Finds the list of deltas for a given body.
   field = backupType|,,Limits the search to an object with exactly the same value in this field.
   field = bodyId|,,Limits the search to an object with exactly the same value in this field.

********** operation = syncDeltaInternalStore (NO)
 field = backupType|1|enum:databaseName,0,1,low,,,,,,0
 field = bodyId|2|idBody:anyBody,1,1,low,,,,,,0
 field = dbName|3|enum:databaseName,1,1,low,,,,,,0
 field = mindSyncId|4|int,1,1,low,,,,,,0
 field = objectId|5|int,1,1,low,,,,,,0
 field = objectIdInBody|6|string,0,1,low,,,,,20,0
 field = time|7|dateTime,1,1,low,,,,,,0
 isFrozen = true
 number = 557
 returnType = syncDeltaInternal
   description = Stores a new or a modified syncDeltaInternalobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = objectId|,,objectId is a bigint, which is a 64-bit int.

********** operation = syncDeltaSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = backupType|3|enum:databaseName,0,1,,,,,,,0
 field = bodyId|4|idBody:anyBody,1,1,,,,,,,0
 field = count|5|int,0,1,,1,,,1,,0
 field = databaseName|6|enum:databaseName,1,1,,,,,,,0
 field = format|7|enum:format,0,1,,,,,,,0
 field = groupBy|8|string,0,,,,,,,32,0
 field = levelOfDetail|9|enum:levelOfDetail,0,1,,,,,,,0
 field = maxTime|10|dateTime,0,1,,,,,,,0
 field = minTime|11|dateTime,0,1,,,,,,,0
 field = note|12|string,0,,,,,,,,0
 field = offset|13|int,0,1,,0,,,,,0
 field = orderBy|14|string,0,,,,,,,32,0
 field = removeField|15|string,0,,,,,2,,,0
 field = responseTemplate|17|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|16|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 isFrozen = true
 number = 559
 returnType = syncDeltaList
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = syncGlobalReset (NO)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 number = 560
 returnType = success
   description = This is an operation used to clean up the state of a body when a serious sync problem is detected.  It is expected that this will be needed in situations such as when the disk is replaced in a TCD.  This will also be used when a body switches opt status from opt-in to opt-neutral.

********** operation = syncGroupPolicyRemove (NO)
 field = syncGroupPolicyId|1|idLong:syncGroupPolicy,1,1,,,,,,,0
 number = 563
 returnType = success
   description = Removes a syncGroupPolicy object from the mind.

********** operation = syncGroupPolicySearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = count|3|int,0,1,,1,,,1,,0
 field = databaseName|4|enum:databaseName,0,1,,,,,,,0
 field = enabled|5|boolean,0,1,,,,,,,0
 field = format|6|enum:format,0,1,,,,,,,0
 field = groupBy|7|string,0,,,,,,,32,0
 field = levelOfDetail|8|enum:levelOfDetail,0,1,,,,,,,0
 field = note|9|string,0,,,,,,,,0
 field = offset|10|int,0,1,,0,,,,,0
 field = orderBy|11|string,0,,,,,,,32,0
 field = owner|12|string,0,1,,,,,,32,0
 field = pollSeconds|13|int,0,1,,,,,0,,0
 field = priority|14|int,0,1,low,,,,0,,0
 field = removeField|15|string,0,,,,,2,,,0
 field = responseTemplate|22|struct:responseTemplate,0,,,,,,,,0
 field = sendData|16|enum:syncHasData,0,1,,,,,,,0
 field = serviceGroupName|17|string,0,,low,,,,,255,0
 field = syncEvenIfIsInSync|18|boolean,0,1,,,,,,,0
 field = syncGroupPolicyId|19|idLong:syncGroupPolicy,0,1,,,,,,,0
 field = trySlowCheck|20|boolean,0,1,,,,,,,0
 field = useAnchorOperation|21|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 fieldGroup = syncPolicySearchFields
 fieldGroup = syncGroupPolicyFields
 number = 564
 returnType = syncGroupPolicyList
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = databaseName|,,Limits the search to an object with exactly the same value in this field.
   field = enabled|,,Limits the search to an object with exactly the same value in this field.
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = owner|,,Limits the search to an object with exactly the same value in this field.
   field = pollSeconds|,,Limits the search to an object with exactly the same value in this field.
   field = priority|,,Policies with lower numbers are more important.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = sendData|,,Limits the search to an object with exactly the same value in this field.
   field = syncEvenIfIsInSync|,,Limits the search to an object with exactly the same value in this field.
   field = syncGroupPolicyId|,,Limits the search to an object with exactly the same value in this field.
   field = trySlowCheck|,,Limits the search to an object with exactly the same value in this field.
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = syncGroupPolicyStore (NO)
 field = databaseName|1|enum:databaseName,0,1,low,,,,,,0
 field = enabled|2|boolean,0,1,low,,,,,,0
 field = noPrivateData|11|boolean,0,1,low,,,,,,0
 field = owner|3|string,0,1,low,,,,,32,0
 field = pollSeconds|4|int,0,1,low,,,,0,,0
 field = priority|5|int,0,1,low,,,,0,,0
 field = sendData|6|enum:syncHasData,0,1,low,,,,,,0
 field = serviceGroupName|7|string,0,,low,,,,,255,0
 field = syncEvenIfIsInSync|8|boolean,0,1,low,,,,,,0
 field = syncGroupPolicyId|9|idLong:syncGroupPolicy,0,1,low,,,,,,0
 field = trySlowCheck|10|boolean,0,1,low,,,,,,0
 number = 565
 returnType = syncGroupPolicy
   description = Stores a new or a modified syncGroupPolicyobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = enabled|,,If present, determines whether or not we'll sync the given database.  Otherwise, we use the default behavior.
   field = noPrivateData|,,if true, the mind will sync down all data to the body, but the body will only sync up non-private data.
   field = owner|,,Identifier indicating what entity created this entry.  This can be used to make sure different entities don't clobber/change policies someone else set up.  As a general rule, you should not change/delete a policy that does not belong to you.
   field = priority|,,Policies with lower numbers are more important.
   field = sendData|,,If present, determines what "sendData" we send to the body.  Note that if the hasData matches this value and the computed sendData is "none", "none" is sent instead of this value.  If not present, we use the computed value.
   field = syncEvenIfIsInSync|,,If present, determines whether or not syncInstructionsGet will skip sync'ing databases that appear to be in sync.  (By default, syncInstructionsGet does skip them after mind2.)
   field = syncGroupPolicyId|,,The globally unique id for this syncGroupPolicy, assigned by the mind.
   field = trySlowCheck|,,If present, determines whether or not we'll do a careful comparison when slowSync'ing and we think we're up-to-date.  Otherwise, we use the default behavior.

********** operation = syncInstructionsExplain (NO)
 field = bodyId|1|idBody:anyBody,1,1,,,,,,,0
 field = levelOfDetail|2|enum:levelOfDetail,0,1,low,,,,,,0
 field = syncInstructionsGet|3|struct:syncInstructionsGet,1,1,,,,,,,0
 fieldGroup = levelOfDetailFields
 number = 567
 returnType = syncInstructionsExplanation
   description = This operation says what syncInstructionsGet would return and, more important for debugging, the various policies that went into the computation.  It pretends that the body is offering to sync all available databases.
   field = bodyId|,,Same as syncInstructionsGet.bodyId.  Needs to be here so we get serviceGroup -- sorry.
   field = levelOfDetail|,,In a result from a Search operation from the mind, this field says what level of detail the mind produced for this object. The mind will always set this field when returning the result of a search.  It will not be set inside a syncPong, and you should not set it when sending things to the mind.
   field = syncInstructionsGet|,,The syncInstructionsGet we want explained.
   fieldProject = levelOfDetail|0|0|0|all

********** operation = syncInstructionsGet (NO)
 field = bodyCommErrorCount|1|int,0,1,low,,,,,,0
 field = bodyCommTime|2|float,0,1,low,,,,,,0
 field = bodyId|3|idBody:anyBody,1,1,,,,,,,0
 field = database|4|struct:syncBodyState,0,,,,,,,,0
 field = isPhone|5|boolean,0,1,,false,,,,,0
 field = mindGlobalState|6|struct:syncMindGlobalState,0,1,,,7,,,,0
 field = mindState|7|union:syncMindState,0,,,,,6,,,0
 field = requestedBy|8|enum:actionOriginator,0,1,,background,,,,,0
 fieldGroup = syncRequestGlobalFieldsBegin
 isFrozen = true
 number = 571
 returnType = syncInstructions
   description = syncInstructionsGet is a request from the body to the mind about which databases should be synchronized.  The mind returns syncInstructions which say which databases to sync.  The arguments to syncInstructionsGet can be grouped into a few categories.  First is basic stuff like the bodyId and whether the body is sync'ing over the phone or over broadband.  Then there are a few statistics like the bodyCommErrorCount and bodyCommTime which we track on the server side to measure the health of the system.  Last, and most interesting, the body includes information about each database it's willing to sync. It is this per-database information that we'll concentrate on in the next few paragraphs.  It is not the place of this comment to promise the complete policy for how the mind will decide which databases will be returned in the syncInstructions.  It is the place of this comment to explain a few things about what data your body could provide and how that will help the overall system.  After mind2, if the per-database description includes the bodySyncId, bodySyncIdReset, or mindSyncIdAck, the mind may use that information to help decide whether the body is up-to-date or whether there are pending deltas on either side.  If none of bodySyncId, bodySyncIdReset, or mindSyncIdAck are present, the mind can't tell whether a sync is required and may take that into account when deciding which databases to sync.  The mind may consider other factors when choosing which databases to sync.  For instance, if the mind is busy or doesn't want to be bothered right now, it may send back a response saying not to synchronize any databases right now.  Sometimes the mind might only sync high-priority databases.  Sometimes it might force otherwise unneeded slow syncs just to do testing. Sometimes the mind's normal behaviour is overridden by syncBodyPolicies and/or syncGroupPolicies.  There are two main ways clients are using syncInstructionsGet. These are documented here even though they're really not part of the API specification.  <b>TCDs</b></br>  TCDs currently use mind2.  They send their bodySyncId in for each database.  mind2 does not try to interpret that bodySyncId and it assumes that it doesn't know what state the database is in.  The TCD basically takes advantage of this because it's really getting the instructions for its next sync cycle.  If the mind were to determine that the database was up-to-date now and then the body used those instructions hours (or even a day) later, it might skip a database that it shouldn't.  Mind developers need to keep this usage in their thoughts while designing the exact behaviour of syncInstructionsGet.  Bug 124676 is about upgrading the TCDs to use post-mind2 minds.  <b>Other bodies (esp. SPD bodies)</b></br>  SPD bodies use syncInstructionsGet to poll the mind to find out what to sync.  These bodies use the instructions that they get in the current sync cycle, so they include as much information as they have about each database's state so the mind can be as smart as it wants.  They use the pseudo-code below to include database about their databases.  <pre>    dbState.addInt("bodySyncId", bodySyncId);    if have a mindSyncId to ack,      dbState.addInt("mindSyncIdAck", mindSyncIdAck);    if have pending bodySyncIdReset,      dbState.addBoolean("bodySyncIdReset", true); </pre>
   field = bodyCommErrorCount|,,The number of errors contacting the mind since the last successful syncInstructionsGet
   field = bodyCommTime|,,The number of seconds it took the body to communicate with the mind during the last successful syncInstructionsGet
   field = bodyId|,,The id of the body requesting the information.
   field = database|,,The current bodySyncId for each database that this body knows how to sync.
   field = isPhone|,,True if this sync is happening over a phone line.
   field = mindGlobalState|7,,The mindGlobalState that was sent to the body in the last syncInstructions or or syncPongEnd.  The body must fill this field in for all syncInstructionsGet and syncPing calls except the very first.  Not filling it in is a signal to the mind that this is a new body and the mind should forget everything it knows about this body.  For bodies upgrading from versions before mind7, this should be the first mindState dictionary from the most recent syncInstructions.
   field = mindState|,6,The mindState that was sent to the body in the last syncInstructions.  It may also include mindState from the previous syncPongEnds.
   field = requestedBy|,,This field describes what action initiated this syncInstructionsGet Certain actions can be given higher priority than others with regards to sync throttling based on load

********** operation = syncInternalSearch (NO)
 field = bodyId|1|idBody:anyBody,1,1,,,,,,,0
 field = databaseName|2|enum:databaseName,0,1,,,,,,,0
 field = noLimit|3|boolean,0,1,,,,,,,0
 isFrozen = true
 number = 574
 returnType = syncInternalList
   description = Finds the internal sync state for a given body.
   field = bodyId|,,Limits the search to an object with exactly the same value in this field.

********** operation = syncInternalStore (NO)
 field = bodyId|1|idBody:anyBody,1,1,low,,,,,,0
 field = bodySyncId|2|int,1,1,low,,,,,,0
 field = dbName|3|enum:databaseName,1,1,low,,,,,,0
 field = mindSyncCounter|4|int,0,1,low,1,,,,,0
 field = mindSyncId|5|int,1,1,low,,,,,,0
 field = nextGeneratedId|6|int,1,1,low,,,,,,0
 field = resetState|7|enum:syncResetState,0,1,low,,,,,,0
 isFrozen = true
 number = 575
 returnType = syncInternal
   description = Stores a new or a modified syncInternalobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.

********** operation = syncPing (NO)
 field = begin|1|struct:syncPingBegin,1,1,,,,,,,0
 field = bodyId|2|idBody:anyBody,1,1,,,,,,,0
 field = bucketNumber|3|int,0,1,,,,,,,0
 field = delta|4|struct:syncDelta,0,,,,,,,,0
 field = end|5|struct:syncPingEnd,1,1,,,,,,,0
 isFrozen = true
 number = 583
 returnType = syncPong
   description = A detailed description of the synchronization procol can be found in <a href="https://bigbook.tivo.com/index/TrioSyncDesign2" >TrioSyncDesign2</a>.  This structure is broken into three parts to support streaming. All of the things that the server might need before handling incoming deltas are in the header, and all of the things that the client might not be able to figure out until after sending all of the deltas are in the end.  The field names are carefully chosen so that the alphabetical order is the correct order: begin, delta, end.  The bodyId field is at the top level because that's required by the mind.  The fields that are used to dispatch a request to the right server are always at the top level and always appear in the URL.
   field = bodyId|,,The body that is requesting the sync.
   field = bucketNumber|,,bucketNumber of the TCD. For internal use only!

********** operation = syncRequest (NO)
 field = bodyId|3|idBody:body,1,1,,,,,,,0
 field = databaseName|4|enum:databaseName,0,,,,,,,,0
 field = object|1
 field = syncTime|2
 isFrozen = true
 number = 589
 returnType = success
   description = This operation triggers an immediate sync from the given body.
   field = bodyId|,,The ID of the body that should sync.
   field = databaseName|,,The name of the database(s) to sync.  If omitted, it means to sync all databases.

********** operation = syncStateSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = bodyId|3|idBody:anyBody,1,1,,,,,,,0
 field = count|4|int,0,1,,1,,,1,,0
 field = format|5|enum:format,0,1,,,,,,,0
 field = groupBy|6|string,0,,,,,,,32,0
 field = levelOfDetail|7|enum:levelOfDetail,0,1,,,,,,,0
 field = note|8|string,0,,,,,,,,0
 field = offset|9|int,0,1,,0,,,,,0
 field = orderBy|10|string,0,,,,,,,32,0
 field = removeField|11|string,0,,,,,2,,,0
 field = responseTemplate|13|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|12|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 isFrozen = true
 number = 593
 returnType = syncStateList
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = bodyId|,,Limits the search to an object with exactly the same value in this field.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = syncStatusGet (NO)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 field = databaseName|2|enum:databaseName,1,1,,,,,,,0
 field = objectId|3|string,0,,,,,,,,0
 number = 1075
 returnType = syncStatus
   description = Gets the sync Status for given objects.  The given objects are identified by databaseName and objectId. The return sync status tells for each object, if the object is synced to the body or not. The object is considered synced to the body if it is not present in the syncDelta table. Note that the sync status is from MIND's point of view.  The returned sync status may not be in the same order as the list of objectIds passed in.  If the given databaseName is not a synced database, it returns error.

********** operation = systemCommandEventRegister (NO)
 field = argument|1|string,0,,,,,,,,0
 field = bodyId|3|idBody:body,1,1,,,,,,,0
 field = environment|2|struct:programEnvironmentVariable,0,,,,,,,,0
 number = 2030
 returnType = systemCommandEvent
   description = Starts a given command on a body and listens for events generated by the command (stdout events, exit code events, etc.).  This query must be monitored.  Data can be sent to the command by issuing an RPC updateRequest with a systemCommandStdinSend operation.
   field = argument|,,Arguments for starting a command, the first being the command itself.
   field = environment|,,Environment variables to set before starting the command.

********** operation = systemCommandStdinSend (NO)
 field = bodyId|2|idBody:body,1,1,,,,,,,0
 field = data|1|bytestring,1,1,,,,,,,0
 number = 2031
 returnType = success
   description = Sends stdin data to a running system command. <strong>   This request may only be used as part of a requestUpdate RPC request   to an active systemCommandEventRegister session. </strong>

********** operation = systemDiagnosticSearch (NO)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 number = 1468
 returnType = systemDiagnosticList
   description = Returns ALL of the system diagnostics for the body.
   field = bodyId|,,The request will be forwarded to this body.

********** operation = tagAssociationRemove (NO)
 field = collectionId|1|idLong:collection,0,1,low,,,,,,0
 field = partnerId|2|idInt:partner,0,1,low,,,,,,0
 field = tagId|3|idInt:tag,1,1,low,,,,,,0
 isFrozen = true
 number = 598
 returnType = success
   description = store a tagAssociation
   field = collectionId|,,Limits the search to an object with exactly the same value in this field.
   field = partnerId|,,Limits the search to an object with exactly the same value in this field.
   field = tagId|,,Limits the search to an object with exactly the same value in this field.

********** operation = tagAssociationSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = collectionId|3|idLong:collection,0,1,low,,,,,,0
 field = count|4|int,0,1,,1,,,1,,0
 field = format|5|enum:format,0,1,,,,,,,0
 field = groupBy|6|string,0,,,,,,,32,0
 field = levelOfDetail|7|enum:levelOfDetail,0,1,,,,,,,0
 field = note|8|string,0,,,,,,,,0
 field = offset|9|int,0,1,,0,,,,,0
 field = orderBy|10|string,0,,,,,,,32,0
 field = partnerId|11|idInt:partner,0,1,low,,,,,,0
 field = removeField|12|string,0,,,,,2,,,0
 field = responseTemplate|16|struct:responseTemplate,0,,,,,,,,0
 field = searchable|13|boolean,0,1,low,,,,,,0
 field = tagId|14|idInt:tag,0,1,low,,,,,,0
 field = useAnchorOperation|15|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 isFrozen = true
 number = 599
 returnType = tagAssociationList
   description = search for a tagAssociation
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = collectionId|,,Limits the search to an object with exactly the same value in this field.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = partnerId|,,Limits the search to an object with exactly the same value in this field.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = searchable|,,Limits the search to an object with exactly the same value in this field.
   field = tagId|,,Limits the search to an object with exactly the same value in this field.
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = tagAssociationStore (NO)
 field = collectionId|1|idLong:collection,0,1,low,,,,,,0
 field = partnerId|2|idInt:partner,0,1,low,,,,,,0
 field = searchable|3|boolean,0,1,high,,,,,,0
 field = tagId|4|idInt:tag,1,1,low,,,,,,0
 isFrozen = true
 number = 600
 returnType = tagAssociation
   description = store a tagAssociation
   field = partnerId|,,Allow a tag to be associated with all partner collections. We allow either collectionId or partnerId but not both.
   field = searchable|,,This flag defines whether or not a collectionTag is searchable. If 1, a collectionTag is searchable. If 0, a collectionTag is not searchable. Default to 0 (not searchable).

********** operation = tagRemove (NO)
 field = tagId|1|idInt:tag,1,1,low,,,,,,0
 isFrozen = true
 number = 602
 returnType = tag
   description = store a tag
   field = tagId|,,Limits the search to an object with exactly the same value in this field.

********** operation = tagResultSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = bodyId|3|idBody:body,0,1,,,,,,,0
 field = categoryId|4|idLong:category,0,,,,,,,,0
 field = count|5|int,0,1,,1,,,1,,0
 field = excludeObjectIdAndType|29|long,0,,,,,,,,0
 field = excludePartnerId|6|idInt:partner,0,,,,,,,,0
 field = format|7|enum:format,0,1,,,,,,,0
 field = groupBy|8|string,0,,,,,,,32,0
 field = hdtv|9|boolean,0,1,,,,,,,0
 field = includeBroadband|10|boolean,0,1,,true,,,,,0
 field = includeBroadcast|11|boolean,0,1,,true,,,,,0
 field = includeEmptyTags|12|boolean,0,1,,true,,,,,0
 field = includeFree|13|boolean,0,1,,true,,,,,0
 field = includePaid|14|boolean,0,1,,true,,,,,0
 field = includeVod|28|boolean,0,1,,true,,,,,0
 field = keyword|15|string,0,1,,,,,,128,0
 field = levelOfDetail|16|enum:levelOfDetail,0,1,,,,,,,0
 field = lineup|17|struct:lineup,0,,,,,,,,0
 field = minEndTime|18|dateTime,0,1,,,,,,,0
 field = noLineupFilter|27|boolean,0,1,,false,,,,,0
 field = note|19|string,0,,,,,,,,0
 field = objectIdAndType|30|long,0,,,,,,,,0
 field = offset|20|int,0,1,,0,,,,,0
 field = orderBy|21|string,0,,,,,,,32,0
 field = partnerId|22|idInt:partner,0,1,,,,,,,0
 field = removeField|23|string,0,,,,,2,,,0
 field = resolveCount|31|int,0,1,,0,,,,,0
 field = resolveLevelOfDetail|32|enum:levelOfDetail,0,1,,low,,,,,0
 field = resolveOffset|33|int,0,1,,0,,,,,0
 field = responseTemplate|34|struct:responseTemplate,0,,,,,,,,0
 field = tagId|26|idInt:tag,0,,,,,,,,0
 field = useAnchorOperation|24|boolean,0,1,,true,,,,,0
 field = useLineup|25|boolean,0,1,,,,,,,0
 fieldGroup = filterFields
 fieldGroup = resolveSearchFields
 fieldGroup = searchFields
 fieldGroup = tagFilterFields
 isFrozen = true
 number = 605
 returnType = tagResultList
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = bodyId|,,SJC: FILL IN PROPER DESCRIPTION, STRIP PROPER FIELDS Restricts the search to collections showing in the next 14 days that are available on this body.  For bodies that sync with the mind, availability is based on the list of channels that the body has sent up.  Only channels that have isReceived=true are used.  For bodies that have not synced with the mind, availability is based on the lineup retrieved from the BSM, and all channels are used.
   field = categoryId|,,Take a categoryId.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = excludeObjectIdAndType|,,An objectIdAndType from an idSequence obtained in a previous search operation, to be excluded from the result set.
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = includeBroadband|,,Include broadband collections
   field = includeBroadcast|,,Include broadcast collections
   field = includeEmptyTags|,,Include empty tags. Defaults to true for old behavior.
   field = includeFree|,,Include free collections. These would be the pgd collections and cds offers that has a price of 0.
   field = includePaid|,,Include paid collections. These would be cds offers with price greater than 0.
   field = includeVod|,,Include vod collections
   field = keyword|,,Matches on the prefix of tag names.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = lineup|,,Restricts the search to collections showing in the next 14 days on a channel in the named lineup.
   field = minEndTime|,,Returns collections that show after minEndTime in the next 14 days of PGD data.
   field = noLineupFilter|,,If set to TRUE, has the effect that all tags are returned if they match the passed-in keyword/prefix. All other filters are ignored.
   field = note|,,A request for the results to be annotated.
   field = objectIdAndType|,,Limits the search to an object with exactly the same value in this field.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = resolveCount|,,If a format of (string)idSequence is specified, the count of objectIds that should be resolved into objects. Ignored unless format = (string)idSequence.
   field = resolveLevelOfDetail|,,If a format of (string)idSequence is specified, the levelOfDetail at which the objects should be resolved.  Ignored unless resolveCount > 0 and format = (string)idSequence.
   field = resolveOffset|,,If a format of (string)idSequence is specified, the offset into the objectId list that should be resolved into objects. Ignored unless resolveCount > 0 and format = (string)idSequence.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = tagId|,,Limits the search to an object with exactly the same value in this field.
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   field = useLineup|,,forces query to use headend and lineup instead of custom channel list.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all
   project = tagResultSearch|0|0|0|partner-cds

********** operation = tagSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = bodyId|16|idBody:body,0,1,,,,,,,0
 field = count|3|int,0,1,,1,,,1,,0
 field = excludeObjectIdAndType|17|long,0,,,,,,,,0
 field = format|4|enum:format,0,1,,,,,,,0
 field = groupBy|5|string,0,,,,,,,32,0
 field = levelOfDetail|6|enum:levelOfDetail,0,1,,,,,,,0
 field = name|7|string,0,1,low,,,,,128,0
 field = namePrefix|8|string,0,1,low,,,,,128,0
 field = noLimit|9|boolean,0,1,,,,,,,0
 field = note|10|string,0,,,,,,,,0
 field = objectIdAndType|18|long,0,,,,,,,,0
 field = offset|11|int,0,1,,0,,,,,0
 field = orderBy|12|string,0,,,,,,,32,0
 field = removeField|13|string,0,,,,,2,,,0
 field = resolveCount|19|int,0,1,,0,,,,,0
 field = resolveLevelOfDetail|20|enum:levelOfDetail,0,1,,low,,,,,0
 field = resolveOffset|21|int,0,1,,0,,,,,0
 field = responseTemplate|22|struct:responseTemplate,0,,,,,,,,0
 field = tagId|14|idInt:tag,0,,low,,,,,,0
 field = useAnchorOperation|15|boolean,0,1,,true,,,,,0
 fieldGroup = resolveSearchFields
 fieldGroup = searchFields
 isFrozen = true
 number = 606
 orderBy = name
 returnType = tag
   description = search for a tag
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = excludeObjectIdAndType|,,An objectIdAndType from an idSequence obtained in a previous search operation, to be excluded from the result set.
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = name|,,Limits the search to an object with exactly the same value in this field.
   field = noLimit|,,Do not limit this search to a given count. This is a special field that is only allowed on certain operations. This is one of those operations.
   field = note|,,A request for the results to be annotated.
   field = objectIdAndType|,,Limits the search to an object with exactly the same value in this field.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = resolveCount|,,If a format of (string)idSequence is specified, the count of objectIds that should be resolved into objects. Ignored unless format = (string)idSequence.
   field = resolveLevelOfDetail|,,If a format of (string)idSequence is specified, the levelOfDetail at which the objects should be resolved.  Ignored unless resolveCount > 0 and format = (string)idSequence.
   field = resolveOffset|,,If a format of (string)idSequence is specified, the offset into the objectId list that should be resolved into objects. Ignored unless resolveCount > 0 and format = (string)idSequence.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = tagId|,,Limits the search to an object with exactly the same value in this field.
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = tagStore (NO)
 field = name|1|string,0,1,low,,,,,128,0
 field = tagAssociationForTagId|2|struct:tagAssociation,0,,low,,,7,,,1
 field = tagId|3|idInt:tag,0,1,low,,,,,,0
 field = tagResultCountForTagId|4|int,0,1,low,,,7,,,1
 isFrozen = true
 number = 607
 returnType = tag
   description = Stores a new or a modified tagobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.

********** operation = temporaryKeyCredentialGenerate (NO)
 field = partnerId|1|idInt:partner,1,1,,,,,,,0
 number = 2024
 returnType = temporaryKeyCredential
   description = Called to generate a temporaryKeyCredential for a partner ID, which can be used by bodyAuthenticate.

********** operation = testAnchorSearch (NO)
 field = search|1|knownDict,1,1,,,,,,,0
 number = 609
 returnType = success
   description = This is Cameron's neat-o test.  The test runs the given query to get all of the answers.  Then, it goes by batches using anchors to see if it gets the same answers.
   field = search|,,This is the basic spec for the query we're testing.

********** operation = testIdLongAndType (NO)
 field = idLongAndType|1|idLongAndType,1,1,,,,,,,0
 number = 1296
 returnType = idLongAndTypeContainer
   description = Test the construction and de-construction of idLongAndType fields
   field = idLongAndType|,,The Id to test

********** operation = testMdhVodDataProcess (NO)
 field = mdhMessage|1
 field = mdhMessageAnyDict|4|anyDict,0,,,,,,,,0
 field = mdhMessageKeyValue|3|struct:keyValue,1,,,,,,,,0
 field = mdhMessageType|2|enum:mdhMessageType,1,1,,,,,,,0
 field = vodImportType|5|enum:vodImportType,0,1,,,,,,,0
 number = 1554
 returnType = testMdhVodDataProcessResponse
   description = Invoke the processing of a single MDH VOD data message. The possible MDH message types:  ADI, CDNS, TS Only one of these messages should be passed in at a time. An ADI is a general format in the VOD world.  CDNS and TS are specific to MDH and a particular MSO's infrastructure.
   field = mdhMessageAnyDict|,,For ultimate flexibility, let's define an anyDict field which may or may not be used by the test code.  There may be some MDH message attributes which are multiples/lists, or something more complex in the future.
   field = mdhMessageKeyValue|,,The representation of the MDH message to process. All the keyValue objects collectively represent a single MDH message.
   field = mdhMessageType|,,The type of the MDH message being passed in.
   field = vodImportType|,,vod metadata type to import

********** operation = testNextServerIdStore (NO)
 field = random|1|string,1,1,low,,,,,100,0
 field = testNextServerIdId|2|idLong:testNextServerId,0,1,low,,,,,,0
 number = 2110
 returnType = testNextServerId
   description = Stores a new or a modified testNextServerIdobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = random|,,Just a random string.
   field = testNextServerIdId|,,Id

********** operation = testSearch (NO)
 field = search|1|anyDict,1,1,,,,,,,0
 field = thorough|2|boolean,1,1,,,,,,,0
 field = verbosity|3|int,1,1,,,,,,,0
 number = 611
 returnType = success
   field = search|,,The base search.  The groupBy field will be added.
   field = thorough|,,When true, tries *all* combinations of orderBy and groupBy.
   field = verbosity|,,0: no printing <br> 1: a little bit <br> 2: a lot

********** operation = testStructureValidity (NO)
 field = primaryField|1|struct:fieldDefinition,0,,,,,,,,0
 field = secondaryField|2|struct:fieldDefinition,0,,,,,,,,0
 field = structure|3|anyDict,1,1,,,,,,,0
 number = 1365
 returnType = success
   description = pass in some fieldDefinitions, and a structure, and verify that the structure conforms to the set of fieldDefinitions
   field = primaryField|,,primary field definitions for a structure.
   field = secondaryField|,,secondary field definitions. this models a structure that extends an existing structure to add another set of fields.
   field = structure|,,the structure should contain fields matching the schema defined by the primary and secondary field definitions

********** operation = testSyncRemove (NO)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 field = testSyncId|2|idInt:testSync,1,1,,,,,,,0
 isFrozen = true
 number = 614
 returnType = success
   description = Removes a testSync object from the mind.

********** operation = testSyncSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = bodyId|3|idBody:body,1,1,low,,,,,,0
 field = count|4|int,0,1,,1,,,1,,0
 field = format|5|enum:format,0,1,,,,,,,0
 field = groupBy|6|string,0,,,,,,,32,0
 field = levelOfDetail|7|enum:levelOfDetail,0,1,,,,,,,0
 field = note|8|string,0,,,,,,,,0
 field = offset|9|int,0,1,,0,,,,,0
 field = orderBy|10|string,0,,,,,,,32,0
 field = removeField|11|string,0,,,,,2,,,0
 field = responseTemplate|15|struct:responseTemplate,0,,,,,,,,0
 field = testSyncId|12|idInt:testSync,0,1,low,,,,,,0
 field = testSyncIdInBody|13|localId,0,1,low,,,2,,,0
 field = useAnchorOperation|14|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 number = 615
 returnType = testSyncList
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = bodyId|,,Limits the search to an object with exactly the same value in this field.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = testSyncId|,,Limits the search to an object with exactly the same value in this field.
   field = testSyncIdInBody|,2,Limits the search to an object with exactly the same value in this field.
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = testSyncStore (NO)
 field = bodyData|1|string,1,1,low,,,,,32,0
 field = bodyId|2|idBody:body,1,1,low,,,,,,0
 field = mindData|3|string,1,1,low,,,,,32,0
 field = testSyncId|4|idInt:testSync,0,1,low,,,,,,0
 field = testSyncIdInBody|5|localId,0,1,low,,,2,,,0
 isFrozen = true
 number = 616
 returnType = testSync
   description = Stores a new or a modified testSyncobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.

********** operation = testUtf8 (NO)
 field = codeIn|3|int,0,,low,,,,,,0
 field = codeOut|1|int,0,,low,,,,,,0
 field = stringIn|4|string,0,1,low,,,,,,0
 field = stringOut|2|string,0,1,low,,,,,,0
 number = 617
 returnType = testUtf8
   description = testUtf8 pseudo-op. response

********** operation = timsConfigFileChooser (NO)
 field = configType|1|string,1,1,,,,,,128,0
 field = file|2|string,1,1,,,,,,128,0
 number = 784
 returnType = success
   description = For use by timsInventoryGet.test, this is a utility operation to manipulate $SRCROOT/TivoData/etc/contentdescription.xml and other config files (DMA config, logging control).
   field = configType|,,Perhaps we should create an enum for this later, but valid configTypes are:  contentDescription dmaConfig logControlConfig nextSyncConfig

********** operation = timsInventoryGet (NO)
 field = bodyId|1|idBody:body,0,1,,,,,,,0
 field = channelMapId|2|int,0,1,low,,,,,,0
 field = clientLog|8|struct:clientLog,0,,,,,,,,0
 field = controllerId|3|int,0,1,low,,,,,,0
 field = group|9|string,0,,low,,,,,,0
 field = macAddress|10|string,0,1,low,,,,,,0
 field = modLogId|4|string,0,1,low,,,,,,0
 field = model|5|enum:modelType,0,1,low,,,,,,0
 field = syncInfo|11|struct:timsSyncInfo,0,1,low,,,,,,0
 field = timeZone|6|int,0,1,low,,,,,,0
 field = timsElement|7|struct:timsElement,0,,,,,,,,0
 number = 620
 returnType = timsInventory
   description = TIMS operation invoked by STB to get TIMS Elements
   field = bodyId|,,STBs will usually include a bodyId.  But this is optional so that test and diagnostic utilities may invoke this operation without requiring a bodyId.
   field = channelMapId|,,STB channel map ID. An STB should always know this.
   field = clientLog|,,Optional section providing an alternate way for a client to backhaul client logs.
   field = controllerId|,,STB controller ID. An STB should always know this.
   field = group|,,Each occurrence represents a group to which the body thinks it belongs.  Each group could possibly be a "preview" group, or "DMA" group (designated market area), or others defined in the future.  The STB is agnostic to the type of group, and only cares that it belongs to a group by this name at all.
   field = macAddress|,,The MAC address of the STB calling this operation. The MAC address is used to determine which groups, if any, are associated with this STB.  A TIMS element is provisioned to an STB only if both the TIMS element and STB are mapped to the same group.
   field = modLogId|,,STB moderated log ID.
   field = syncInfo|,,Metadata about this particular "TIMS sync" attempt.
   field = timeZone|,,STB timeZone

********** operation = tomcatDebug (NO)
 field = data|1|anyDict,1,1,low,,,,,,0
 number = 1969
 returnType = tomcatDebug
   description = A call into TomcatMind that is outside the schema.  An arbitrary dictionary is passed in, and it is interpreted in a way that is private to TomcatMind.  The intention is that this operation be used only from within the same ISM as the TomcatMind itself, so that the specifics of the dictionaries passed in is not part of a public API.
   field = data|,,A dictionary describing the debug operation to invoke.  The type field specifies the operation, and other fields are operation specific.

********** operation = topCollectionSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = collectionId|3|idLong:collection,0,1,,,,,,,0
 field = count|4|int,0,1,,1,,,1,,0
 field = deltaRankDays|5|int,0,1,,,,,,,0
 field = format|6|enum:format,0,1,,,,,,,0
 field = groupBy|7|string,0,,,,,,,32,0
 field = levelOfDetail|8|enum:levelOfDetail,0,1,,,,,,,0
 field = note|9|string,0,,,,,,,,0
 field = offset|10|int,0,1,,0,,,,,0
 field = orderBy|11|string,0,,,,,,,32,0
 field = rankDate|12|dateTime,0,1,,,,,,,0
 field = removeField|13|string,0,,,,,2,,,0
 field = responseTemplate|15|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|14|boolean,0,1,,true,,,,,0
 fieldGroup = rankingSearchFields
 fieldGroup = searchFields
 isFrozen = true
 number = 623
 returnType = idSet
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = collectionId|,,Limits the search to an object with exactly the same value in this field.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = deltaRankDays|,,Find the rank of the item this many days from rankDate.  If no rankDate, use latest date as base.
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = collectionId|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe
   fieldProject = count|0|0|0|all
   fieldProject = deltaRankDays|0|0|0|partner-schedule
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = rankDate|0|0|0|partner-schedule
   fieldProject = responseTemplate|0|0|0|all
   project = topCollectionSearch|0|0|0|partner-schedule

********** operation = topCreditSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = count|3|int,0,1,,1,,,1,,0
 field = deltaRankDays|4|int,0,1,,,,,,,0
 field = format|5|enum:format,0,1,,,,,,,0
 field = groupBy|6|string,0,,,,,,,32,0
 field = levelOfDetail|7|enum:levelOfDetail,0,1,,,,,,,0
 field = note|8|string,0,,,,,,,,0
 field = offset|9|int,0,1,,0,,,,,0
 field = orderBy|10|string,0,,,,,,,32,0
 field = rankDate|11|dateTime,0,1,,,,,,,0
 field = removeField|12|string,0,,,,,2,,,0
 field = responseTemplate|15|struct:responseTemplate,0,,,,,,,,0
 field = role|13|string,1,1,,,,,,,0
 field = useAnchorOperation|14|boolean,0,1,,true,,,,,0
 fieldGroup = rankingSearchFields
 fieldGroup = searchFields
 isFrozen = true
 number = 626
 returnType = topCreditList
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = deltaRankDays|,,Find the rank of the item this many days from rankDate.  If no rankDate, use latest date as base.
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = role|,,Restricts the search to the credits with this role
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = deltaRankDays|0|0|0|partner-schedule
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = rankDate|0|0|0|partner-schedule
   fieldProject = responseTemplate|0|0|0|all

********** operation = transcode (NO)
 field = encryptContent|1|boolean,1,1,,,,,,,0
 field = encryptDistribution|2|boolean,1,1,,,,,,,0
 field = sourceUrl|3|url,1,1,,,,,,,0
 number = 813
 returnType = transcodeResponse
   description = A request to transcode one video/audio stream.  The source format can be anything that ffmpeg understands.  The result will be an MPEG-2 stream that a TCD can play.  The resulting stream can optionally be encrypted by providing an encryption specification in the "encryptTransport" and "encryptContent" fields.  If you select encryptContent, you must also select encryptTransport.
   field = encryptContent|,,When true, the stream file stored in the TCD's disk is encrypted.  (This encryption step is done before the transport encryption.  When both flags are true, the stream is doubly encrypted.)  Only TCDs authorized through TiVoCast will be given the decryption keys for playback.
   field = encryptDistribution|,,When true, the file that is distributed is encrypted.  Only TCDs authorized through TiVoCast will be given the decryption keys.  The TCD that downloads it will remove this encryption before storing the file on disk.
   field = sourceUrl|,,The URL where the original content can be fetched.

********** operation = transcodeWebContent (NO)
 field = sourceUrl|1|url,1,1,,,,,,,0
 number = 836
 returnType = transcodeResponse
   description = A request to transcode a given URL.  If the URL is not yet transcoded (which will be the case if this is the first request for it), the result will be a "working" dictionary.  If the transcoding is complete, the transcodeResponse dictionary will be returned.  The transcoded stream will NOT be encrypted.  This operation is intended for transcoding publicly avaible URLs, so there is no need to encrypt the results.
   field = sourceUrl|,,The URL where the original content can be fetched.

********** operation = transportStreamIdMappingsCacheUpdate (NO)
 field = cacheOperation|1|enum:cacheOperationType,1,1,,,,,,,0
 field = tuningParameters|2|struct:tuningParameters,0,,,,,,,,0
 isFrozen = true
 number = 1964
 returnType = success
   description = Request to the mind server on a body (aka local mind) to remove or  invalidate the items which are maintained in the TSID scan cache. TSID  scan cache is maintained with the list of frequencies / sourceIds and their corresponding TSID values. The frequencies or sourceIds which are passed in the tuningParameters will be invalidated or removed from the cache.  The entry in the cache will be made when the scanning happens for the  frequency or sourceId from transportStreamIdMappingsGetOperation. 
   field = cacheOperation|,,Operation to be performed on the cached data. We can remove or invalidate items.
   field = tuningParameters|,,If the tuning parameters are not given, the operation will be performed on the whole cache.

********** operation = transportStreamIdMappingsGet (YES)
 field = cached|8|boolean,0,1,,false,,,,,0
 field = forceRescan|1|boolean,0,1,,false,,,,,0
 field = frequency|2
 field = modulationMode|6
 field = performVerificationScan|9|boolean,0,1,,false,,,,,0
 field = rescanIntervalSeconds|3|int,0,1,,,,,,,0
 field = sourceId|5
 field = sourceType|4|enum:channelSourceType,1,1,,,,,,,0
 field = tuningParameters|7|struct:tuningParameters,0,,,,,,,,0
 isFrozen = true
 number = 1359
 returnType = transportStreamIdMappings
   description = Request to the mind server on a body (aka local mind) to start a scan on the provided list of frequencies and find the TSID (Transport  Stream Id) in the PAT table for each of these frequencies. The initial  requirement for this came up as part of Node Group Identification feature in Cardio project. The current requirement of the Cardio project is to  scan only cable frequencies. rescanIntervalSeconds and forceRescan fields are added mainly for performance reasons(i.e, quickly get cached results from previous such scans).
   field = cached|,,Normally the body checks for the requested tuning fields in the cache and returns the values from the TSID scan cache if the forceRescan is set to FALSE. If this flag set to true, then the whole contents of the cache will be returned. Body ignores the tuningParameters and  rescanIntervalSeconds when this flag is set true. This flag should be  used only when the cached contents needs to be retrieved.
   field = forceRescan|,,Normally the body is allowed to send the cached scan results from the previous scan request but when this flag is set to true it must rescan and send the latest scan results. Please keep in mind that rescan most likely will take more time to return results. So, set it to true  only when you really have to.
   field = performVerificationScan|,,When set, this flag instructs the body to perform the verification scan. Note that the verification scan happens only when the verification scan parameters are set by transportStreamIdMappingsScanConfigurationStore  operation. If this flag has been set by the user, then the forceRescan  flag, tuningParameters will be ignored.
   field = rescanIntervalSeconds|,,The body should perform this scan every rescanIntervalSeconds seconds in the background. If this value is not given, all the entries in the  cache will be set with a default expiration time of 30 mins and refresh scan will not be started until the  transportStreamIdMappingsScanConfigurationStore operation is given.
   field = sourceType|,,Specify the signal source type on which to perform the scan.

********** operation = transportStreamIdMappingsScanConfigurationGet (NO)
 isFrozen = true
 number = 1959
 returnType = transportStreamIdMappingsScanConfiguration
   description = Request to the mind server on a body (aka local mind) to get the current configuration of the background scan. 

********** operation = transportStreamIdMappingsScanConfigurationStore (NO)
 field = rescanInterval|1|int,0,1,,,,,,,0
 field = tuningParameters|2|struct:tuningParameters,0,,,,,,,,0
 field = vodServiceGroup|3|string,0,1,,,,,,,0
 isFrozen = true
 number = 1963
 returnType = transportStreamIdMappingsScanConfiguration
   description = Request to the mind server on a body (aka local mind) to set the  parameters for the background scan. If this operation is not requested, then body will run the background scan for the frequencies / sourceIds  which were present in the last scan request. 
   field = rescanInterval|,,Rescan interval in seconds in which the background scan has to happen.
   field = tuningParameters|,,Tuning parameters for which the scanning to be performed.
   field = vodServiceGroup|,,VOD service group (node group) name in which the TCD belongs to.

********** operation = transportStreamIdMappingsScanControl (NO)
 field = enableScanning|1|boolean,1,1,,,,,,,0
 isFrozen = true
 number = 1961
 returnType = success
   description = Request to the mind server on a body (aka local mind) to pause or resume  the TSID background scan. 
   field = enableScanning|,,The TSID scan background on the TCD will be enabled if the value is  true and will be disabled if the value is set to false.

********** operation = triggerTally (NO)
 field = name|2
 field = triggerName|1|string,0,1,,,,,,,0
 number = 1768
 returnType = tallyResponseList
   description = Show tally of how many times a trigger fired since startup
   field = triggerName|,,Name of the trigger

********** operation = tunerConflictEventRegister (YES)
 number = 634
 returnType = tunerConflictEvent
   description = Registers for tunerConflictEvent events. After sending this action, a tunerConflictEvent event will be received whenever a tuner conflict has occurred which requires user intervention to resolve, and additionally, a tuner conflict resolved event will be received whenever a tuner conflict has been resolved.

********** operation = tunerRemove (NO)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 field = tunerId|2|idInt:tuner,1,1,,,,,,,0
 isFrozen = true
 number = 638
 returnType = success
   description = Removes a tuner object from the mind.

********** operation = tunerSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = bodyId|3|idBody:body,1,1,,,,,,,0
 field = count|4|int,0,1,,1,,,1,,0
 field = format|5|enum:format,0,1,,,,,,,0
 field = groupBy|6|string,0,,,,,,,32,0
 field = levelOfDetail|7|enum:levelOfDetail,0,1,,,,,,,0
 field = note|8|string,0,,,,,,,,0
 field = offset|9|int,0,1,,0,,,,,0
 field = orderBy|10|string,0,,,,,,,32,0
 field = removeField|11|string,0,,,,,2,,,0
 field = responseTemplate|14|struct:responseTemplate,0,,,,,,,,0
 field = tunerId|12|idInt:tuner,0,1,,,,,,,0
 field = useAnchorOperation|13|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 isFrozen = true
 number = 639
 returnType = tunerList
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = bodyId|,,Limits the search to an object with exactly the same value in this field.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = tunerId|,,Limits the search to an object with exactly the same value in this field.
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = tunerStateEventRegister (YES)
 field = responseTemplate|1|struct:responseTemplate,0,,,,,,,,0
 number = 1877
 returnType = tunerStateEvent
   description = Registers for events describing the state of all the available tuners.  When the call is first made, a tunerStateEvent will be sent back immediately, followed by future tunerStateEvents when any of the tuner's states change.
   field = responseTemplate|,,Used to specify the specific fields returned with each tunerStateEvent.

********** operation = tunerStore (NO)
 field = bodyId|1|idBody:body,1,1,low,,,,,,0
 field = channelListId|2|idInt:bodyChannelList,0,1,high,,3,,,,0
 field = channelListIdInBody|3|localId,1,1,low,,,2,,,0
 field = tunerId|4|idInt:tuner,0,1,low,,,,,,0
 field = tunerIdInBody|5|localId,0,1,high,,,2,,,0
 isFrozen = true
 number = 640
 returnType = tuner
   description = Stores a new or a modified tunerobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = bodyId|,,The body that owns the tuner.
   field = channelListId|3,,Which channel list in the body does this belong to?
   field = channelListIdInBody|,2,The name of the channel list in this body that describes what this tuner can get.
   field = tunerId|,,The globally unique ID for this tuner.
   field = tunerIdInBody|,2,The local ID for this tuner, unique only within the body.

********** operation = tunerSwap (NO)
 number = 641
 returnType = tunerSwapResponse
   description = Swaps the foreground and background tuners.

********** operation = uiDestinationInstanceRemove (NO)
 field = uiDestinationInstanceId|1|idLong:uiDestinationInstance,1,1,,,,,,,0
 isFrozen = true
 number = 1390
 returnType = success
   description = Removes a uiDestinationInstance object from the mind.

********** operation = uiDestinationInstanceSearch (YES)
 field = bodyId|20|idBody:body,0,1,,,,,,,0
 field = count|7|int,0,1,,1,,,1,,0
 field = format|8|enum:format,0,1,,,,,,,0
 field = groupBy|9|string,0,,,,,,,32,0
 field = instanceName|1|string,0,1,,,,,,,0
 field = levelOfDetail|10|enum:levelOfDetail,0,1,,,,,,,0
 field = maxCreateDate|16|dateTime,0,1,,,,,,,0
 field = maxUpdateDate|17|dateTime,0,1,,,,,,,0
 field = minCreateDate|18|dateTime,0,1,,,,,,,0
 field = minUpdateDate|19|dateTime,0,1,,,,,,,0
 field = noLimit|2|boolean,0,1,,,,,,,0
 field = note|11|string,0,,,,,,,,0
 field = offset|12|int,0,1,,0,,,,,0
 field = orderBy|13|string,0,,,,,,,32,0
 field = responseTemplate|15|struct:responseTemplate,0,,,,,,,,0
 field = uiDestinationId|3|idLong:uiDestination,0,,,,,,,,0
 field = uiDestinationInstanceId|4|idLong:uiDestinationInstance,0,,,,,,,,0
 field = uiDestinationType|14|enum:uiDestinationType,0,1,,,,,,,0
 field = uri|5|uri,0,1,,,,,,,0
 field = uriPrefix|6|string,0,1,,,,,,,0
 fieldGroup = searchFieldsNoAnchoring
 number = 1391
 returnType = uiDestinationInstanceList
   field = bodyId|,,Limits the search to an object with exactly the same value in this field.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = instanceName|,,Limits the search to an object with exactly the same value in this field.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = uiDestinationId|,,Limits the search to an object with exactly the same value in this field.
   field = uiDestinationInstanceId|,,Limits the search to an object with exactly the same value in this field.
   field = uiDestinationType|,,Limits the search to an object with exactly the same value in this field.
   field = uri|,,Limits the search to an object with exactly the same value in this field.
   field = uriPrefix|,,uri prefix filter
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = uiDestinationInstanceStore (NO)
 field = instanceDescription|1|string,1,1,,,,,,,0
 field = instanceName|2|string,1,1,,,,,,,0
 field = instanceParameter|3|struct:fieldDefinition,0,,low,,,,,,0
 field = serviceGroup|7|string,0,,,,,,1,128,0
 field = uiDestinationId|4|idLong:uiDestination,0,1,,,,,,,0
 field = uiDestinationInstanceId|5|idLong:uiDestinationInstance,0,1,low,,,,,,0
 field = uri|6|uri,1,1,,,,,,,0
 number = 1392
 returnType = success
   description =  ui destination instance store
   field = instanceDescription|,,Limits the search to an object with exactly the same value in this field.
   field = instanceName|,,Limits the search to an object with exactly the same value in this field.
   field = instanceParameter|,,parameters specific to ui-destination instance
   field = serviceGroup|,,Limits the search to an object with exactly the same value in this field.
   field = uiDestinationId|,,unique id for instance's ui-destination
   field = uiDestinationInstanceId|,,unique id for this ui-destination instance
   field = uri|,,Limits the search to an object with exactly the same value in this field.

********** operation = uiDestinationRemove (NO)
 field = uiDestinationId|1|idLong:uiDestination,1,1,,,,,,,0
 isFrozen = true
 number = 1394
 returnType = success
   description = Removes a uiDestination object from the mind.

********** operation = uiDestinationSearch (NO)
 field = count|5|int,0,1,,1,,,1,,0
 field = format|6|enum:format,0,1,,,,,,,0
 field = groupBy|7|string,0,,,,,,,32,0
 field = levelOfDetail|8|enum:levelOfDetail,0,1,,,,,,,0
 field = maxCreateDate|13|dateTime,0,1,,,,,,,0
 field = maxUpdateDate|14|dateTime,0,1,,,,,,,0
 field = minCreateDate|15|dateTime,0,1,,,,,,,0
 field = minUpdateDate|16|dateTime,0,1,,,,,,,0
 field = name|1|string,0,1,,,,,,,0
 field = noLimit|2|boolean,0,1,,,,,,,0
 field = note|9|string,0,,,,,,,,0
 field = offset|10|int,0,1,,0,,,,,0
 field = orderBy|11|string,0,,,,,,,32,0
 field = responseTemplate|12|struct:responseTemplate,0,,,,,,,,0
 field = uiDestinationId|3|idLong:uiDestination,0,1,,,,,,,0
 field = uiDestinationType|4|enum:uiDestinationType,0,1,,,,,,,0
 fieldGroup = searchFieldsNoAnchoring
 number = 1395
 returnType = uiDestinationList
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = name|,,Limits the search to an object with exactly the same value in this field.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = uiDestinationId|,,Limits the search to an object with exactly the same value in this field.
   field = uiDestinationType|,,Limits the search to an object with exactly the same value in this field.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = uiDestinationStore (NO)
 field = description|1|string,1,1,low,,,,,,0
 field = hasUiDestinationInstance|6|boolean,0,1,low,,,7,,,1
 field = name|2|string,1,1,low,,,,,,0
 field = parameter|3|struct:fieldDefinition,0,,medium,,,,,,0
 field = uiDestinationId|4|idLong:uiDestination,0,1,low,,,,,,0
 field = uiDestinationType|5|enum:uiDestinationType,1,1,low,,,,,,0
 isFrozen = true
 number = 1396
 returnType = uiDestination
   description = Stores a new or a modified uiDestinationobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = description|,,desc for this ui-destination
   field = hasUiDestinationInstance|,7,Set to true if at least one uiDestinationInstance exists
   field = name|,,name of this ui-destination
   field = parameter|,,parameter specific to ui-destination
   field = uiDestinationId|,,unique id for this ui-destination
   field = uiDestinationType|,,type of uiDestination

********** operation = uiElementCacheStateEventRegister (NO)
 firstVersion = 8
 number = 2079
 returnType = uiElementCacheStateEvent
   description = Registers for uiElementCacheStateEvent events, which report when uiElement cache state changes.

********** operation = uiElementRemove (NO)
 field = uiElementId|1|idLong:uiElement,1,1,,,,,,,0
 isFrozen = true
 number = 1809
 returnType = success
   description = Removes a uiElement object from the mind.

********** operation = uiElementSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = bodyId|3|idBody:body,0,1,,,,,,,0
 field = buttonType|16|enum:buttonType,0,1,,,,,,,0
 field = count|4|int,0,1,,1,,,1,,0
 field = displayArea|5|enum:uiDisplayArea,0,1,,,,,,,0
 field = filter|17|struct:promotionalItemFilter,0,,,,,,,,0
 field = format|6|enum:format,0,1,,,,,,,0
 field = groupBy|7|string,0,,,,,,,32,0
 field = levelOfDetail|8|enum:levelOfDetail,0,1,,,,,,,0
 field = maxStartTime|19|dateTime,0,1,,,,,,,0
 field = minEndTime|20|dateTime,0,1,,,,,,,0
 field = noLimit|18|boolean,0,1,,,,,,,0
 field = note|9|string,0,,,,,,,,0
 field = offset|10|int,0,1,,0,,,,,0
 field = orderBy|11|string,0,,,,,,,32,0
 field = removeField|12|string,0,,,,,2,,,0
 field = responseTemplate|13|struct:responseTemplate,0,,,,,,,,0
 field = uiElementId|14|idLong:uiElement,0,1,,,,,,,0
 field = useAnchorOperation|15|boolean,0,1,,true,,,,,0
 fieldGroup = searchFields
 number = 1810
 orderBy = displayRank
 orderBy = uiElementId
 returnType = uiElementList
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = buttonType|,,Limits the search to an object with exactly the same value in this field.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = displayArea|,,Limits the search to an object with exactly the same value in this field.
   field = filter|,,Only return uiElements matching these filters.  If multiple filters are passed in, they will be ORed
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = maxStartTime|,,Return uiElement objects with startTime on or before maxStartTime
   field = minEndTime|,,Return uiElement objects with endTime on or after minEndTime
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = uiElementId|,,Limits the search to an object with exactly the same value in this field.
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = uiElementStore (NO)
 field = action|1|union:uiAction,1,1,low,,,,,,0
 field = buttonType|8|enum:buttonType,0,1,low,,,,,,0
 field = displayArea|2|enum:uiDisplayArea,1,1,low,,,,,,0
 field = displayName|3|string,0,1,low,,,,,,0
 field = displayRank|4|int,1,1,low,,,,,,0
 field = endTime|11|dateTime,0,1,low,,8,,,,0
 field = filter|9|struct:promotionalItemFilter,0,,low,,,,,,0
 field = image|5|struct:image,0,,low,,,,,,0
 field = screenPosition|10|struct:screenPosition,0,,low,,,,,,0
 field = serviceGroup|6|string,0,,low,,,,1,128,0
 field = startTime|12|dateTime,0,1,low,,8,,,,0
 field = uiElementId|7|idLong:uiElement,0,1,low,,,,,,0
 fieldGroup = uiElementFields
 isFrozen = true
 number = 1811
 returnType = uiElement
   description = Stores a new or a modified uiElementobject in the mind. The returned object is what was stored, with all of the default values filled in, if any.
   field = action|,,The action to take when the user selects the uiElement.
   field = buttonType|,,This field identifes what type of button is associated with this uiElement, if any.
   field = displayArea|,,The display area that the UI Element is authored for
   field = endTime|8,,Date and time the uiElement expires.
   field = filter|,,Filters are used to constrain uiElements to only callers that satisfy all filtering rules.
   field = image|,,Any number of images can be associated with a uiElement.  The images themselves describe the type and size of image.  The client UI will be responsible for picking the appropriate image to display based on the image type and size.
   field = screenPosition|,,Defines the screen position for this element.  There can be different positions for different screen resolutions.
   field = serviceGroup|,,uiElements with service groups will only appear in the UI for TCDs that are mapped to at least one of the published service groups.
   field = startTime|8,,Date and time the uiElement becomes effective.

********** operation = uiNavigate (YES)
 field = parameters|1|anyDict,0,1,,,,,,,0
 field = uiDestinationId|2
 field = uri|3|uri,1,1,,,,,,,0
 number = 1448
 returnType = success
   description = Causes the UI to navigate to the specified destination.

********** operation = uiTransitionRemove (NO)
 field = uiTransitionId|1|idLong:uiTransition,1,1,,,,,,,0
 isFrozen = true
 number = 1399
 returnType = success
   description = Removes a uiTransition object from the mind.

********** operation = uiTransitionSearch (NO)
 field = authoredId|2|string,0,1,,,,,,100,0
 field = count|3|int,0,1,,1,,,1,,0
 field = format|4|enum:format,0,1,,,,,,,0
 field = groupBy|5|string,0,,,,,,,32,0
 field = levelOfDetail|6|enum:levelOfDetail,0,1,,,,,,,0
 field = maxCreateDate|16|dateTime,0,1,,,,,,,0
 field = maxUpdateDate|17|dateTime,0,1,,,,,,,0
 field = minCreateDate|18|dateTime,0,1,,,,,,,0
 field = minUpdateDate|19|dateTime,0,1,,,,,,,0
 field = note|7|string,0,,,,,,,,0
 field = offset|8|int,0,1,,0,,,,,0
 field = orderBy|9|string,0,,,,,,,32,0
 field = responseTemplate|15|struct:responseTemplate,0,,,,,,,,0
 field = uiDestinationId|10|idLong:uiDestination,0,1,,,,,,,0
 field = uiDestinationInstanceId|11|idLong:uiDestinationInstance,0,1,,,,,,,0
 field = uiDestinationType|12|enum:uiDestinationType,0,1,,,,,,,0
 field = uiTransitionId|1|idLong:uiTransition,0,1,,,,,,,0
 field = uri|13|uri,0,1,,,,,,,0
 field = uriPrefix|14|string,0,1,,,,,,,0
 fieldGroup = searchFieldsNoAnchoring
 number = 1400
 returnType = uiTransitionList
   field = authoredId|,,Limits the search to an object with exactly the same value in this field.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = uiDestinationId|,,Limits the search to an object with exactly the same value in this field.
   field = uiDestinationInstanceId|,,Limits the search to an object with exactly the same value in this field.
   field = uiDestinationType|,,Limits the search to an object with exactly the same value in this field.
   field = uiTransitionId|,,Limits the search to an object with exactly the same value in this field.
   field = uri|,,Limits the search to an object with exactly the same value in this field.
   field = uriPrefix|,,Limits the search to an object with exactly the same value in this field.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = uiTransitionStore (NO)
 field = authoredId|7|string,0,1,low,,,,,100,0
 field = parameters|1|anyDict,0,1,low,,,,,,0
 field = uiDestiationInstanceForUiDestinationInstanceId|2
 field = uiDestinationForUiDestinationId|3|struct:uiDestination,0,1,low,,,7,,,1
 field = uiDestinationId|4|idLong:uiDestination,1,1,low,,,,,,0
 field = uiDestinationInstanceForUiDestinationInstanceId|8|struct:uiDestinationInstance,0,1,low,,,7,,,1
 field = uiDestinationInstanceId|5|idLong:uiDestinationInstance,0,1,low,,,,,,0
 field = uiTransitionId|6|idLong:uiTransition,0,1,low,,,,,,0
 isFrozen = true
 number = 1401
 returnType = uiTransition
   description = Stores a new or a modified uiTransitionobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = authoredId|,,an optional, unique external id for the uiTransition
   field = parameters|,,a dict of parameter key/values
   field = uiDestinationForUiDestinationId|,7,a container for uiDestinationForUiDestinationId annotation
   field = uiDestinationId|,,id of the ui-destination to which this ui-transition points to
   field = uiDestinationInstanceForUiDestinationInstanceId|,7,a container for uiDestinationInstanceForUiDestinationInstanceId
   field = uiDestinationInstanceId|,,id of the ui-destination instance to which this ui-transition points to
   field = uiTransitionId|,,unique id for this ui-transition instance

********** operation = unifiedItemSearch (YES)
 field = bodyId|1|idBody:body,0,1,,,,,,,0
 field = categoryId|2|idLong:category,0,,,,,,,,0
 field = count|3|int,0,1,,1,,,1,,0
 field = excludePartnerId|4|idInt:partner,0,,,,,,,,0
 field = fallbackImageObjectType|34|enum:fallbackImageObjectType,0,1,,,,,,,0
 field = format|5|enum:format,0,1,,,,,,,0
 field = groupBy|6|string,0,,,,,,,32,0
 field = hdtv|7|boolean,0,1,,,,,,,0
 field = imageRuleset|32|struct:imageRuleset,0,,,,,,,,0
 field = includeBroadband|8|boolean,0,1,,true,,,,,0
 field = includeBroadcast|9|boolean,0,1,,true,,,,,0
 field = includeEmptyTags|10|boolean,0,1,,true,,,,,0
 field = includeFree|11|boolean,0,1,,true,,,,,0
 field = includePaid|12|boolean,0,1,,true,,,,,0
 field = includePersonSearch|13|boolean,0,1,,false,,,,,0
 field = includeRelevantItemType|29|enum:unifiedItemType,0,,,,,,,,0
 field = includeRelevantItems|26
 field = includeUnifiedItemType|25|enum:unifiedItemType,0,,,,,,,,0
 field = includeVod|31|boolean,0,1,,true,,,,,0
 field = keyword|14|string,0,1,,,,,,,0
 field = levelOfDetail|15|enum:levelOfDetail,0,1,,,,,,,0
 field = lineup|16|struct:lineup,0,,,,,,,,0
 field = maxStartTime|17|dateTime,0,1,,,,,,,0
 field = mergeOverridingCollections|30|boolean,0,1,,false,,,,,0
 field = mergeOverridingContent|35|boolean,0,1,,false,,,,,0
 field = minEndTime|18|dateTime,0,1,,,,,,,0
 field = noLineupFilterForType|28|enum:unifiedItemType,0,,,,,,,,0
 field = note|19|string,0,,,,,,,,0
 field = numRelevantItems|27|int,0,1,,0,,,,,0
 field = offset|20|int,0,1,,0,,,,,0
 field = orderBy|21|string,0,,,,,,,32,0
 field = partnerId|22|idInt:partner,0,1,,,,,,,0
 field = responseTemplate|33|struct:responseTemplate,0,,,,,,,,0
 field = searchable|23|boolean,0,1,high,,,,,,0
 field = useLineup|24|boolean,0,1,,,,,,,0
 fieldGroup = unifiedItemSearchFields
 isFrozen = true
 number = 645
 orderBy = relevance
 orderBy = strippedTitle
 returnType = unifiedItemList
   field = bodyId|,,Restricts the search to collections showing in the next 14 days that are available on this body.  For bodies that sync with the mind, availability is based on the list of channels that the body has sent up.  Only channels that have isReceived=true are used.  For bodies that have not synced with the mind, availability is based on the lineup retrieved from the BSM, and all channels are used.
   field = categoryId|,,Take a categoryId and will be passed to CollectionSearch.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = fallbackImageObjectType|,,If set, this object type will be used to replace the main object's image if the main object's image is not available based on the input ruleset
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = imageRuleset|,,one ruleset should be specified per image desired. multiple rulesets can be specified.
   field = includeBroadband|,,Include broadband collections
   field = includeBroadcast|,,Include broadcast collections
   field = includeEmptyTags|,,Include empty tags. Defaults to true for old behavior.
   field = includeFree|,,Include free collections. These would be the pgd collections and cds offers that has a price of 0.
   field = includePaid|,,Include paid collections. These would be cds offers with price greater than 0.
   field = includePersonSearch|,,Allow unifiedItemSearch to call PersonTableSearch and  return the results merged with other results.
   field = includeRelevantItemType|,,If present, the unifiedItemSearch will return only the types of object specified in the relevantItemSearch portion of the search. If not present, unifiedItemSearch will return the default set of objects as defined in the given Mind version.
   field = includeUnifiedItemType|,,If present, the unifiedItemSearch will return only the types of object specified.  If not present, unifiedItemSearch will return the default set of objects as defined in the given Mind version.
   field = includeVod|,,Include vod collections
   field = keyword|,,Search tags based on prefix, collections based on title substring, with a logical ordering.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = lineup|,,Restricts the search to collections showing in the next 14 days on a channel in the named lineup.
   field = maxStartTime|,,Return tags and collections, where collections are filtered to only those that show before maxStartTime in the next 14 days of PGD data.
   field = mergeOverridingCollections|,,Limits the search to an object with exactly the same value in this field.
   field = mergeOverridingContent|,,Limits the search to an object with exactly the same value in this field.
   field = minEndTime|,,Return tags and collections, where collections are filtered to only those that show after minEndTime in the next 14 days of PGD data.
   field = noLineupFilterForType|,,For any type specified with this field, unifiedItemSearch will NOT filter that type's results by the body's lineup. This has the side-effect of also not respecting any filtering, other than keyword, for that type.
   field = note|,,A request for the results to be annotated.
   field = numRelevantItems|,,Allow unifiedItemSearch to call RelevantItemSearch, and populate up to this many items at the top of the result list with those instead.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = searchable|,,If true, return only collections with searchable=true. If false, return only collections with searchable=false.
   field = useLineup|,,forces query to use headend and lineup instead of custom channel list.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all
   fieldProject = searchable|0|0|0|partner-schedule,hme-cds,partner-cds,partner-subscribe

********** operation = unsubscribe (YES)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 field = subscriptionId|2|idInt:subscription,1,1,,,,,,,0
 isFrozen = true
 number = 648
 returnType = success
   description = Removes a subscription.  Also removes: candidates for that subscription. If mind schedules recordings for this body, it will cancel the recordings that are not wanted by subscriptions.
   fieldProject = bodyId|0|0|0|hme-cds,partner-subscribe
   fieldProject = subscriptionId|0|0|0|hme-cds,partner-subscribe
   project = unsubscribe|0|0|0|hme-cds,partner-subscribe

********** operation = unsubscribeAll (NO)
 field = idSetSource|1|union:idSetSource,1,1,,,3,,,,0
 isFrozen = true
 number = 872
 returnType = success
   description = unsubscribe all subscriptions matching an idSetSource. For performance reasons, this will not invoke the Scheduler. Must be run once per Mind cluster.
   field = idSetSource|3,,Limits the search to an object with exactly the same value in this field.
   fieldProject = idSetSource|0|3|0|hme-cds,subscribe

********** operation = uploadLogs (NO)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 field = path|2|string,0,1,,,,,,,0
 field = url|3|url,0,1,,,,,,,0
 number = 1419
 returnType = success
   description = Request that logs be immediately uploaded from the client to the service
   field = bodyId|,,The id of the body for which logs should be uploaded.
   field = path|,,The path to the file to be uploaded: DEBUG ONLY
   field = url|,,The URL to which to upload the logs: DEBUG ONLY

********** operation = userContentRemove (NO)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 field = userContentId|2|idInt:userContent,1,1,,,,,,,0
 isFrozen = true
 number = 654
 returnType = success
   description = Removes a userContent object from the mind.

********** operation = userContentSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = bodyId|3|idBody:body,1,1,,,,,,,0
 field = collectionId|4|idLong:collection,0,1,,,,,,,0
 field = count|5|int,0,1,,1,,,1,,0
 field = format|6|enum:format,0,1,,,,,,,0
 field = groupBy|7|string,0,,,,,,,32,0
 field = levelOfDetail|8|enum:levelOfDetail,0,1,,,,,,,0
 field = note|9|string,0,,,,,,,,0
 field = offset|10|int,0,1,,0,,,,,0
 field = orderBy|11|string,0,,,,,,,32,0
 field = removeField|12|string,0,,,,,2,,,0
 field = responseTemplate|15|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|13|boolean,0,1,,true,,,,,0
 field = userContentId|14|idInt:userContent,0,1,,,,,,,0
 fieldGroup = userContentSearchFields
 fieldGroup = searchFields
 isFrozen = true
 number = 655
 returnType = userContentList
   description = Note: Anchoring fields are not applied to this search...
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = bodyId|,,Limits the search to an object with exactly the same value in this field.
   field = collectionId|,,Limits the search to an object with exactly the same value in this field.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   field = userContentId|,,Limits the search to an object with exactly the same value in this field.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = userContentStore (NO)
 field = bodyId|1|idBody:body,1,1,low,,,,,,0
 field = collectionId|2|idLong:collection,0,1,low,,,,,,0
 field = contentId|3|idLong:content,0,1,low,,,2,,,0
 field = doneDate|4|dateTime,0,1,low,,,2,,,0
 field = thumbsRating|5|int,0,1,low,,,,-3,3,0
 field = thumbsType|6|enum:thumbsType,0,1,low,,,,,,0
 field = userContentId|7|idInt:userContent,0,1,low,,,,,,0
 isFrozen = true
 number = 656
 returnType = userContent
   description = Stores a new or a modified userContentobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = collectionId|,,Either a contentId or a collectionId must be present, but not both.
   field = contentId|,2,Either a contentId or a collectionId must be present, but not both.  Removed this field in mind3.  For now, we're just using userContent for thumbs.     
   field = doneDate|,2,If set, the user is finished with the content, and doesn't want it any more.  XXX Should this be a done until date, at which time we might want to re-acquire the content?  Removed this field in mind3.  For now, we're just using userContent for thumbs. 
   field = thumbsRating|,,A number from -3 to 3, indicating how much the user likes the content.  -3 is three thumbs down, 3 is three thumbs up, 0 is neutral, which not having a value is different and means we don't know.
   field = thumbsType|,,The type of this thumb value.
   field = userContentId|,,The unique ID for this user content item.

********** operation = userEndpointRemove (NO)
 field = userEndpointId|1|idInt:userEndpoint,1,1,,,,,,,0
 number = 1862
 returnType = success
   description = Removes a userEndpoint object from the mind.

********** operation = userEndpointSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = count|3|int,0,1,,1,,,1,,0
 field = format|4|enum:format,0,1,,,,,,,0
 field = groupBy|5|string,0,,,,,,,32,0
 field = levelOfDetail|6|enum:levelOfDetail,0,1,,,,,,,0
 field = neoUserId|7|idInt:neoUser,0,1,,,,,,,0
 field = note|8|string,0,,,,,,,,0
 field = offset|9|int,0,1,,0,,,,,0
 field = orderBy|10|string,0,,,,,,,32,0
 field = removeField|11|string,0,,,,,2,,,0
 field = responseTemplate|12|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|13|boolean,0,1,,true,,,,,0
 field = userEndpointId|14|idInt:userEndpoint,0,1,,,,,,,0
 fieldGroup = searchFields
 number = 1863
 orderBy = neoUserId
 orderBy = userEndpointId
 returnType = userEndpointList
   description = Search for registered devices by NeoUserId or UserEndpointId.  TBD: NeoUserId will be deprecated for AccountId.
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = neoUserId|,,Limits the search to an object with exactly the same value in this field.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   field = userEndpointId|,,Limits the search to an object with exactly the same value in this field.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = userEndpointStore (NO)
 field = endpoint|1|union:endpoint,1,1,low,,,,,,0
 field = neoUserId|2|idInt:neoUser,1,1,low,,,,,,0
 field = userEndpointId|3|idInt:userEndpoint,0,1,low,,,,,,0
 number = 1864
 returnType = userEndpoint
   description = Stores a new or a modified userEndpointobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = endpoint|,,The address of the endpoint, depending on the endpoint type.
   field = neoUserId|,,The user who has the endpoint registered.  TBD - to be changed to an AccountId.
   field = userEndpointId|,,

********** operation = userNotificationSend (NO)
 field = description|1|string,0,1,low,,,,,1000,0
 field = neoUserId|2|idInt:neoUser,1,1,,,,,,,0
 field = notification|3|union:notification,1,1,,,,,,,0
 number = 1865
 returnType = success
   field = description|,,The text description of the notification to be displayed when the underlying notification type is not known.
   field = neoUserId|,,The User to send the notification to.  The Notification will be sent to all devices registered to the User ("broadcast").  TBD: eventually, notifications should only be sent to online devices.  See status note below.  TBD: There should probably be a more descriptive status returned indicating at least a GREEN/YELLOW/RED status.  RED would indicate that there was at least one error in sending to a device. YELLOW would indicate that at least one notification was sent, but no response was received (and no errors). GREEN would indicate that at least one device responded positively to receiving the notification.  (Might also need BROWN for at least one GREEN and at least one RED, and BLUE for no notifications sent.)  TBD: NeoUsers will be deprecated in favor of Accounts.
   field = notification|,,The notification to send.

********** operation = videoPlaybackInfoEventRegister (YES)
   description = Registers for videoPlaybackInfoEvent events, which report the current play position and speed for the video playing on the output (either full-screen or PIG).
   field = throttleDelay|,,The amount of time (in milliseconds) that must pass before the next event is sent.  If unset, it will send events as frequently as possible.

********** operation = videoPlaybackPositionSet (YES)
   description = Sets the playback position of the video playing on the output.
   field = offset|,,The amount of time (in milliseconds) from the beginning to jump to.

********** operation = vodConfigInstructionsGet (NO)
 field = bodyId|1|idBody:body,1,1,low,,,,,,0
 field = callId|2|string,1,1,low,,,,,,0
 field = requestToken|3|anyDict,0,1,low,,,,,,0
 field = softwareVersion|4|string,1,1,low,,,,,,0
 field = userInitiated|5|boolean,1,1,low,,,,,,0
 number = 2077
 returnType = vodConfigInstructions
   description = This operation will return the provisioning information of VOD (Video On Demand) service needed by the body.
   field = callId|,,A session ID.  Historically, a session of a Service call is called a "call". Using "callId" here enables more straightforward correlation to the trackerDb. Typically, the client would send Unix time, in seconds. This same value should be used as the callId for the entire session, meaning the invocation of callInstructionsGet plus each of the subsequent invocations of sub-operations, if any.
   field = requestToken|,,Typically the "resultToken" of the previous *InstructionsGet response. If this is the first call, then this field is omitted. As an anyDict field, we have extensibility here.
   field = softwareVersion|,,The currently installed software version on the body. This field is mostly intended for informational logging and potentially identifying what software features are currently available to the client.
   field = userInitiated|,,Was this invocation initiated by explicit user action, rather than programmatically, based on callbackSeconds information? This is mainly informational.

********** operation = vodNodeDiscover (NO)
 field = provider|1|enum:vodProvider,1,1,,,,,,,0
 isFrozen = true
 number = 1813
 returnType = success
   description = QAM-based VOD systems need to determine where they are on a network in order to configure themselves properly. This identifier is generally called a VOD Node. Oftentimes, this involves using a tuner to tune to one or more sets of tuning parameters on which the operator broadcasts the Node information. This process is called Node Discovery. The vodNodeDiscover request provides an opportunity for the Trio Face to request that this discovery be performed on demand. The Body will apply the appropriate business logic for the specified provider to determine how and whether the node is discovered. This operation MAY cause a tuner conflict, and MAY cause video playback to be interrupted.  Note: This opeartion is deprecated.  Please use nodeGroupGet       instead.
   field = provider|,,The VOD provider to request Node Discovery for.

********** operation = vodPurchase (NO)
 field = assetId|1|idLong:asset,0,1,,,,,,,0
 field = mixId|2|idLong:mix,0,1,,,,,,,0
 isFrozen = true
 number = 1815
 returnType = success
   description = Purchase the VoD asset specified by the provided assetId or mixId.
   field = assetId|,,The assetId of the to-be-purchased VoD asset. This assetId is generally retrieved from the assetForAssetId annotation of a VoD offer.
   field = mixId|,,The mixId of the to-be-purchased VoD asset or folder. A purchase by mixId is more appropriate in some situations, e.g. where the underlying mix represents a purchasable folder and thus an assetId is not available.

********** operation = voiceChatInitiate (NO)
 field = chatSessionId|1|string,0,1,,,,,,,0
 field = socialPersonId|3|idString:socialPerson,1,1,,,8,,,,0
 field = userId|2|idInt:neoUser,1,1,,,,7,,,0
 number = 1470
 returnType = voiceChatStatus
   description = Initiates a voice chat.  This operation is used to either create a chat to which you can invite other users or join an existing chat to which you have been invited.  This must be called as a monitoring request.  As long as the request is live (and there are no errors), the caller is a participant in the chat.
   field = chatSessionId|,,The ID of the chat to join.  If not specified, this request will create a new chat to which other users can be invited.
   field = socialPersonId|8,,The identity of the person initiating/joining the voice chat.  For now, at least, this must be a socialPersonId on the Neo social network.
   field = userId|,7,The ID of the user initiating the call.  The caller just declares her own identity for now until a real login process is worked out.

********** operation = vpnConfigInstructionsGet (NO)
 field = bodyId|1|idBody:body,1,1,low,,,,,,0
 field = callId|2|string,1,1,low,,,,,,0
 field = requestToken|3|anyDict,0,1,low,,,,,,0
 field = softwareVersion|4|string,1,1,low,,,,,,0
 field = userInitiated|5|boolean,1,1,low,,,,,,0
 number = 2021
 returnType = vpnConfigInstructions
   description = This operation will return the information needed by the body to establish a VPN connection.
   field = callId|,,A session ID.  Historically, a session of a Service call is called a "call". Using "callId" here enables more straightforward correlation to the trackerDb. Typically, the client would send Unix time, in seconds. This same value should be used as the callId for the entire session, meaning the invocation of callInstructionsGet plus each of the subsequent invocations of sub-operations, if any.
   field = requestToken|,,Typically the "resultToken" of the previous *InstructionsGet response. If this is the first call, then this field is omitted. As an anyDict field, we have extensibility here.
   field = softwareVersion|,,The currently installed software version on the body. This field is mostly intended for informational logging and potentially identifying what software features are currently available to the client.
   field = userInitiated|,,Was this invocation initiated by explicit user action, rather than programmatically, based on callbackSeconds information? This is mainly informational.

********** operation = webVideoRemove (NO)
 field = webVideoId|1|idLong:webVideo,1,1,,,,,,,0
 number = 1946
 returnType = success
   description = Removes a webVideo object from the mind.

********** operation = webVideoSearch (NO)
 field = count|1|int,0,1,,1,,,1,,0
 field = format|2|enum:format,0,1,,,,,,,0
 field = groupBy|3|string,0,,,,,,,32,0
 field = imageRuleset|4|struct:imageRuleset,0,,,,,,,,0
 field = levelOfDetail|5|enum:levelOfDetail,0,1,,,,,,,0
 field = note|6|string,0,,,,,,,,0
 field = offset|7|int,0,1,,0,,,,,0
 field = orderBy|8|string,0,,,,,,,32,0
 field = responseTemplate|9|struct:responseTemplate,0,,,,,,,,0
 field = url|10|url,0,1,,,,,,512,0
 field = webVideoId|11|idLong:webVideo,0,1,,,,,,,0
 fieldGroup = imageRulesetFields
 fieldGroup = searchFieldsNoAnchoring
 number = 1947
 orderBy = title
 returnType = webVideoList
   description = Searches for webVideo objects.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = imageRuleset|,,one ruleset should be specified per image desired. multiple rulesets can be specified.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = url|,,Limits the search to an object with exactly the same value in this field.
   field = webVideoId|,,Limits the search to an object with exactly the same value in this field.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = webVideoStore (NO)
 field = description|1|string,0,1,low,,,,,4096,0
 field = image|2|struct:image,0,,medium,,,,,,0
 field = title|3|string,1,1,low,,,,,255,0
 field = url|4|url,1,1,low,,,,,512,0
 field = webVideoId|5|idLong:webVideo,0,1,low,,,,,,0
 number = 1948
 returnType = webVideo
   description = Stores a new or a modified webVideoobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = description|,,A description of the content of the video.
   field = image|,,Images to display in the UI along with the description of the video.
   field = title|,,The title of the video to display to the user.
   field = url|,,The URL to point your web browser at to play the video.  This may point to a page with ads and such around the video, because some providers don't give out URLs to full-screen videos.  Note: The maximum length is 512 because of limitations in mysql, whose maximum key length is 767.  Even though longer URLs may exist, we can't store them, because we want to be able to search for webVideos by URL.

********** operation = whatToWatchRemove (NO)
 field = bodyId|2|idBody:body,1,1,,,,,,,0
 field = whatToWatchId|1|idInt:whatToWatch,1,1,,,,,,,0
 number = 1938
 returnType = success
   description = Removes a whatToWatch object from the mind.

********** operation = whatToWatchSearch (YES)
 field = accountId|15
 field = addField|1
 field = anchor|2
 field = bodyId|3|idBody:body,0,1,,,,,,,0
 field = count|4|int,0,1,,1,,,1,,0
 field = excludeObjectIdAndType|16|long,0,,,,,,,,0
 field = format|5|enum:format,0,1,,,,,,,0
 field = groupBy|6|string,0,,,,,,,32,0
 field = imageRuleset|23|struct:imageRuleset,0,,,,,,,,0
 field = levelOfDetail|7|enum:levelOfDetail,0,1,,,,,,,0
 field = note|8|string,0,,,,,,,,0
 field = objectIdAndType|17|long,0,,,,,,,,0
 field = offset|9|int,0,1,,0,,,,,0
 field = orderBy|10|string,0,,,,,,,32,0
 field = removeField|11
 field = resolveCount|18|int,0,1,,0,,,,,0
 field = resolveLevelOfDetail|19|enum:levelOfDetail,0,1,,low,,,,,0
 field = resolveOffset|20|int,0,1,,0,,,,,0
 field = responseTemplate|12|struct:responseTemplate,0,,,,,,,,0
 field = subscriptionId|13|idInt:subscription,0,1,,,,,,,0
 field = useAnchorOperation|14
 field = watchOnBodyId|21|idBody:body,0,,,,,,,,0
 field = whatToWatchId|24|idInt:whatToWatch,0,1,,,,,,,0
 field = when|22|enum:whenToWatch,0,1,,,,,,,0
 fieldGroup = resolveSearchFields
 fieldGroup = searchFieldsNoAnchoring
 fieldGroup = imageRulesetFields
 groupBy = subscriptionId
 number = 1935
 orderBy = title
 orderBy = updateDate
 returnType = whatToWatchList
   description = Searches for things to watch based on the subscriptions that belong either to an account or a body.  Note: Searching by accountId is not implemented yet.
   field = bodyId|,,Limits the search to an object with exactly the same value in this field.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = excludeObjectIdAndType|,,An objectIdAndType from an idSequence obtained in a previous search operation, to be excluded from the result set.
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = imageRuleset|,,one ruleset should be specified per image desired. multiple rulesets can be specified.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = objectIdAndType|,,Limits the search to an object with exactly the same value in this field.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = resolveCount|,,If a format of (string)idSequence is specified, the count of objectIds that should be resolved into objects. Ignored unless format = (string)idSequence.
   field = resolveLevelOfDetail|,,If a format of (string)idSequence is specified, the levelOfDetail at which the objects should be resolved.  Ignored unless resolveCount > 0 and format = (string)idSequence.
   field = resolveOffset|,,If a format of (string)idSequence is specified, the offset into the objectId list that should be resolved into objects. Ignored unless resolveCount > 0 and format = (string)idSequence.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = subscriptionId|,,Restricts the search to whatToWatch objects that were created by the given subscription(s).
   field = watchOnBodyId|,,Restricts the search to programs that can be watched on one of the bodies listed.  If none are specified, then all of the bodies for the account are used.  Not implemented yet.
   field = whatToWatchId|,,Limits the search to an object with exactly the same value in this field.
   field = when|,,When true, returns only things that can be watched now on the selected device.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = whatToWatchSettingRemove (NO)
 field = settingName|1|string,1,,,,,,,,0
 number = 2120
 returnType = success
   description = Removes a WhatToWatch setting from a TCD

********** operation = whatToWatchSettingSearch (NO)
 field = bodyId|1|idBody:body,1,1,low,,,,,,0
 number = 2121
 returnType = whatToWatchSettingList
   description = Retrieves the WhatToWatch settings from the local mind of a TCD
   field = bodyId|,,The globally unique ID for this body.

********** operation = whatToWatchSettingStore (NO)
 field = displayRank|3|int,0,1,low,,,,,,0
 field = settingName|1|string,1,1,low,,,,,,0
 field = settingState|2|boolean,0,1,low,true,,,,,0
 number = 2122
 returnType = whatToWatchSetting
   description = Stores a new or a modified whatToWatchSettingobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.

********** operation = whatToWatchStore (NO)
 field = accountId|1
 field = bodyId|2|idBody:body,0,1,low,,,,,,0
 field = collectionForCollectionId|8|struct:collection,0,1,low,,,7,,,1
 field = collectionId|9|idLong:collection,0,1,low,,,,,,0
 field = contentForContentId|10|struct:content,0,1,low,,,7,,,1
 field = contentId|11|idLong:content,0,1,low,,,,,,0
 field = detail|3
 field = image|4|struct:image,0,,low,,,7,,,0
 field = reason|12|string,0,1,low,,,,,255,0
 field = source|5
 field = subscriptionForSubscriptionId|13|struct:subscription,0,1,low,,,7,,,1
 field = subscriptionId|14|idInt:subscription,1,1,low,,,,,,0
 field = title|6|string,1,1,low,,,,,255,0
 field = webVideoForWebVideoId|15|struct:webVideo,0,1,low,,,7,,,1
 field = webVideoId|16|idLong:webVideo,0,1,low,,,,,,0
 field = whatToWatchId|7|idInt:whatToWatch,0,1,low,,,,,,0
 field = whatToWatchImage|17|struct:image,0,,high,,,,,,0
 number = 1937
 returnType = whatToWatch
   description = Stores a new or a modified whatToWatchobject in the mind.  The returned object is what was stored, with all of the default values filled in, if any.
   field = bodyId|,,The body whose subscriptions were used to create this object. Every whatToWatch object will have either a bodyId or an accountId, but not both.
   field = collectionForCollectionId|,7,The collection object named by collectionId.
   field = collectionId|,,The show that was selected.  Every whatToWatch object will have exactly one of: collectionId, contentId, or webVideoId.
   field = contentForContentId|,7,The content object named by contentId.
   field = contentId|,,The show that was selected.  Every whatToWatch object will have exactly one of: collectionId, contentId, or webVideoId.
   field = image|,7,Poster art for the show.  The images returned will be taken from the images that were stored with this whatToWatch object, plus images from the content, collection, or webVideo that it refers to.
   field = reason|,,A short string describing why the subscription generated this item.  Could be things like "Rotten Tomatoes rated this a 91%" or "Joe Fernseher said: 'way cool'".  Not all subscription types will furnish a reason.
   field = subscriptionForSubscriptionId|,7,The subscription object named by subscriptionId.
   field = subscriptionId|,,The subscription that created this whatToWatch object.
   field = title|,,Title to display for this item.
   field = webVideoForWebVideoId|,7,The webVideo object named by webVideoId.
   field = webVideoId|,,The show that was selected.  Every whatToWatch object will have exactly one of: collectionId, contentId, or webVideoId.
   field = whatToWatchId|,,Identifier of this object, within the scope of the body or account associated with it.
   field = whatToWatchImage|,,Images specifically for this whatToWatch object.

********** operation = whatsOnSearch (YES)
 field = count|1|int,0,1,,1,,,1,,0
 field = format|2|enum:format,0,1,,,,,,,0
 field = groupBy|3|string,0,,,,,,,32,0
 field = levelOfDetail|4|enum:levelOfDetail,0,1,,,,,,,0
 field = note|5|string,0,,,,,,,,0
 field = offset|6|int,0,1,,0,,,,,0
 field = orderBy|7|string,0,,,,,,,32,0
 field = playerId|8|idInt:player,0,1,,,,,,,0
 field = responseTemplate|10|struct:responseTemplate,0,,,,,,,,0
 field = updateInterval|9|int,0,1,,,,,,,0
 fieldGroup = searchFieldsNoAnchoring
 number = 1613
 returnType = whatsOnList
   description = Performs a search whose result tells you "what's on" right now.  The result can include the content that is currently playing, the people in the scene, a frame capture of the video, or any combination of the above. If an empty whatsOnList is returned, we were not able to determine what was on.  On Neo w/VideoSurf, a non-monitoring query will return you a whatsOn list that includes content and person information.  A monitoring query should return you an initial response with just a frame capture, followed by a final response with the content and person information.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = playerId|,,The player to get status from.  If unspecified, it will retrieve status from the video currently on the output.  If more than one video is playing on the output, it's up to the client implementation to determine which one has precedence.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = updateInterval|,,For monitoring queries, how frequently to send updates, in seconds.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all

********** operation = whinyBodyRemove (NO)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 number = 1832
 returnType = success
   description = Remove bodyId from service.whinyBody table

********** operation = whinyBodySearch (NO)
 field = bodyId|1|idBody:body,0,1,,,,,,,0
 number = 1833
 returnType = whinyBodyList
   description = Return list of bodyIds in service.whinyBody table.

********** operation = whinyBodyStore (NO)
 field = bodyId|1|idBody:body,1,1,,,,,,,0
 number = 1834
 returnType = success
   description = Store bodyId in service.whinyBody table

********** operation = windowAlphaSet (NO)
 field = windowId|1|idInt:window,1,1,,,,,,,0
 number = 1898
 returnType = success
   description = Sets the alpha value of the window to the specified value, 0 for completely transparent, 255 for completely opaque
   field = windowId|,,The ID of the window whose alpha is to be changed

********** operation = windowBottomMove (NO)
 field = windowId|1|idInt:window,1,1,,,,,,,0
 number = 1899
 returnType = success
   description = Sends the specified window to the bottom of the Z-order, below all other windows
   field = windowId|,,The ID of the window to be moved to the bottom

********** operation = windowClose (NO)
 field = windowId|1|idInt:window,1,1,,,,,,,0
 number = 1900
 returnType = success
   description = Closes the specified window
   field = windowId|,,The ID of the window to be closed

********** operation = windowFocus (NO)
 field = windowId|1|idInt:window,1,1,,,,,,,0
 number = 1901
 returnType = success
   description = Gives the specified window input focus
   field = windowId|,,The ID of the window to be given input focus

********** operation = windowImageGet (NO)
 field = windowId|1|idInt:window,1,1,,,,,,,0
 number = 1902
 returnType = image
   description = Returns a binary image of the window as displayed on the screen (PNG format binary data)
   field = windowId|,,The ID of the window to retrieve image data from

********** operation = windowRectangleSet (NO)
 field = rectangle|1|struct:rectangle,1,1,,,,,,,0
 field = windowId|2|idInt:window,1,1,,,,,,,0
 number = 1904
 returnType = success
   description = Sets the size and position of a window
   field = rectangle|,,The rectangle containing the window's new size and position
   field = windowId|,,The ID of the window to move / size

********** operation = windowSearch (NO)
 number = 1905
 returnType = windowList
   description = Returns the list of windows currently visible on the system

********** operation = windowTopMove (NO)
 field = windowId|1|idInt:window,1,1,,,,,,,0
 number = 1906
 returnType = success
   description = Sends the specified window to the top of the Z-order, above all non-topmost windows
   field = windowId|,,The ID of the window to be moved to the top

********** operation = xmppDisable (NO)
 number = 664
 returnType = success
   description = tell mind to logout of xmpp so xmpp outbound messages are disabled

********** operation = xmppEnable (NO)
 number = 665
 returnType = success
   description = tell mind to login to xmpp so xmpp outbound messages can be sent

********** operation = xmppStatus (NO)
 number = 666
 returnType = xmppConnectionInfo
   description = get connection status of xmpp for this mind

********** operation = zipCodeInfoSearch (NO)
 field = addField|1|string,0,,,,,2,,,0
 field = anchor|2|anchorDict,0,1,,,,,,,0
 field = count|3|int,0,1,,1,,,1,,0
 field = format|4|enum:format,0,1,,,,,,,0
 field = groupBy|5|string,0,,,,,,,32,0
 field = levelOfDetail|6|enum:levelOfDetail,0,1,,,,,,,0
 field = noLimit|14|boolean,0,1,,,,,,,0
 field = note|7|string,0,,,,,,,,0
 field = offset|8|int,0,1,,0,,,,,0
 field = orderBy|9|string,0,,,,,,,32,0
 field = region|10|string,1,1,,,,,,6,0
 field = removeField|11|string,0,,,,,2,,,0
 field = responseTemplate|15|struct:responseTemplate,0,,,,,,,,0
 field = useAnchorOperation|12|boolean,0,1,,true,,,,,0
 field = zipCode|13|string,1,1,,,,,,16,0
 fieldGroup = searchFields
 number = 1364
 orderBy = areaCode
 returnType = zipCodeInfoList
   field = addField|,2,Adds given field to the response.  CANNOT use addField AND removeField together.  OBSOLETE: please do not use this. use levelOfDetail instead.  Contact us if levelOfDetail does not solve your issue.
   field = anchor|,,Anchor for this search.  This dictionary needs to be of the same type as the return type for this query.  For example, an anchor in an offerSearch request must be an offer.  An anchor is allowed to be "incomplete", meaning that minOccurs is ignored for anchors.  The only required attribute is the attribute corresponding to the first orderBy in the query.  The reason the server needs the anchor to have orderBy fields is because, in case it cannot find the anchor (e.g. the anchor vanishes from the list, or is deleted, or no longer relevant, or whatever), the server tries to find a "best match" for the anchor (the boolean "anchorSubstituted" in the result tells you whether it did this). The way it finds the substitute anchor is by finding the result object which closest matches the anchor's orderBy field. E.g. in a list of offers ordered by startTime, if it can't find the anchor, it'll find the offer whose startTime most closely matches the anchor's.
   field = count|,,The minimum allowed count is always 1. The maximum is dependent upon the format parameter. If a format of (string)idSequence is specified, the maximum allowed is 1000, otherwise the maximum allowed is 50.  The semantics of this variable count are dependent upon objectIdAndType, format, resolveCount, and noLimit as described below.  If count and resolveCount are omitted and a format of (string)idSequence is specified, this indicates the handler will perform an ID search for the client to use in a future resolve query. All IDs will be returned.  If count or resolveCount are specified in addition to a format of (string)idSequence, this indicates the handler will perform an ID search for the client to use in a future resolve query. Also the handler will return count or resolveCount pre-resolved objects. If both count and resolveCount are specified, count will be used and resolveCount will be ignored.  If objectIdAndType is specified in addition to a format of (string)idSequence, this indicates the handler will resolve the first count elements in the array objectIdAndType. This is known as the resolve phase of ID Resolve. Optionally, you can specify resolveCount and omit this parameter. If both are specified, this parameter will overrule resolveCount
   field = format|,,When present, this specifies the object type returned by the query.  The default is to return the "native" object type: contentSearch returns contentList, offerSearch returns offerList, etc.
   field = groupBy|,,When set, the results of the query will be group objects, where all objects with the same value in the grouped field are together.
   field = levelOfDetail|,,Specifies the level of detail desired in the response. Defaults to "high" in mind2, "low" in later versions.
   field = note|,,A request for the results to be annotated.
   field = offset|,,The offset from the anchor.  If not specified, default is 0.
   field = orderBy|,,Specifies the sort order for the returned objects.  Usually, this is the name of one of the fields in the returned objects.  If more than one is specified, the first is the primary sort order, the second specifies the order for objects that match in the first field, etc.
   field = region|,,Limits the search to an object with exactly the same value in this field.
   field = removeField|,2,Removes given field from the response. OBSOLETE: please do not use this. use levelOfDetail instead. Contact us if levelOfDetail does not solve your issue.
   field = responseTemplate|,,used to specify the specific fields returned for each structure
   field = useAnchorOperation|,,For internal use only.  When set to false, turns off full anchoring support, and just calls the normal search operation.  When set to "true", will invoke the AnchorOperation for any search that has the "anchor" field set.
   field = zipCode|,,Limits the search to an object with exactly the same value in this field.
   fieldProject = count|0|0|0|all
   fieldProject = format|0|0|0|all
   fieldProject = groupBy|0|0|0|all
   fieldProject = levelOfDetail|0|0|0|all
   fieldProject = offset|0|0|0|all
   fieldProject = orderBy|0|0|0|all
   fieldProject = responseTemplate|0|0|0|all
